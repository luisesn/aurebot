CCS PCH C Compiler, Version 4.068, 17192               08-abr-11 12:00

               Filename: C:\Llave\Mis documentos\Dropbox\Aurebot_p\aplicacion_control_vb\main.lst

               ROM used: 11266 bytes (34%)
                         Largest free fragment is 15354
               RAM used: 1171 (57%) at main() level
                         1223 (60%) worst case
               Stack:    16 worst case (9 in main + 7 for interrupts)

*
1800:  GOTO   3E78
*
1808:  MOVWF  05
180A:  MOVFF  FD8,06
180E:  MOVFF  FE0,07
1812:  MOVLB  0
1814:  MOVFF  FE9,0D
1818:  MOVFF  FEA,08
181C:  MOVFF  FE1,09
1820:  MOVFF  FE2,0A
1824:  MOVFF  FD9,0B
1828:  MOVFF  FDA,0C
182C:  MOVFF  FF3,14
1830:  MOVFF  FF4,15
1834:  MOVFF  FFA,16
1838:  MOVFF  00,0F
183C:  MOVFF  01,10
1840:  MOVFF  02,11
1844:  MOVFF  03,12
1848:  MOVFF  04,13
184C:  BTFSS  F9D.1
184E:  GOTO   1858
1852:  BTFSC  F9E.1
1854:  GOTO   2CDC
1858:  BTFSS  F9D.5
185A:  GOTO   1864
185E:  BTFSC  F9E.5
1860:  GOTO   2C5A
1864:  BTFSS  FA0.5
1866:  GOTO   1870
186A:  BTFSC  FA1.5
186C:  GOTO   2BF0
1870:  MOVFF  0F,00
1874:  MOVFF  10,01
1878:  MOVFF  11,02
187C:  MOVFF  12,03
1880:  MOVFF  13,04
1884:  BSF    0E.7
1886:  MOVFF  0D,FE9
188A:  MOVFF  08,FEA
188E:  MOVFF  09,FE1
1892:  MOVFF  0A,FE2
1896:  MOVFF  0B,FD9
189A:  MOVFF  0C,FDA
189E:  MOVFF  14,FF3
18A2:  MOVFF  15,FF4
18A6:  MOVFF  16,FFA
18AA:  MOVF   05,W
18AC:  MOVFF  07,FE0
18B0:  MOVFF  06,FD8
18B4:  RETFIE 0
.................... /* 
....................           _____                    _____                    _____                    _____ 
....................          /\    \                  /\    \                  /\    \                  /\    \ 
....................         /::\    \                /::\____\                /::\    \                /::\    \ 
....................        /::::\    \              /:::/    /               /::::\    \              /::::\    \ 
....................       /::::::\    \            /:::/    /               /::::::\    \            /::::::\    \ 
....................      /:::/\:::\    \          /:::/    /               /:::/\:::\    \          /:::/\:::\    \ 
....................     /:::/__\:::\    \        /:::/    /               /:::/__\:::\    \        /:::/__\:::\    \ 
....................    /::::\   \:::\    \      /:::/    /               /::::\   \:::\    \      /::::\   \:::\    \ 
....................   /::::::\   \:::\    \    /:::/    /      _____    /::::::\   \:::\    \    /::::::\   \:::\    \ 
....................  /:::/\:::\   \:::\    \  /:::/____/      /\    \  /:::/\:::\   \:::\____\  /:::/\:::\   \:::\    \ 
.................... /:::/  \:::\   \:::\____\|:::|    /      /::\____\/:::/  \:::\   \:::|    |/:::/__\:::\   \:::\____\ 
.................... \::/    \:::\  /:::/    /|:::|____\     /:::/    /\::/   |::::\  /:::|____|\:::\   \:::\   \::/    / 
....................  \/____/ \:::\/:::/    /  \:::\    \   /:::/    /  \/____|:::::\/:::/    /  \:::\   \:::\   \/____/ 
....................           \::::::/    /    \:::\    \ /:::/    /         |:::::::::/    /    \:::\   \:::\    \ 
....................            \::::/    /      \:::\    /:::/    /          |::|\::::/    /      \:::\   \:::\____\ 
....................            /:::/    /        \:::\__/:::/    /           |::| \::/____/        \:::\   \::/    / 
....................           /:::/    /          \::::::::/    /            |::|  ~|               \:::\   \/____/ 
....................          /:::/    /            \::::::/    /             |::|   |                \:::\    \ 
....................         /:::/    /              \::::/    /              \::|   |                 \:::\____\ 
....................         \::/    /                \::/____/                \:|   |                  \::/    / 
....................          \/____/                  ~~                       \|___|                   \/____/ 
....................  
....................    Programa de ejemplo para la AureBoard 
....................    Requerido: Aureboard Versión>2.0 
....................  
....................    - El programa configura el puerto Serie por USB. 
....................    - Cada programa deberá ir en su carpeta al mismo nivel de la carpeta lib 
....................  
....................  
....................  
....................  
....................    A.U.R.E. 2010 
.................... */ 
....................  
.................... #include <../lib/aurebot.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... //Configuramos el pic para que trabaje a 48Mhz con un cristal de 4 Mhz. 
.................... #fuses XTPLL,MCLR,NOWDT,NOPROTECT,NOLVP,NODEBUG, VREGEN  
.................... #fuses IESO,BROWNOUT,STVREN,NOWRT,FCMEN,USBDIV,PLL1,CPUDIV1 
.................... #device adc=8 
.................... #use delay(clock=48000000) 
*
2D3A:  CLRF   FEA
2D3C:  MOVLW  A8
2D3E:  MOVWF  FE9
2D40:  MOVF   FEF,W
2D42:  BZ    2D60
2D44:  MOVLW  0F
2D46:  MOVWF  01
2D48:  CLRF   00
2D4A:  DECFSZ 00,F
2D4C:  BRA    2D4A
2D4E:  DECFSZ 01,F
2D50:  BRA    2D48
2D52:  MOVLW  8F
2D54:  MOVWF  00
2D56:  DECFSZ 00,F
2D58:  BRA    2D56
2D5A:  NOP   
2D5C:  DECFSZ FEF,F
2D5E:  BRA    2D44
2D60:  RETLW  00
*
385E:  MOVLW  01
3860:  SUBWF  x91,F
3862:  BNC   387C
3864:  CLRF   FEA
3866:  MOVLW  91
3868:  MOVWF  FE9
386A:  MOVF   FEF,W
386C:  BZ    387C
386E:  MOVLW  02
3870:  MOVWF  00
3872:  DECFSZ 00,F
3874:  BRA    3872
3876:  BRA    3878
3878:  DECFSZ FEF,F
387A:  BRA    386E
387C:  RETLW  00
....................  
....................  
.................... // Incluimos el descriptor del cargador 
.................... #include "..\lib\bootloader\usb_bootloader.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                     USB_BOOTLOADER.H                              //// 
.................... ////                                                                   //// 
.................... ////  This include file must be included by any application loaded     //// 
.................... ////  by the example USB bootloader (ex_usb_bootloader                 //// 
.................... ////                                                                   //// 
.................... ////  The directives in this file relocate the reset and interrupt     //// 
.................... ////  vectors as well as reserving space for the bootloader.           //// 
.................... ////                                                                   //// 
.................... ////  For more documentation see ex_usb_bootloader.c                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... //how big is the bootloader? 
.................... //the bootloader will reside from address 0x0000 to this location.  the 
.................... //application will then sit at this location+1 to the end of program memory. 
.................... #define LOADER_SIZE        (0x17FF) 
....................  
.................... //the loader and application need a common flag that determines if we are in 
.................... //the bootloader or application, that way the ISR knows where to go.  this 
.................... //is the location in ram that is reserved for this flag. 
.................... #define LOC_IN_LOADER_FLAG  0x25 
....................  
.................... //// --- end configuration --- //////////////////////////////////////////// 
....................  
.................... #reserve LOC_IN_LOADER_FLAG 
....................  
.................... int8 g_InBootloader; 
.................... #locate g_InBootloader=LOC_IN_LOADER_FLAG 
....................  
.................... #define LOADER_START       (0) 
.................... #define LOADER_END         (LOADER_SIZE) 
.................... #define APPLICATION_START  (LOADER_SIZE+1) 
.................... #define APPLICATION_END    (getenv("PROGRAM_MEMORY")-1) 
.................... #define APPLICATION_ISR    (APPLICATION_START+8) 
....................  
.................... #ifdef _bootloader 
....................  /* 
....................   Provide an empty application, so if you load this .HEX file into the pic 
....................   without an application this will prevent the pic from executing unknown code. 
....................  */ 
....................  #org APPLICATION_START,APPLICATION_START+0xF 
....................  void BlankApplication(void)  
....................  { 
....................    while(TRUE); 
....................  } 
....................  
....................  //we need to prevent the loader from using application space 
....................  #if APPLICATION_END>0xFFFF 
....................    #org APPLICATION_START+0x10, 0xFFFF {} 
....................    #if APPLICATION_END>0x1FFFF 
....................       #org 0xFFFF, 0x1FFFF {} 
....................    #else 
....................       #org 0xFFFF, APPLICATION_END {} 
....................    #endif 
....................  #else 
....................    #org APPLICATION_START+0x10, APPLICATION_END {} 
....................  #endif 
.................... #endif 
....................  
.................... #ifndef _bootloader 
....................  //in the application, this moves the reset and isr vector out of the bootload 
....................  //space.  it then reserves the loader space from being used by the application. 
....................  #build(reset=APPLICATION_START, interrupt=APPLICATION_ISR) 
....................  #org 0, LOADER_END {} 
.................... #endif 
....................  
.................... // Incluimos las rutinas de gestión del usb y del "Comunications Device Class" 
.................... #include "..\lib\bootloader\usb_cdc.h" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////                            usb_cdc.h                            //// 
.................... ////                                                                 //// 
.................... //// Library for adding a virtual COM port on your PC over USB using //// 
.................... //// the standard Communication Device Class (CDC) specification.    //// 
.................... //// Including this file in your code will add all USB code,         //// 
.................... //// interrupts, descriptors and handlers required.  No other        //// 
.................... //// modifications need to be made.                                  //// 
.................... ////                                                                 //// 
.................... //// This library creates a virtual RS232 link between the PC and    //// 
.................... //// the PIC, therefore the library provided will be familiar to     //// 
.................... //// anyone with standard UART stream I/O:                           //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_kbhit() - Returns TRUE if there is one or more          //// 
.................... ////      character received and waiting in the receive buffer.      //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_getc() - Gets a character from the receive buffer.  If  //// 
.................... ////      there is no data in the receive buffer it will wait until  //// 
.................... ////      there is data in the receive buffer.  If you do not want   //// 
.................... ////      to wait in an infinit loop, use usb_cdc_kbhit() first to   //// 
.................... ////      check if there is data before calling usb_cdc_getc().      //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_putc(char c) - Puts a character into the transmit       //// 
.................... ////      buffer.  If the transmit buffer is full it will wait until //// 
.................... ////      the transmit buffer is not full before putting the char    //// 
.................... ////      into the transmit buffer.  The transmit buffer is read by  //// 
.................... ////      the PC very quickly, and therefore the buffer should only  //// 
.................... ////      be full for a few milli-seconds.  If you are concerned     //// 
.................... ////      and don't want to be stuck in a long or infinite loop,     //// 
.................... ////      use usb_cdc_putready() to see if there is space in the     //// 
.................... ////      transmit buffer before putting data into the transmit      //// 
.................... ////      buffer.                                                    //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_putready() - Returns TRUE if there is room left in the  //// 
.................... ////      transmit buffer for another character.                     //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_connected() - Returns TRUE if we received a             //// 
.................... ////      Set_Line_Coding.  On most serial terminal programs (such   //// 
.................... ////      as Hyperterminal), they will send a Set_Line_Coding        //// 
.................... ////      message when the program starts and it opens the virtual   //// 
.................... ////      COM port.  This is a simple way to determine if the PC     //// 
.................... ////      is ready to display data on a serial terminal program,     //// 
.................... ////      but is not garaunteed to work all the time or on other     //// 
.................... ////      terminal programs.                                         //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_putc_fast(char c) - Similar to usb_cdc_putc(), except   //// 
.................... ////      if the transmit buffer is full it will skip the char.      //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_line_coding - A structure used for Set_Line_Coding and  //// 
.................... ////       Get_Line_Coding.  Most of the time you can ignore this.   //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_break - If the PC has sent a break command, this will   //// 
.................... ////       hold the break time (in milli-seconds).  If the PC sends  //// 
.................... ////       a value of 0xFFFF the device is supposed to hold the      //// 
.................... ////       break until it sends a value of 0                         //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_carrier - Where Set_Control_Line_State value is stored. //// 
.................... ////       Of most relevance is the field dte_present, which is the  //// 
.................... ////       DTR setting.                                              //// 
.................... ////                                                                 //// 
.................... //// The following functions are also provided, and are ports of the //// 
.................... //// I/O functions in input.c.  See input.c and the CCS manual for   //// 
.................... //// documentation:                                                  //// 
.................... ////   get_float_usb() - Read a float number from the user           //// 
.................... ////   get_long_usb() - Read a long number from the user             //// 
.................... ////   get_int_usb() - Read an integer number from the user          //// 
.................... ////   get_string_usb(char *s, int max) - Read a string from the user. //// 
.................... ////   gethex_usb() - Read a byte, in HEX, from the user             //// 
.................... ////   gethex1_usb() - Read a HEX character                          //// 
.................... ////                                                                 //// 
.................... //// This driver will load all the rest of the USB code, and a set   //// 
.................... //// of descriptors that will properly describe a CDC device for a   //// 
.................... //// virtual COM port (usb_desc_cdc.h)                               //// 
.................... ////                                                                 //// 
.................... //// An .INF file is provided (cdc_NTXP.inf) that will load the      //// 
.................... //// standard CDC drivers for a virtual COM port in Windows          //// 
.................... //// NT/2000/XP and above.  Unfortunately we do not provide an .inf  //// 
.................... //// file for Windows 98 and ME.                                     //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// VERSION HISTORY                                                 //// 
.................... ////                                                                 //// 
.................... //// October 27th, 2005: Changed the way incoming packets are        //// 
.................... ////               handled in that CDC driver will not flush         //// 
.................... ////               endpoint until user has handled all data.  This   //// 
.................... ////               will prevent overflows as the USB will NAK        //// 
.................... ////               incoming packets until it is ready to receive     //// 
.................... ////               more.                                             //// 
.................... ////            When using 18F4550 family, the RX buffer is          //// 
.................... ////               mapped directly to the endpoint buffer - this     //// 
.................... ////               saves a chunk of RAM.                             //// 
.................... ////            When using the 18F4550 family, you can increase      //// 
.................... ////               the TX and RX size over 64 bytes.                 //// 
.................... ////            No longer send 0len packets in the TBE interrupt.    //// 
.................... ////            Hopefully fixed bugs that caused random crashes      //// 
.................... ////               if you tried sending more than 64 bytes.          //// 
.................... ////                                                                 //// 
.................... //// July 6th, 2005: Global interrupts disabled when writing to TX   //// 
.................... ////                   buffer.                                       //// 
.................... ////                                                                 //// 
.................... //// July 1st, 2005: Initial Release.                                //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... //api for the user: 
.................... #define usb_cdc_kbhit() (usb_cdc_get_buffer_status.got) 
.................... #define usb_cdc_putready() (usb_cdc_put_buffer_nextin<USB_CDC_DATA_IN_SIZE) 
.................... #define usb_cdc_connected() (usb_cdc_got_set_line_coding) 
.................... void usb_cdc_putc_fast(char c); 
.................... char usb_cdc_getc(void); 
.................... void usb_cdc_putc(char c); 
....................  
.................... //input.c ported to use CDC: 
.................... float get_float_usb(); 
.................... signed long get_long_usb(); 
.................... signed int get_int_usb(); 
.................... void get_string_usb(char* s, int max); 
.................... BYTE gethex_usb(); 
.................... BYTE gethex1_usb(); 
....................  
.................... //functions automatically called by USB handler code 
.................... void usb_isr_tkn_cdc(void); 
.................... void usb_cdc_init(void); 
.................... void usb_isr_tok_out_cdc_control_dne(void); 
.................... void usb_isr_tok_in_cdc_data_dne(void); 
.................... void usb_isr_tok_out_cdc_data_dne(void); 
....................  
.................... void usb_cdc_flush_out_buffer(void); 
....................  
.................... //Tells the CCS PIC USB firmware to include HID handling code. 
.................... #DEFINE USB_HID_DEVICE  FALSE 
.................... #DEFINE USB_CDC_DEVICE  TRUE 
....................  
.................... #define USB_CDC_COMM_IN_ENDPOINT       1 
.................... #define USB_CDC_COMM_IN_SIZE           8 
.................... #define USB_EP1_TX_ENABLE  USB_ENABLE_INTERRUPT 
.................... #define USB_EP1_TX_SIZE  USB_CDC_COMM_IN_SIZE 
....................  
.................... //pic to pc endpoint config 
.................... #define USB_CDC_DATA_IN_ENDPOINT       2 
.................... #define USB_CDC_DATA_IN_SIZE           64 
.................... #define USB_EP2_TX_ENABLE  USB_ENABLE_BULK 
.................... #define USB_EP2_TX_SIZE  USB_CDC_DATA_IN_SIZE 
....................  
.................... //pc to pic endpoint config 
.................... #define USB_CDC_DATA_OUT_ENDPOINT       2 
.................... #define USB_CDC_DATA_OUT_SIZE           64 
.................... #define USB_EP2_RX_ENABLE  USB_ENABLE_BULK 
.................... #define USB_EP2_RX_SIZE  USB_CDC_DATA_OUT_SIZE 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // Include the CCS USB Libraries.  See the comments at the top of these 
.................... // files for more information 
.................... // 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... #ifndef __USB_PIC_PERIF__ 
.................... #define __USB_PIC_PERIF__   1 
.................... #endif 
....................  
.................... #if __USB_PIC_PERIF__ 
....................  #if defined(__PCM__) 
....................   #error CDC requires bulk mode!  PIC16C7x5 does not have bulk mode 
....................  #else 
....................   #include <pic18_usb.h>   //Microchip 18Fxx5x hardware layer for usb.c 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes: //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor //// 
.................... ////   usb.c - USB token and request handler code                    //// 
.................... ////   usb.h - definitions, prototypes and global variables          //// 
.................... ////                                                                 //// 
.................... //// The following examples are provided by CCS:                     //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                 //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.       //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple  //// 
.................... ////                      interfaces.                                //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple //// 
.................... ////                      HID Reports.                               //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom        //// 
.................... ////                    protocol requiring custom Windows drivers.   //// 
.................... ////   ex_usb_serial.c -                                             //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for   //// 
.................... ////     a virtual COM port.                                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on C4 or C5 depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on C3, even if you are using  //// 
.................... ////  the internal 3.3V USB regulator.                               //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ////    ****************   USER FUNCTIONS  ***********************   //// 
.................... ////                                                                 //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and  //// 
.................... ////              attaches the unit to the usb bus.  Enables         //// 
.................... ////              interrupts.                                        //// 
.................... ////                                                                 //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit      //// 
.................... ////              to usb bus or enable interrupts.                   //// 
.................... ////                                                                 //// 
.................... //// usb_put_packet() - Sends one packet to the host.                //// 
.................... ////                    If you need to send a message that spans     //// 
.................... ////                    more than one packet then see usb_puts() in  //// 
.................... ////                    usb.c                                        //// 
.................... ////                                                                 //// 
.................... //// usb_kbhit() - Returns true if OUT endpoint contains data from   //// 
.................... ////               host.                                             //// 
.................... ////                                                                 //// 
.................... //// usb_rx_packet_size() - Returns the size of packet that was      //// 
.................... ////               received.  usb_kbhit() must return TRUE else      //// 
.................... ////               this is not valid.  Don't forget in USB there     //// 
.................... ////               are 0 len packets!                                //// 
.................... ////                                                                 //// 
.................... //// usb_get_packet() - Gets one packet that from the host.          //// 
.................... ////                    usb_kbhit() must return true before you call //// 
.................... ////                    this routine or your data may not be valid.  //// 
.................... ////                    Once usb_kbhit() returns true you want to    //// 
.................... ////                    call this as soon as possible to get data    //// 
.................... ////                    out of the endpoint buffer so the PC can     //// 
.................... ////                    start sending more data, if needed.          //// 
.................... ////                    This only receives one packet, if you are    //// 
.................... ////                    trying to receive a multi-packet message     //// 
.................... ////                    see usb_gets() in usb.c.                     //// 
.................... ////                                                                 //// 
.................... //// usb_detach() - De-attach USB from the system.                   //// 
.................... ////                                                                 //// 
.................... //// usb_attach() - Attach USB to the system.                        //// 
.................... ////                                                                 //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a    //// 
.................... ////                  USB cable.  A macro that looks at the defined  //// 
.................... ////                  connection sense pin.                          //// 
.................... ////                                                                 //// 
.................... //// usb_task() - Keeps track of connection sense, calling           //// 
.................... ////              usb_detach() and usb_attach() when needed.         //// 
.................... ////                                                                 //// 
.................... //// For more documentation on these functions read the comments at  //// 
.................... //// each function.                                                  //// 
.................... ////                                                                 //// 
.................... //// The other functions defined in this file are for use by the     //// 
.................... //// USB code, and is not meant to be used by the user.              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_HARDWARE__ 
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_BUFFER_SPACE  ((int16)getenv("RAM")-0x500) 
....................  #define USB_MAX_NUM_ENDPOINTS  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #if ((USB_EP3_TX_SIZE + USB_EP3_RX_SIZE + USB_EP4_TX_SIZE + USB_EP4_RX_SIZE + \ 
....................       USB_EP5_TX_SIZE + USB_EP5_RX_SIZE + USB_EP6_TX_SIZE + USB_EP6_RX_SIZE + \ 
....................       USB_EP7_TX_SIZE + USB_EP7_RX_SIZE + USB_EP8_TX_SIZE + USB_EP8_RX_SIZE + \ 
....................       USB_EP9_TX_SIZE + USB_EP9_RX_SIZE + USB_EP10_TX_SIZE + USB_EP10_RX_SIZE + \ 
....................       USB_EP11_TX_SIZE + USB_EP11_RX_SIZE + USB_EP12_TX_SIZE +USB_EP12_RX_SIZE + \ 
....................       USB_EP13_TX_SIZE + USB_EP13_RX_SIZE + USB_EP14_TX_SIZE + USB_EP14_RX_SIZE + \ 
....................       USB_EP15_TX_SIZE + USB_EP15_RX_SIZE) > 0) 
....................    #error This driver only supports endpoints 0, 1 and 2 for this chip. 
....................  #endif 
....................  #define USB_MAX_NUM_ENDPOINTS  3 
....................  #define USB_TOTAL_BUFFER_SPACE  (0x100 - USB_MAX_NUM_ENDPOINTS*8) 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550")) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_BUFFER_SPACE  ((int16)0x300) 
....................  #define USB_MAX_NUM_ENDPOINTS  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #if defined(__USB_4450__) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... ////                   **** DEFINITIONS *****                          //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (FALSE) - Set to TRUE if your device supports        //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            Only the 18Fxx5x USB peripheral can    //// 
.................... ////                            have a value larger than 8.            //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE  //set to false to opt for less RAM, true to opt for less ROM 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     0 
.................... #define USB_ENABLE_BULK         0x01 
.................... #define USB_ENABLE_ISOCHRONOUS  0x02 
.................... #define USB_ENABLE_INTERRUPT    0x03 
.................... #define USB_ENABLE_CONTROL      0x04 
....................  
.................... //// DO NOT CHANGE THE FOLLOWING VALUES: 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #else 
.................... struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #endif 
....................  
.................... int16 __usb_kbhit_status; 
....................  
.................... /// *** User function prototypes 
.................... void usb_wait_for_enumeration(void); 
.................... int1 usb_unermated(void); 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout); 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout); 
....................  
.................... /// *** Token and request hanlder function prototypes 
.................... void usb_token_reset(); 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_request_send_response(int len);   //always sends usb_ep0_rx_buffer[] to endpoint 0 with a toggle of DATA 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tok_in_dne(int8 endpoint); 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
....................  
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
....................  
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
....................  
.................... void usb_finish_set_address(void); 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #define USB_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if (USB_BUFFER_NEEDED > USB_TOTAL_BUFFER_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if defined(__USB_4450__) 
....................  #reserve 0x400:0x4FF 
.................... #else 
....................  #reserve 0x400:0x4FF+USB_BUFFER_NEEDED 
.................... #endif 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #ifndef USB_USE_ERROR_COUNTER 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #ifndef USB_PING_PONG_MODE 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte USTAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte USTAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... #byte UEP0    =  UEP0_LOC 
....................  
.................... #if defined(__USB_4450__) 
....................  //#define USB_BUFFER (0x400 + (USB_MAX_NUM_ENDPOINTS*8)) //compiler doesnt support this 
....................  #if USB_MAX_NUM_ENDPOINTS==3 
....................   #define USB_BUFFER 0x418   //if you have an old compiler you will need to use this 
....................  #else 
....................   #error Define USB_BUFFER for the number of endpoints you have (0x400 + NUM*0x08) 
....................  #endif 
.................... #else 
....................  #define USB_BUFFER 0x500 
.................... #endif 
....................  
.................... #byte BD0STAT  =  0x400 
.................... #byte BD0CNT  =  0x401 
.................... #byte BD0ADRL  =  0x402 
.................... #byte BD0ADRJ  =  0x403 
....................  
.................... #define BD0STAT_LOC 0x400 
.................... #define BD0CNT_LOC  0x401 
.................... #define BD0ADRL_LOC 0x402 
.................... #define BD0ADRH_LOC 0x403 
....................  
.................... #define UEP(x) *(UEP0_LOC+x) 
....................  
.................... #BIT UIR_SOF = UIR.6 
.................... #BIT UIR_STALL = UIR.5 
.................... #BIT UIR_IDLE = UIR.4 
.................... #BIT UIR_TRN = UIR.3 
.................... #BIT UIR_ACTV = UIR.2 
.................... #BIT UIR_UERR = UIR.1 
.................... #BIT UIR_URST = UIR.0 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    *(BD0STAT_LOC + x*8) 
....................  #define EP_BDxCNT_O(x)    *(BD0CNT_LOC + x*8) 
....................  #define EP_BDxADR_O(x)   *(int16 *)(BD0ADRL_LOC + x*8) 
....................  #define EP_BDxST_I(x)    *(BD0STAT_LOC + 4 + x*8) 
....................  #define EP_BDxCNT_I(x)    *(BD0CNT_LOC + 4 + x*8) 
....................  #define EP_BDxADR_I(x)   *(int16 *)(BD0ADRL_LOC + 4 + x*8) 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS 0x3F 
.................... #else 
....................  #define STANDARD_INTS 0x3D 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #define __USB_UCFG_UTRDIS  0x08 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #define __UCFG_VAL_DISABLED__ 0x08 
....................  
.................... char usb_ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
.................... #locate usb_ep0_rx_buffer=USB_BUFFER 
....................  
.................... char usb_ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
.................... #locate usb_ep0_tx_buffer=USB_BUFFER+USB_MAX_EP0_PACKET_LENGTH 
....................  
.................... char usb_data_buffer[USB_TOTAL_BUFFER_SPACE-USB_MAX_EP0_PACKET_LENGTH-USB_MAX_EP0_PACKET_LENGTH]; 
.................... #locate usb_data_buffer=USB_BUFFER+USB_MAX_EP0_PACKET_LENGTH+USB_MAX_EP0_PACKET_LENGTH 
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //following functions standard part of CCS PIC USB driver, and used by usb.c 
.................... void usb_init(); 
.................... void usb_detach(); 
.................... int1 usb_put_packet(int endpoint, int * ptr, int16 len, USB_DTS_BIT tgl); 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); //marks the transmit buffer as ready for transmission 
.................... int16 usb_get_packet(int8 endpoint, int8 * ptr, int16 max); 
.................... int16 usb_rx_packet_size(int8 endpoint); 
.................... int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max); 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
.................... void usb_stall_ep(int8 endpoint); 
.................... void usb_unstall_ep(int8 endpoint); 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
.................... void usb_set_address(int8 address); 
.................... void usb_set_configured(int config); 
.................... void usb_disable_endpoints(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void) {  //done 
....................    UCON=0;  //disable USB hardware 
*
2D62:  CLRF   F6D
....................    UIE=0;   //disable USB interrupts 
2D64:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
2D66:  MOVLW  08
2D68:  MOVWF  F6F
....................    set_tris_c(*0xF94 | 0x30); 
2D6A:  MOVF   F94,W
2D6C:  IORLW  30
2D6E:  MOVWF  F94
....................    usb_state=USB_STATE_DETACHED; 
2D70:  CLRF   1F
2D72:  CLRF   18
2D74:  BTFSC  FF2.7
2D76:  BSF    18.7
2D78:  BCF    FF2.7
....................    usb_token_reset();              //clear the chapter9 stack 
2D7A:  CALL   2086
2D7E:  BTFSC  18.7
2D80:  BSF    FF2.7
....................    __usb_kbhit_status=0; 
2D82:  CLRF   1E
2D84:  CLRF   1D
.................... } 
2D86:  GOTO   2DD0 (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void) { 
2D8A:  CLRF   18
2D8C:  BTFSC  FF2.7
2D8E:  BSF    18.7
2D90:  BCF    FF2.7
....................    usb_token_reset(); 
2D92:  CALL   2086
2D96:  BTFSC  18.7
2D98:  BSF    FF2.7
....................     UCON = 0; 
2D9A:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
2D9C:  MOVLW  14
2D9E:  MOVWF  F6F
....................     UIE = 0;                                // Mask all USB interrupts 
2DA0:  CLRF   F69
....................     UCON_USBEN = 1;                     // Enable module & attach to bus 
2DA2:  BSF    F6D.3
....................     usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
2DA4:  MOVLW  01
2DA6:  MOVWF  1F
.................... } 
2DA8:  GOTO   2DB2 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: Resets and initalizes USB peripheral.  Does not attach the peripheral 
.................... /*          to the USB bus.  See usb_attach() and usb_task() on how to 
.................... /*          attach to the USB bus. 
.................... /* 
.................... /*          You must call this before any other USB code. 
.................... /* 
.................... /*          NOTE: an alternative function, usb_init(), is provided that 
.................... /*                initializes the USB and then connects. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #define usb_init_cs usb_detach 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: Keeps an eye on the connection sense pin to determine if we are 
.................... /*          attached to a USB cable or not.  If we are attached to a USB cable, 
.................... /*          initialize the USB peripheral if needed.  If we are disconnected 
.................... /*          from the USB cable, disable the USB peripheral. 
.................... /* 
.................... /*          NOTE: If you are not using a connection sense pin, will automatically 
.................... /*                enable the USB peripheral. 
.................... /* 
.................... /*          NOTE: this enables interrupts once the USB peripheral is ready 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void) { 
....................    if (usb_attached()) { 
....................       if (UCON_USBEN==0) { 
2DAC:  BTFSC  F6D.3
2DAE:  BRA    2DB2
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
2DB0:  BRA    2D8A
....................       } 
....................    } 
....................    else { 
....................       if (UCON_USBEN==1)  { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0)) { 
2DB2:  DECFSZ 1F,W
2DB4:  BRA    2DCC
2DB6:  BTFSC  F6D.5
2DB8:  BRA    2DCC
....................       UIR=0; 
2DBA:  CLRF   F68
....................       UIE=0; 
2DBC:  CLRF   F69
....................       enable_interrupts(INT_USB); 
2DBE:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
2DC0:  MOVLW  C0
2DC2:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB interrupt 
2DC4:  MOVLW  11
2DC6:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
2DC8:  MOVLW  02
2DCA:  MOVWF  1F
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
2DCC:  RETLW  00
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: Resets and initalizes USB hardware.  You must call this first before 
.................... /*          using code.  Will attach the USB periperhal to the USB bus. 
.................... /* 
.................... /*          NOTE: If you are using a connection sense pin, this will wait in 
.................... /*                an infinite loop until the device is connected to a USB cable. 
.................... /* 
.................... /*          NOTE: If you are not using a connection sense pin, this will wait 
.................... /*                in an infinte loop until the SE0 condition clears, which usually 
.................... /*                doesn't take long 
.................... /* 
.................... /*          NOTE: this enables interrupts. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void) { 
....................    usb_init_cs(); 
2DCE:  BRA    2D62
....................  
....................    do { 
....................       usb_task(); 
2DD0:  RCALL  2DAC
....................    } while (usb_state != USB_STATE_POWERED); 
2DD2:  MOVF   1F,W
2DD4:  SUBLW  02
2DD6:  BNZ   2DD0
.................... } 
2DD8:  GOTO   2DE2 (RETURN)
....................  
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC) 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl) { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    i=EP_BDxST_I(endpoint); 
*
2866:  MOVF   xC0,W
2868:  MULLW  08
286A:  MOVF   FF3,W
286C:  ADDLW  04
286E:  MOVWF  01
2870:  MOVLW  04
2872:  MOVWF  03
2874:  BTFSC  FD8.0
2876:  INCF   03,F
2878:  MOVFF  01,FE9
287C:  MOVFF  03,FEA
2880:  MOVFF  FEF,C4
....................    if (!bit_test(i,7)) { 
2884:  BTFSC  xC4.7
2886:  BRA    293E
....................  
....................       EP_BDxCNT_I(endpoint)=len; 
2888:  MOVF   xC0,W
288A:  MULLW  08
288C:  MOVF   FF3,W
288E:  ADDLW  05
2890:  MOVWF  01
2892:  MOVLW  04
2894:  MOVWF  03
2896:  BTFSC  FD8.0
2898:  INCF   03,F
289A:  MOVFF  01,FE9
289E:  MOVFF  03,FEA
28A2:  MOVFF  C1,FEF
....................  
....................      debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE) { 
28A6:  MOVF   xC3,W
28A8:  SUBLW  02
28AA:  BNZ   28D8
....................          i=EP_BDxST_I(endpoint); 
28AC:  MOVF   xC0,W
28AE:  MULLW  08
28B0:  MOVF   FF3,W
28B2:  ADDLW  04
28B4:  MOVWF  01
28B6:  MOVLW  04
28B8:  MOVWF  03
28BA:  BTFSC  FD8.0
28BC:  INCF   03,F
28BE:  MOVFF  01,FE9
28C2:  MOVFF  03,FEA
28C6:  MOVFF  FEF,C4
....................          if (bit_test(i,6)) 
28CA:  BTFSS  xC4.6
28CC:  BRA    28D2
....................             tgl=USB_DTS_DATA0;  //was DATA1, goto DATA0 
28CE:  CLRF   xC3
....................          else 
28D0:  BRA    28D6
....................             tgl=USB_DTS_DATA1;  //was DATA0, goto DATA1 
28D2:  MOVLW  01
28D4:  MOVWF  xC3
....................       } 
....................       else if (tgl == USB_DTS_USERX) { 
28D6:  BRA    28FE
28D8:  MOVF   xC3,W
28DA:  SUBLW  04
28DC:  BNZ   28FE
....................          i=EP_BDxST_O(endpoint); 
28DE:  MOVF   xC0,W
28E0:  MULLW  08
28E2:  MOVFF  FF3,01
28E6:  MOVLW  04
28E8:  MOVFF  01,FE9
28EC:  MOVWF  FEA
28EE:  MOVFF  FEF,C4
....................          if (bit_test(i,6)) 
28F2:  BTFSS  xC4.6
28F4:  BRA    28FC
....................             tgl=USB_DTS_DATA1; 
28F6:  MOVLW  01
28F8:  MOVWF  xC3
....................          else 
28FA:  BRA    28FE
....................             tgl=USB_DTS_DATA0; 
28FC:  CLRF   xC3
....................       } 
....................       if (tgl == USB_DTS_DATA1) { 
28FE:  DECFSZ xC3,W
2900:  BRA    2908
....................          i=0xC8;  //DATA1, UOWN 
2902:  MOVLW  C8
2904:  MOVWF  xC4
....................       } 
....................       else if (tgl == USB_DTS_DATA0) { 
2906:  BRA    2910
2908:  MOVF   xC3,F
290A:  BNZ   2910
....................          i=0x88; //DATA0, UOWN 
290C:  MOVLW  88
290E:  MOVWF  xC4
....................       } 
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
2910:  BTFSC  xC2.0
2912:  BSF    xC4.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
2914:  BTFSC  xC2.1
2916:  BSF    xC4.1
....................  
....................       debug_usb(debug_putc," %X",i); 
....................  
....................       EP_BDxST_I(endpoint)=i;//save changes 
2918:  MOVF   xC0,W
291A:  MULLW  08
291C:  MOVF   FF3,W
291E:  ADDLW  04
2920:  MOVWF  01
2922:  MOVLW  04
2924:  MOVWF  03
2926:  BTFSC  FD8.0
2928:  INCF   03,F
292A:  MOVFF  01,FE9
292E:  MOVFF  03,FEA
2932:  MOVFF  C4,FEF
....................  
....................       return(1); 
2936:  MOVLW  01
2938:  MOVWF  01
293A:  BRA    2942
....................    } 
....................     else { 
293C:  BRA    293E
....................          debug_usb(debug_putc,"\r\nPUT ERR"); 
....................     } 
....................    return(0); 
293E:  MOVLW  00
2940:  MOVWF  01
.................... } 
2942:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_put_packet(endpoint,*ptr,len,toggle) 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to 
.................... /*        ptr - points to data to send 
.................... /*        len - amount of data to send 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid, or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only reason it will 
.................... /*         return FALSE is if because the TX buffer is still full from the last time you 
.................... /*         tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a difference 
.................... /*          between a packet and a message.  If you wanted to send a 512 byte message you 
.................... /*          would accomplish this by sending 8 64-byte packets, followed by a 0 length packet. 
.................... /*          If the last (or only packet) being sent is less than the max packet size defined 
.................... /*          in your descriptor then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message correctly. 
.................... /* 
.................... /********************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl) { //done 
....................    int16 j; 
....................    int8 i; 
....................    int8 * buff_add;     
....................  
....................    i=EP_BDxST_I(endpoint); 
*
2A30:  MOVF   xB5,W
2A32:  MULLW  08
2A34:  MOVF   FF3,W
2A36:  ADDLW  04
2A38:  MOVWF  01
2A3A:  MOVLW  04
2A3C:  MOVWF  03
2A3E:  BTFSC  FD8.0
2A40:  INCF   03,F
2A42:  MOVFF  01,FE9
2A46:  MOVFF  03,FEA
2A4A:  MOVFF  FEF,BD
....................    if (!bit_test(i,7)) { 
2A4E:  BTFSC  xBD.7
2A50:  BRA    2AD0
....................  
....................       buff_add=EP_BDxADR_I(endpoint); 
2A52:  MOVF   xB5,W
2A54:  MULLW  08
2A56:  MOVF   FF3,W
2A58:  ADDLW  06
2A5A:  MOVWF  01
2A5C:  MOVLW  04
2A5E:  MOVWF  03
2A60:  BTFSC  FD8.0
2A62:  INCF   03,F
2A64:  MOVFF  01,FE9
2A68:  MOVFF  03,FEA
2A6C:  MOVFF  FEC,03
2A70:  MOVF   FED,F
2A72:  MOVFF  FEF,BE
2A76:  MOVFF  03,BF
....................  
....................       for (j=0;j<len;j++) { 
2A7A:  CLRF   xBC
2A7C:  CLRF   xBB
2A7E:  MOVF   xBC,W
2A80:  SUBWF  xB9,W
2A82:  BNC   2AB8
2A84:  BNZ   2A8C
2A86:  MOVF   xB8,W
2A88:  SUBWF  xBB,W
2A8A:  BC    2AB8
....................          *buff_add=*ptr; 
2A8C:  MOVFF  B6,FE9
2A90:  MOVFF  B7,FEA
2A94:  MOVFF  FEF,C2
2A98:  MOVFF  BF,FEA
2A9C:  MOVFF  BE,FE9
2AA0:  MOVFF  C2,FEF
....................          buff_add++; 
2AA4:  INCF   xBE,F
2AA6:  BTFSC  FD8.2
2AA8:  INCF   xBF,F
....................          ptr++; 
2AAA:  INCF   xB6,F
2AAC:  BTFSC  FD8.2
2AAE:  INCF   xB7,F
....................       } 
2AB0:  INCF   xBB,F
2AB2:  BTFSC  FD8.2
2AB4:  INCF   xBC,F
2AB6:  BRA    2A7E
....................  
....................       return(usb_flush_in(endpoint, len, tgl)); 
2AB8:  MOVFF  B5,C0
2ABC:  MOVFF  B9,C2
2AC0:  MOVFF  B8,C1
2AC4:  MOVFF  BA,C3
2AC8:  RCALL  2866
2ACA:  MOVF   01,W
2ACC:  BRA    2AD4
....................     } 
....................     else { 
2ACE:  BRA    2AD0
....................         debug_usb(debug_putc,"\r\nPUT ERR"); 
....................     } 
....................     return(0); 
2AD0:  MOVLW  00
2AD2:  MOVWF  01
.................... } 
2AD4:  RETLW  00
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB.C 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC) 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl) { 
....................    int8 i; 
....................    int16 len; 
....................  
....................      #if USB_IGNORE_RX_DTS 
....................       if (tgl == USB_DTS_STALL) { 
....................          debug_usb(debug_putc, '*'); 
....................          i=0x84; 
....................          EP_BDxST_I(endpoint)=0x84; 
....................          return; 
....................       } 
....................       else 
....................          i=0x80; 
....................      #else 
....................       i=EP_BDxST_O(endpoint); 
*
2780:  MOVF   xB4,W
2782:  MULLW  08
2784:  MOVFF  FF3,01
2788:  MOVLW  04
278A:  MOVFF  01,FE9
278E:  MOVWF  FEA
2790:  MOVFF  FEF,B6
....................       if (tgl == USB_DTS_TOGGLE) { 
2794:  MOVF   xB5,W
2796:  SUBLW  02
2798:  BNZ   27A6
....................          if (bit_test(i,6)) 
279A:  BTFSS  xB6.6
279C:  BRA    27A2
....................             tgl=USB_DTS_DATA0;  //was DATA1, goto DATA0 
279E:  CLRF   xB5
....................          else 
27A0:  BRA    27A6
....................             tgl=USB_DTS_DATA1;  //was DATA0, goto DATA1 
27A2:  MOVLW  01
27A4:  MOVWF  xB5
....................       } 
....................       if (tgl == USB_DTS_STALL) { 
27A6:  MOVF   xB5,W
27A8:  SUBLW  03
27AA:  BNZ   27D0
....................          i=0x84; 
27AC:  MOVLW  84
27AE:  MOVWF  xB6
....................          EP_BDxST_I(endpoint)=0x84; //stall both in and out endpoints 
27B0:  MOVF   xB4,W
27B2:  MULLW  08
27B4:  MOVF   FF3,W
27B6:  ADDLW  04
27B8:  MOVWF  01
27BA:  MOVLW  04
27BC:  MOVWF  03
27BE:  BTFSC  FD8.0
27C0:  INCF   03,F
27C2:  MOVFF  01,FE9
27C6:  MOVFF  03,FEA
27CA:  MOVLW  84
27CC:  MOVWF  FEF
....................       } 
....................       else if (tgl == USB_DTS_DATA1) { 
27CE:  BRA    27E2
27D0:  DECFSZ xB5,W
27D2:  BRA    27DA
....................          i=0xC8;  //DATA1, UOWN 
27D4:  MOVLW  C8
27D6:  MOVWF  xB6
....................       } 
....................       else if (tgl == USB_DTS_DATA0) { 
27D8:  BRA    27E2
27DA:  MOVF   xB5,F
27DC:  BNZ   27E2
....................          i=0x88; //DATA0, UOWN 
27DE:  MOVLW  88
27E0:  MOVWF  xB6
....................       } 
....................      #endif 
....................  
....................    bit_clear(__usb_kbhit_status,endpoint); 
27E2:  CLRF   03
27E4:  MOVLW  01
27E6:  MOVWF  02
27E8:  MOVF   xB4,W
27EA:  MOVWF  00
27EC:  BZ    27F8
27EE:  BCF    FD8.0
27F0:  RLCF   02,F
27F2:  RLCF   03,F
27F4:  DECFSZ 00,F
27F6:  BRA    27EE
27F8:  MOVF   02,W
27FA:  XORLW  FF
27FC:  MOVWF  00
27FE:  MOVLW  FF
2800:  XORWF  03,F
2802:  MOVF   00,W
2804:  ANDWF  1D,F
2806:  MOVF   03,W
2808:  ANDWF  1E,F
....................  
....................    len=usb_ep_rx_size[endpoint]; 
280A:  BCF    FD8.0
280C:  RLCF   xB4,W
280E:  CLRF   03
2810:  MOVFF  FF2,B9
2814:  BCF    FF2.7
2816:  CALL   1926
281A:  TBLRD*+
281C:  MOVFF  FF5,03
2820:  BTFSC  xB9.7
2822:  BSF    FF2.7
2824:  MOVWF  xB7
2826:  MOVFF  03,B8
....................    EP_BDxCNT_O(endpoint)=len; 
282A:  MOVF   xB4,W
282C:  MULLW  08
282E:  MOVF   FF3,W
2830:  ADDLW  01
2832:  MOVWF  01
2834:  MOVLW  04
2836:  MOVWF  03
2838:  BTFSC  FD8.0
283A:  INCF   03,F
283C:  MOVFF  01,FE9
2840:  MOVFF  03,FEA
2844:  MOVFF  B7,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
2848:  BTFSC  xB8.0
284A:  BSF    xB6.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
284C:  BTFSC  xB8.1
284E:  BSF    xB6.1
....................  
....................  
....................    EP_BDxST_O(endpoint)=i; 
2850:  MOVF   xB4,W
2852:  MULLW  08
2854:  MOVFF  FF3,01
2858:  MOVLW  04
285A:  MOVFF  01,FE9
285E:  MOVWF  FEA
2860:  MOVFF  B6,FEF
.................... } 
2864:  RETLW  00
....................  
.................... int16 usb_rx_packet_size(int8 endpoint) { 
....................    return(EP_BDxCNT_O(endpoint)); 
*
29A0:  MOVF   xB5,W
29A2:  MULLW  08
29A4:  MOVF   FF3,W
29A6:  ADDLW  01
29A8:  MOVWF  01
29AA:  MOVLW  04
29AC:  MOVWF  03
29AE:  BTFSC  FD8.0
29B0:  INCF   03,F
29B2:  MOVFF  01,FE9
29B6:  MOVFF  03,FEA
29BA:  CLRF   03
29BC:  MOVFF  FEF,01
29C0:  MOVFF  03,02
.................... } 
29C4:  GOTO   29D2 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /********************************************************************************/ 
.................... int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max) { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al=EP_BDxADR_O(endpoint); 
....................    i=EP_BDxCNT_O(endpoint); 
....................    st=EP_BDxST_O(endpoint); 
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
....................    if (bit_test(st,1)) {bit_set(i,9);} 
....................  
....................    if (i<max) {max=i;} 
....................  
....................    i=0; 
....................  
....................    while (i<max) { 
....................        *ptr=*al; 
....................        ptr++; 
....................        al++; 
....................        i++; 
....................    } 
....................  
....................    return(max); 
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC RAM. 
.................... /*          Until you call usb_get_packet() the data will sit in the endpoint 
.................... /*          buffer and the PC will get NAKs when it tries to write more data 
.................... /*          to the endpoint. 
.................... /* 
.................... /********************************************************************************/ 
.................... int16 usb_get_packet(int8 endpoint, int8 * ptr, int16 max) { 
....................  
....................    max=usb_get_packet_buffer(endpoint,ptr,max); 
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
....................  
....................    return(max); 
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /********************************************************************************/ 
.................... int8 usb_tbe(int8 endpoint) { 
....................    int8 st; 
....................    st=EP_BDxST_I(endpoint); 
....................    if (!bit_test(st,7)) 
....................       return(TRUE); 
....................    return(FALSE); 
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_stall_ep(endpoint,direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will send STALL packet 
.................... /*          if the host tries to access this endpoint's buffer. 
.................... /* 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK THIS 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint) {  //done 
....................    int1 direction; 
....................    direction=bit_test(endpoint,7); 
*
25B6:  BCF    xB5.0
25B8:  BTFSC  xB4.7
25BA:  BSF    xB5.0
....................    endpoint&=0x7F; 
25BC:  BCF    xB4.7
....................    if (direction) { 
25BE:  BTFSS  xB5.0
25C0:  BRA    25E2
....................       EP_BDxST_I(endpoint)=0x84; 
25C2:  MOVF   xB4,W
25C4:  MULLW  08
25C6:  MOVF   FF3,W
25C8:  ADDLW  04
25CA:  MOVWF  01
25CC:  MOVLW  04
25CE:  MOVWF  03
25D0:  BTFSC  FD8.0
25D2:  INCF   03,F
25D4:  MOVFF  01,FE9
25D8:  MOVFF  03,FEA
25DC:  MOVLW  84
25DE:  MOVWF  FEF
....................    } 
....................    else { 
25E0:  BRA    25F6
....................       EP_BDxST_O(endpoint)=0x84; 
25E2:  MOVF   xB4,W
25E4:  MULLW  08
25E6:  MOVFF  FF3,01
25EA:  MOVLW  04
25EC:  MOVFF  01,FE9
25F0:  MOVWF  FEA
25F2:  MOVLW  84
25F4:  MOVWF  FEF
....................    } 
.................... } 
25F6:  GOTO   267E (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK THIS 
.................... /********************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint) {   //done 
....................    int1 direction; 
....................    direction=bit_test(endpoint,7); 
*
2574:  BCF    xB5.0
2576:  BTFSC  xB4.7
2578:  BSF    xB5.0
....................    endpoint&=0x7F; 
257A:  BCF    xB4.7
....................    if (direction) { 
257C:  BTFSS  xB5.0
257E:  BRA    25A0
....................       #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint)=0x80; 
....................       #else 
....................       EP_BDxST_I(endpoint)=0x88; 
2580:  MOVF   xB4,W
2582:  MULLW  08
2584:  MOVF   FF3,W
2586:  ADDLW  04
2588:  MOVWF  01
258A:  MOVLW  04
258C:  MOVWF  03
258E:  BTFSC  FD8.0
2590:  INCF   03,F
2592:  MOVFF  01,FE9
2596:  MOVFF  03,FEA
259A:  MOVLW  88
259C:  MOVWF  FEF
....................       #endif 
....................    } 
....................    else { 
259E:  BRA    25B2
....................       EP_BDxST_O(endpoint)=0x00; 
25A0:  MOVF   xB4,W
25A2:  MULLW  08
25A4:  MOVFF  FF3,01
25A8:  MOVLW  04
25AA:  MOVFF  01,FE9
25AE:  MOVWF  FEA
25B0:  CLRF   FEF
....................    } 
.................... } 
25B2:  GOTO   2672 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_endpoint_stalled(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and Clear_Feature 
.................... /*          Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK THIS 
.................... /********************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint) {   //done 
....................    int1 direction; 
....................    int8 st; 
....................    direction=bit_test(endpoint,7); 
*
25FA:  BCF    xB5.0
25FC:  BTFSC  xB4.7
25FE:  BSF    xB5.0
....................    endpoint&=0x7F; 
2600:  BCF    xB4.7
....................    if (direction) { 
2602:  BTFSS  xB5.0
2604:  BRA    2626
....................       st=EP_BDxST_I(endpoint); 
2606:  MOVF   xB4,W
2608:  MULLW  08
260A:  MOVF   FF3,W
260C:  ADDLW  04
260E:  MOVWF  01
2610:  MOVLW  04
2612:  MOVWF  03
2614:  BTFSC  FD8.0
2616:  INCF   03,F
2618:  MOVFF  01,FE9
261C:  MOVFF  03,FEA
2620:  MOVFF  FEF,B6
....................    } 
....................    else { 
2624:  BRA    263A
....................       st=EP_BDxST_O(endpoint); 
2626:  MOVF   xB4,W
2628:  MULLW  08
262A:  MOVFF  FF3,01
262E:  MOVLW  04
2630:  MOVFF  01,FE9
2634:  MOVWF  FEA
2636:  MOVFF  FEF,B6
....................    } 
....................    return(bit_test(st,7) && bit_test(st,2)); 
263A:  BTFSS  xB6.7
263C:  BRA    2642
263E:  BTFSC  xB6.2
2640:  BRA    2646
2642:  MOVLW  00
2644:  BRA    2648
2646:  MOVLW  01
2648:  MOVWF  01
.................... } 
264A:  GOTO   2692 (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.  The host 
.................... /*          will now talk to use with the following address. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_set_address(int8 address) {   //done 
....................    UADDR=address; 
*
2A0C:  MOVFF  B5,F6E
....................    if (address) { 
2A10:  MOVF   xB5,F
2A12:  BZ    2A1A
....................       usb_state=USB_STATE_ADDRESS; 
2A14:  MOVLW  04
2A16:  MOVWF  1F
....................    } 
....................    else { 
2A18:  BRA    2A1E
....................       usb_state=USB_STATE_POWERED; 
2A1A:  MOVLW  02
2A1C:  MOVWF  1F
....................    } 
.................... } 
2A1E:  GOTO   2A2C (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_set_configured(config) 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_set_configured(int config) { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................       if (config==0) { 
*
224A:  MOVF   xB4,F
224C:  BNZ   2256
....................          //if config=0 then set addressed state 
....................          usb_state=USB_STATE_ADDRESS; 
224E:  MOVLW  04
2250:  MOVWF  1F
....................          usb_disable_endpoints(); 
2252:  RCALL  20AE
....................       } 
....................       else { 
2254:  BRA    23E4
....................          usb_state=USB_STATE_CONFIGURED; //else set configed state 
2256:  MOVLW  05
2258:  MOVWF  1F
....................          addy=(int16)USB_BUFFER+(2*USB_MAX_EP0_PACKET_LENGTH); 
225A:  MOVWF  xB7
225C:  MOVLW  80
225E:  MOVWF  xB6
....................          for (en=1;en<16;en++) { 
2260:  MOVLW  01
2262:  MOVWF  xB5
2264:  MOVF   xB5,W
2266:  SUBLW  0F
2268:  BTFSS  FD8.0
226A:  BRA    23E4
....................             new_uep=0; 
226C:  CLRF   xB8
....................             if (usb_ep_rx_type[en]!=USB_ENABLE_DISABLED) { 
226E:  CLRF   03
2270:  MOVF   xB5,W
2272:  MOVFF  FF2,BC
2276:  BCF    FF2.7
2278:  CALL   18D6
227C:  BTFSC  xBC.7
227E:  BSF    FF2.7
2280:  XORLW  00
2282:  BZ    232A
....................                new_uep=0x04; 
2284:  MOVLW  04
2286:  MOVWF  xB8
....................                len=usb_ep_rx_size[en]; 
2288:  BCF    FD8.0
228A:  RLCF   xB5,W
228C:  CLRF   03
228E:  MOVFF  FF2,BC
2292:  BCF    FF2.7
2294:  CALL   1926
2298:  TBLRD*+
229A:  MOVFF  FF5,03
229E:  BTFSC  xBC.7
22A0:  BSF    FF2.7
22A2:  MOVWF  xB9
22A4:  MOVFF  03,BA
....................                EP_BDxCNT_O(en)=len; 
22A8:  MOVF   xB5,W
22AA:  MULLW  08
22AC:  MOVF   FF3,W
22AE:  ADDLW  01
22B0:  MOVWF  01
22B2:  MOVLW  04
22B4:  MOVWF  03
22B6:  BTFSC  FD8.0
22B8:  INCF   03,F
22BA:  MOVFF  01,FE9
22BE:  MOVFF  03,FEA
22C2:  MOVFF  B9,FEF
....................                EP_BDxADR_O(en)=addy; 
22C6:  MOVF   xB5,W
22C8:  MULLW  08
22CA:  MOVF   FF3,W
22CC:  ADDLW  02
22CE:  MOVWF  01
22D0:  MOVLW  04
22D2:  MOVWF  03
22D4:  BTFSC  FD8.0
22D6:  INCF   03,F
22D8:  MOVFF  01,FE9
22DC:  MOVFF  03,FEA
22E0:  MOVFF  B7,FEC
22E4:  MOVF   FED,F
22E6:  MOVFF  B6,FEF
....................                addy+=usb_ep_rx_size[en]; 
22EA:  BCF    FD8.0
22EC:  RLCF   xB5,W
22EE:  CLRF   03
22F0:  MOVFF  FF2,BC
22F4:  BCF    FF2.7
22F6:  CALL   1926
22FA:  TBLRD*+
22FC:  MOVFF  FF5,03
2300:  BTFSC  xBC.7
2302:  BSF    FF2.7
2304:  ADDWF  xB6,F
2306:  MOVF   03,W
2308:  ADDWFC xB7,F
....................                #if USB_IGNORE_RX_DTS 
....................                   i=0x80; 
....................                #else 
....................                   i=0x88; 
230A:  MOVLW  88
230C:  MOVWF  xBB
....................                #endif 
....................                if (bit_test(len,8)) {bit_set(i,0);} 
230E:  BTFSC  xBA.0
2310:  BSF    xBB.0
....................                if (bit_test(len,9)) {bit_set(i,1);} 
2312:  BTFSC  xBA.1
2314:  BSF    xBB.1
....................                EP_BDxST_O(en)=i; 
2316:  MOVF   xB5,W
2318:  MULLW  08
231A:  MOVFF  FF3,01
231E:  MOVLW  04
2320:  MOVFF  01,FE9
2324:  MOVWF  FEA
2326:  MOVFF  BB,FEF
....................             } 
....................             if (usb_ep_tx_type[en]!=USB_ENABLE_DISABLED) { 
232A:  CLRF   03
232C:  MOVF   xB5,W
232E:  MOVFF  FF2,BC
2332:  BCF    FF2.7
2334:  CALL   18B6
2338:  BTFSC  xBC.7
233A:  BSF    FF2.7
233C:  XORLW  00
233E:  BZ    23A4
....................                new_uep|=0x02; 
2340:  BSF    xB8.1
....................                EP_BDxADR_I(en)=addy; 
2342:  MOVF   xB5,W
2344:  MULLW  08
2346:  MOVF   FF3,W
2348:  ADDLW  06
234A:  MOVWF  01
234C:  MOVLW  04
234E:  MOVWF  03
2350:  BTFSC  FD8.0
2352:  INCF   03,F
2354:  MOVFF  01,FE9
2358:  MOVFF  03,FEA
235C:  MOVFF  B7,FEC
2360:  MOVF   FED,F
2362:  MOVFF  B6,FEF
....................                addy+=usb_ep_tx_size[en]; 
2366:  BCF    FD8.0
2368:  RLCF   xB5,W
236A:  CLRF   03
236C:  MOVFF  FF2,BC
2370:  BCF    FF2.7
2372:  CALL   18F6
2376:  TBLRD*+
2378:  MOVFF  FF5,03
237C:  BTFSC  xBC.7
237E:  BSF    FF2.7
2380:  ADDWF  xB6,F
2382:  MOVF   03,W
2384:  ADDWFC xB7,F
....................                EP_BDxST_I(en)=0x40; 
2386:  MOVF   xB5,W
2388:  MULLW  08
238A:  MOVF   FF3,W
238C:  ADDLW  04
238E:  MOVWF  01
2390:  MOVLW  04
2392:  MOVWF  03
2394:  BTFSC  FD8.0
2396:  INCF   03,F
2398:  MOVFF  01,FE9
239C:  MOVFF  03,FEA
23A0:  MOVLW  40
23A2:  MOVWF  FEF
....................             } 
....................             if (new_uep==0x06) {new_uep=0x0E;} 
23A4:  MOVF   xB8,W
23A6:  SUBLW  06
23A8:  BNZ   23AE
23AA:  MOVLW  0E
23AC:  MOVWF  xB8
....................             if (usb_ep_tx_type[en]!=USB_ENABLE_ISOCHRONOUS) { 
23AE:  CLRF   03
23B0:  MOVF   xB5,W
23B2:  MOVFF  FF2,BC
23B6:  BCF    FF2.7
23B8:  CALL   18B6
23BC:  BTFSC  xBC.7
23BE:  BSF    FF2.7
23C0:  SUBLW  02
23C2:  BZ    23C6
....................                new_uep|=0x10; 
23C4:  BSF    xB8.4
....................             } 
....................             UEP(en)=new_uep; 
23C6:  MOVLW  70
23C8:  ADDWF  xB5,W
23CA:  MOVWF  01
23CC:  MOVLW  0F
23CE:  MOVWF  03
23D0:  BTFSC  FD8.0
23D2:  INCF   03,F
23D4:  MOVFF  01,FE9
23D8:  MOVFF  03,FEA
23DC:  MOVFF  B8,FEF
....................          } 
23E0:  INCF   xB5,F
23E2:  BRA    2264
....................       } 
.................... } 
23E4:  GOTO   247A (RETURN)
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... /******************************************************************************* 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt method), 
.................... /*       then you must call this function rapidly.  If there is more than 10ms 
.................... /*       latency the PC may think the USB device is stalled and disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this fuction. 
.................... /*       Also, goto usb_init() and remove the code that enables the USB interrupt. 
.................... /********************************************************************************/ 
.................... #int_usb 
.................... void usb_isr() { 
....................    if (usb_state==USB_STATE_DETACHED) return;   //should never happen, though 
*
2BF0:  MOVF   1F,F
2BF2:  BNZ   2BF6
2BF4:  BRA    2C54
....................    if (UIR) { 
2BF6:  MOVF   F68,F
2BF8:  BZ    2C54
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();}  //activity detected.  (only enable after sleep) 
2BFA:  BTFSS  F68.2
2BFC:  BRA    2C06
2BFE:  BTFSS  F69.2
2C00:  BRA    2C06
2C02:  GOTO   2050
....................  
....................       if (UCON_SUSPND) return; 
2C06:  BTFSS  F6D.1
2C08:  BRA    2C0C
2C0A:  BRA    2C54
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
2C0C:  BTFSS  F68.1
2C0E:  BRA    2C18
2C10:  BTFSS  F69.1
2C12:  BRA    2C18
2C14:  GOTO   205A
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
2C18:  BTFSS  F68.0
2C1A:  BRA    2C24
2C1C:  BTFSS  F69.0
2C1E:  BRA    2C24
2C20:  GOTO   20F8
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
2C24:  BTFSS  F68.4
2C26:  BRA    2C30
2C28:  BTFSS  F69.4
2C2A:  BRA    2C30
2C2C:  GOTO   2122
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
2C30:  BTFSS  F68.6
2C32:  BRA    2C3C
2C34:  BTFSS  F69.6
2C36:  BRA    2C3C
2C38:  GOTO   212C
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
2C3C:  BTFSS  F68.5
2C3E:  BRA    2C48
2C40:  BTFSS  F69.5
2C42:  BRA    2C48
2C44:  GOTO   2132
....................  
....................       if (UIR_TRN && UIE_TRN) { 
2C48:  BTFSS  F68.3
2C4A:  BRA    2C54
2C4C:  BTFSS  F69.3
2C4E:  BRA    2C54
....................          usb_isr_tok_dne(); 
2C50:  BRA    2B26
....................          UIR_TRN=0;    // clear the token done interrupt., 0x190.3 
2C52:  BCF    F68.3
....................       }    //a token has been detected (majority of isrs) 
....................    } 
.................... } 
....................  
.................... //SOF interrupt not handled.  user must add this depending on application 
2C54:  BCF    FA1.5
2C56:  GOTO   1870
.................... void usb_isr_sof(void) { 
....................    debug_usb(debug_putc,"\r\nSOF"); 
....................    UIR_SOF=0; 
*
212C:  BCF    F68.6
.................... } 
212E:  GOTO   2C3C (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints 1 thru 15 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoints(void) { 
....................    int8 i; 
....................    for (i=1;i<16;i++) { 
*
20AE:  MOVLW  01
20B0:  MOVWF  xBC
20B2:  MOVF   xBC,W
20B4:  SUBLW  0F
20B6:  BNC   20D4
....................       UEP(i)=ENDPT_DISABLED; 
20B8:  MOVLW  70
20BA:  ADDWF  xBC,W
20BC:  MOVWF  01
20BE:  MOVLW  0F
20C0:  MOVWF  03
20C2:  BTFSC  FD8.0
20C4:  INCF   03,F
20C6:  MOVFF  01,FE9
20CA:  MOVFF  03,FEA
20CE:  CLRF   FEF
....................    } 
20D0:  INCF   xBC,F
20D2:  BRA    20B2
....................    __usb_kbhit_status=0; 
20D4:  CLRF   1E
20D6:  CLRF   1D
.................... } 
20D8:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_rst() { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR=0; 
*
20F8:  CLRF   F6A
....................    UIR=0; 
20FA:  CLRF   F68
....................    UEIE=0x9F; 
20FC:  MOVLW  9F
20FE:  MOVWF  F6B
....................    UIE=STANDARD_INTS & ~__USB_UIF_ACTIVE; 
2100:  MOVLW  39
2102:  MOVWF  F69
....................  
....................    UADDR=0; 
2104:  CLRF   F6E
....................  
....................    usb_token_reset(); 
2106:  RCALL  2086
....................  
....................    usb_disable_endpoints(); 
2108:  RCALL  20AE
....................  
....................    UEP(0)=ENDPT_CONTROL | 0x10; 
210A:  MOVLW  16
210C:  MOVWF  F70
....................  
....................    while (UIR_TRN) { 
210E:  BTFSS  F68.3
2110:  BRA    2116
....................       UIR_TRN=0;    //do this to clear out the ustat fifo 
2112:  BCF    F68.3
....................    } 
2114:  BRA    210E
....................  
....................    UCON_PKTDIS=0; //SIE token and packet processing enabled 
2116:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
2118:  RCALL  20DA
....................  
....................    usb_state=USB_STATE_DEFAULT; //put usb mcu into default state 
211A:  MOVLW  03
211C:  MOVWF  1F
.................... } 
211E:  GOTO   2C24 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void) { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
20DA:  MOVLW  40
20DC:  MOVLB  4
20DE:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_BUFFER; 
20E0:  MOVLW  05
20E2:  MOVWF  x03
20E4:  CLRF   x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
20E6:  MOVLW  88
20E8:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
20EA:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_BUFFER + (int16)USB_MAX_EP0_PACKET_LENGTH; 
20EC:  MOVLW  05
20EE:  MOVWF  x07
20F0:  MOVLW  40
20F2:  MOVWF  x06
.................... } 
20F4:  MOVLB  0
20F6:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr() { 
.................... #if USB_USE_ERROR_COUNTER 
....................    int ints; 
.................... #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) ) { //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) ) {  //increment crc5 error counter 
....................       debug_usbdebug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) ) {  //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) ) {  //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) ) {  //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) ) { //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
.................... #endif 
....................  
....................    UEIR=0; 
*
205A:  CLRF   F6A
....................    UIR_UERR=0; 
205C:  BCF    F68.1
.................... } 
205E:  GOTO   2C18 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_uidle() { 
....................    debug_usb(debug_putc,"I"); 
....................  
....................    UIE_ACTV=1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
2122:  BSF    F69.2
....................    UIR_IDLE=0; //clear idle interrupt flag 
2124:  BCF    F68.4
....................    UCON_SUSPND=1; //set suspend. we are now suspended 
2126:  BSF    F6D.1
.................... } 
2128:  GOTO   2C30 (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_activity() { 
....................    debug_usb(debug_putc,"A"); 
....................  
....................    UCON_SUSPND=0; //turn off low power suspending 
*
2050:  BCF    F6D.1
....................    UIE_ACTV=0; //clear activity interupt enabling 
2052:  BCF    F69.2
....................    UIR_ACTV=0; 
2054:  BCF    F68.2
.................... } 
2056:  GOTO   2C06 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_stall(void) { 
....................    debug_usb(debug_putc,"S"); 
....................  
....................    if (bit_test(UEP(0),0)) { 
*
2132:  BTFSS  F70.0
2134:  BRA    213A
....................       usb_init_ep0_setup(); 
2136:  RCALL  20DA
....................       bit_clear(UEP(0),0); 
2138:  BCF    F70.0
....................    } 
....................    UIR_STALL=0; 
213A:  BCF    F68.5
.................... } 
213C:  GOTO   2C48 (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_tok_dne() { 
....................    int8 en; 
....................  
....................    en=USTAT>>3; 
*
2B26:  RRCF   F6C,W
2B28:  MOVWF  xB3
2B2A:  RRCF   xB3,F
2B2C:  RRCF   xB3,F
2B2E:  MOVLW  1F
2B30:  ANDWF  xB3,F
....................  
....................          debug_usb(debug_putc,"T "); 
....................          debug_usb(debug_putc,"%X ", USTAT); 
....................  
....................       if (USTAT==USTAT_OUT_SETUP_E0) {   //new out or setup token in the buffer 
2B32:  MOVF   F6C,F
2B34:  BNZ   2BAC
....................          debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................          if ((EP_BDxST_O(0) & 0x3C)==USB_PIC_PID_SETUP) { 
2B36:  MOVLB  4
2B38:  MOVF   x00,W
2B3A:  ANDLW  3C
2B3C:  SUBLW  34
2B3E:  BNZ   2B76
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
2B40:  CLRF   x04
....................  
....................             debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................             debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................             usb_isr_tok_setup_dne(); 
2B42:  MOVLB  0
2B44:  BRA    2756
....................  
....................             //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) 
....................             //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone 
....................             //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit 
....................             if (__setup_0_tx_size==0xFF) 
2B46:  INCFSZ 20,W
2B48:  BRA    2B54
....................                usb_flush_out(0,USB_DTS_STALL); 
2B4A:  CLRF   xB4
2B4C:  MOVLW  03
2B4E:  MOVWF  xB5
2B50:  RCALL  2780
....................             else { 
2B52:  BRA    2B70
....................                usb_flush_out(0,USB_DTS_TOGGLE); 
2B54:  CLRF   xB4
2B56:  MOVLW  02
2B58:  MOVWF  xB5
2B5A:  RCALL  2780
....................                if (__setup_0_tx_size!=0xFE) { 
2B5C:  MOVF   20,W
2B5E:  SUBLW  FE
2B60:  BZ    2B70
....................                   usb_flush_in(0,__setup_0_tx_size,USB_DTS_USERX); 
2B62:  CLRF   xC0
2B64:  CLRF   xC2
2B66:  MOVFF  20,C1
2B6A:  MOVLW  04
2B6C:  MOVWF  xC3
2B6E:  RCALL  2866
....................                } 
....................             } 
....................             UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
2B70:  BCF    F6D.4
....................          } 
....................          else if ((EP_BDxST_O(0) & 0x3C)==USB_PIC_PID_OUT) { 
2B72:  BRA    2BA6
2B74:  MOVLB  4
2B76:  MOVF   x00,W
2B78:  ANDLW  3C
2B7A:  SUBLW  04
2B7C:  BNZ   2BA8
....................             usb_isr_tok_out_dne(0); 
2B7E:  MOVLB  0
2B80:  CLRF   xB4
2B82:  RCALL  29DA
....................             usb_flush_out(0,USB_DTS_TOGGLE); 
2B84:  CLRF   xB4
2B86:  MOVLW  02
2B88:  MOVWF  xB5
2B8A:  RCALL  2780
....................             if ((__setup_0_tx_size!=0xFE)&&(__setup_0_tx_size!=0xFF)) { 
2B8C:  MOVF   20,W
2B8E:  SUBLW  FE
2B90:  BZ    2BA6
2B92:  INCFSZ 20,W
2B94:  BRA    2B98
2B96:  BRA    2BA6
....................                usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
2B98:  CLRF   xC0
2B9A:  CLRF   xC2
2B9C:  MOVFF  20,C1
2BA0:  MOVLW  01
2BA2:  MOVWF  xC3
2BA4:  RCALL  2866
2BA6:  MOVLB  4
....................             } 
....................          } 
....................       } 
....................  
....................       else if (USTAT==USTAT_IN_E0) {   //pic -> host transfer completed 
2BA8:  BRA    2BEA
2BAA:  MOVLB  0
2BAC:  MOVF   F6C,W
2BAE:  SUBLW  04
2BB0:  BNZ   2BD6
....................          __setup_0_tx_size=0xFF; 
2BB2:  MOVLW  FF
2BB4:  MOVWF  20
....................          usb_isr_tok_in_dne(0); 
2BB6:  CLRF   xB4
2BB8:  RCALL  2B04
....................          if (__setup_0_tx_size!=0xFF) 
2BBA:  INCFSZ 20,W
2BBC:  BRA    2BC0
2BBE:  BRA    2BD0
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_TOGGLE); 
2BC0:  CLRF   xC0
2BC2:  CLRF   xC2
2BC4:  MOVFF  20,C1
2BC8:  MOVLW  02
2BCA:  MOVWF  xC3
2BCC:  RCALL  2866
....................          else 
2BCE:  BRA    2BD4
....................             usb_init_ep0_setup(); 
2BD0:  CALL   20DA
....................       } 
....................  
....................       else { 
2BD4:  BRA    2BE8
....................          if (!bit_test(USTAT,2)) { 
2BD6:  BTFSC  F6C.2
2BD8:  BRA    2BE2
....................             usb_isr_tok_out_dne(en); 
2BDA:  MOVFF  B3,B4
2BDE:  RCALL  29DA
....................          } 
....................          else { 
2BE0:  BRA    2BE8
....................             usb_isr_tok_in_dne(en); 
2BE2:  MOVFF  B3,B4
2BE6:  RCALL  2B04
2BE8:  MOVLB  4
....................          } 
....................       } 
.................... } 
2BEA:  MOVLB  0
2BEC:  GOTO   2C52 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(int len) { 
....................    __setup_0_tx_size=len; 
*
2140:  MOVFF  B7,20
.................... } 
2144:  RETLW  00
....................  
.................... void usb_request_get_data(void) { 
....................    __setup_0_tx_size=0xFE; 
*
26AE:  MOVLW  FE
26B0:  MOVWF  20
.................... } 
26B2:  RETLW  00
....................  
.................... void usb_request_stall(void) { 
....................    __setup_0_tx_size=0xFF; 
*
2146:  MOVLW  FF
2148:  MOVWF  20
.................... } 
214A:  RETLW  00
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
....................  #endif 
.................... #else 
....................  #include <usbn960x.c>   //National 960x hardware layer for usb.c 
.................... #endif 
.................... #include "..\lib\bootloader\usb_desc_cdc.h"   //USB Configuration and Device descriptors for this UBS device 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_desc_cdc.h                            //// 
.................... ////                                                                   //// 
.................... //// An example set of device / configuration descriptors for use with //// 
.................... //// CCS's CDC Virtual COM Port driver (see usb_cdc.h)                 //// 
.................... ////                                                                   //// 
.................... //// Two examples are provided:                                        //// 
.................... ////      ex_usb_serial.c                                              //// 
.................... ////      ex_usb_serial2.c                                             //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// 10/28/05:                                                         //// 
.................... ////    Bulk endpoint sizes updated to allow more than 255 byte        //// 
.................... ////    packets.                                                       //// 
.................... ////    Changed device to USB 1.10                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... ////                   **** DEFINITIONS *****                          //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (FALSE) - Set to TRUE if your device supports        //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            Only the 18Fxx5x USB peripheral can    //// 
.................... ////                            have a value larger than 8.            //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE  //set to false to opt for less RAM, true to opt for less ROM 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     0 
.................... #define USB_ENABLE_BULK         0x01 
.................... #define USB_ENABLE_ISOCHRONOUS  0x02 
.................... #define USB_ENABLE_INTERRUPT    0x03 
.................... #define USB_ENABLE_CONTROL      0x04 
....................  
.................... //// DO NOT CHANGE THE FOLLOWING VALUES: 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #else 
.................... struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #endif 
....................  
.................... int16 __usb_kbhit_status; 
....................  
.................... /// *** User function prototypes 
.................... void usb_wait_for_enumeration(void); 
.................... int1 usb_unermated(void); 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout); 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout); 
....................  
.................... /// *** Token and request hanlder function prototypes 
.................... void usb_token_reset(); 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_request_send_response(int len);   //always sends usb_ep0_rx_buffer[] to endpoint 0 with a toggle of DATA 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tok_in_dne(int8 endpoint); 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
....................  
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
....................  
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
....................  
.................... void usb_finish_set_address(void); 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start config descriptor 
.................... ///   right now we only support one configuration descriptor. 
.................... ///   the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
....................    #DEFINE USB_TOTAL_CONFIG_LEN      67  //config+interface+class+endpoint+endpoint (2 endpoints) 
....................  
....................    const char USB_CONFIG_DESC[] = { 
....................    //IN ORDER TO COMPLY WITH WINDOWS HOSTS, THE ORDER OF THIS ARRAY MUST BE: 
....................       //    config(s) 
....................       //    interface(s) 
....................       //    class(es) 
....................       //    endpoint(s) 
....................  
....................    //config_descriptor for config index 1 
....................          USB_DESC_CONFIG_LEN, //length of descriptor size          ==0 
....................          USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (CONFIGURATION 0x02)     ==1 
....................          USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config      ==2,3 
....................          2, //number of interfaces this device supports       ==4 
....................          0x01, //identifier for this configuration.  (IF we had more than one configurations)      ==5 
....................          0x00, //index of string descriptor for this configuration      ==6 
....................          0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 unused and bit7=1         ==7 
....................          0x32, //maximum bus power required (maximum milliamperes/2)  (0x32 = 100mA)  ==8 
....................  
....................    //interface descriptor 0 (comm class interface) 
....................          USB_DESC_INTERFACE_LEN, //length of descriptor      =9 
....................          USB_DESC_INTERFACE_TYPE, //constant INTERFACE (INTERFACE 0x04)       =10 
....................          0x00, //number defining this interface (IF we had more than one interface)    ==11 
....................          0x00, //alternate setting     ==12 
....................          1, //number of endpoints   ==13 
....................          0x02, //class code, 02 = Comm Interface Class     ==14 
....................          0x02, //subclass code, 2 = Abstract     ==15 
....................          0x01, //protocol code, 1 = v.25ter      ==16 
....................          0x00, //index of string descriptor for interface      ==17 
....................  
....................    //class descriptor [functional header] 
....................          5, //length of descriptor    ==18 
....................          0x24, //dscriptor type (0x24 == )      ==19 
....................          0, //sub type (0=functional header) ==20 
....................          0x10,0x01, //      ==21,22 //cdc version 
....................  
....................    //class descriptor [acm header] 
....................          4, //length of descriptor    ==23 
....................          0x24, //dscriptor type (0x24 == )      ==24 
....................          2, //sub type (2=ACM)   ==25 
....................          2, //capabilities    ==26  //we support Set_Line_Coding, Set_Control_Line_State, Get_Line_Coding, and the notification Serial_State. 
....................  
....................    //class descriptor [union header] 
....................          5, //length of descriptor    ==27 
....................          0x24, //dscriptor type (0x24 == )      ==28 
....................          6, //sub type (6=union)    ==29 
....................          0, //master intf     ==30  //The interface number of the Communication or Dat a Cl ass interface, designated as the masteror controlling interface for the union. 
....................          1, //save intf0      ==31  //Interface number of first slave or associated interface in the union. * 
....................  
....................    //class descriptor [call mgmt header] 
....................          5, //length of descriptor    ==32 
....................          0x24, //dscriptor type (0x24 == )      ==33 
....................          1, //sub type (1=call mgmt)   ==34 
....................          0, //capabilities          ==35  //device does not handle call management itself 
....................          1, //data interface        ==36  //interface number of data class interface 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==37 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==38 
....................          USB_CDC_COMM_IN_ENDPOINT | 0x80, //endpoint number and direction 
....................          0x03, //transfer type supported (0x03 is interrupt)         ==40 
....................          USB_CDC_COMM_IN_SIZE,0x00, //maximum packet size supported                  ==41,42 
....................          250,  //polling interval, in ms.  (cant be smaller than 10)      ==43 
....................  
....................    //interface descriptor 1 (data class interface) 
....................          USB_DESC_INTERFACE_LEN, //length of descriptor      =44 
....................          USB_DESC_INTERFACE_TYPE, //constant INTERFACE (INTERFACE 0x04)       =45 
....................          0x01, //number defining this interface (IF we had more than one interface)    ==46 
....................          0x00, //alternate setting     ==47 
....................          2, //number of endpoints   ==48 
....................          0x0A, //class code, 0A = Data Interface Class     ==49 
....................          0x00, //subclass code      ==50 
....................          0x00, //protocol code      ==51 
....................          0x00, //index of string descriptor for interface      ==52 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==60 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==61 
....................          USB_CDC_DATA_OUT_ENDPOINT, //endpoint number and direction (0x02 = EP2 OUT)       ==62 
....................          0x02, //transfer type supported (0x02 is bulk)         ==63 
.................... //         make8(USB_CDC_DATA_OUT_SIZE,0),make8(USB_CDC_DATA_OUT_SIZE,1), //maximum packet size supported                  ==64, 65 
....................          USB_CDC_DATA_OUT_SIZE & 0xFF, (USB_CDC_DATA_OUT_SIZE >> 8) & 0xFF, //maximum packet size supported                  ==64, 65 
....................          250,  //polling interval, in ms.  (cant be smaller than 10)      ==66 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==53 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==54 
....................          USB_CDC_DATA_IN_ENDPOINT | 0x80, //endpoint number and direction (0x82 = EP2 IN)       ==55 
....................          0x02, //transfer type supported (0x02 is bulk)         ==56 
.................... //         make8(USB_CDC_DATA_IN_SIZE,0),make8(USB_CDC_DATA_IN_SIZE,1), //maximum packet size supported                  ==57, 58 
....................          USB_CDC_DATA_IN_SIZE & 0xFF, (USB_CDC_DATA_IN_SIZE >> 8) & 0xFF, //maximum packet size supported                  ==64, 65 
....................          250,  //polling interval, in ms.  (cant be smaller than 10)      ==59 
....................    }; 
....................  
....................    //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
....................    //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
....................    //  a specific descriptor in the above table. 
....................  
....................    //the maximum number of interfaces seen on any config 
....................    //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
....................    #define USB_MAX_NUM_INTERFACES   2 
....................  
....................    //define how many interfaces there are per config.  [0] is the first config, etc. 
....................    const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={2}; 
....................  
....................    //define where to find class descriptors 
....................    //first dimension is the config number 
....................    //second dimension specifies which interface 
....................    //last dimension specifies which class in this interface to get, but most will only have 1 class per interface 
....................    //if a class descriptor is not valid, set the value to 0xFFFF 
....................    const int16 USB_CLASS_DESCRIPTORS[USB_NUM_CONFIGURATIONS][USB_MAX_NUM_INTERFACES][4]= 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          //class 1-4 
....................          18,23,27,32, 
....................       //interface 1 
....................          //no classes for this interface 
....................          0xFFFF,0xFFFF,0xFFFF,0xFFFF 
....................    }; 
....................  
....................    #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
....................       #error USB_TOTAL_CONFIG_LEN not defined correctly 
....................    #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
....................    const char USB_DEVICE_DESC[USB_DESC_DEVICE_LEN] ={ 
....................       //starts of with device configuration. only one possible 
....................          USB_DESC_DEVICE_LEN, //the length of this report   ==0 
....................          0x01, //the constant DEVICE (DEVICE 0x01)  ==1 
....................          0x10,0x01, //usb version in bcd  ==2,3 
....................          0x02, //class code. 0x02=Communication Device Class ==4 
....................          0x00, //subclass code ==5 
....................          0x00, //protocol code ==6 
....................          USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) ==7 
....................          0xD8,0x04, //vendor id (0x04D8 is Microchip, or is it 0x0461 ??) ==8,9 
....................          0x01,0x00, //product id ==10,11 
....................          0x00,0x01, //device release number  ==12,13 
....................          0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below)  ==14 
....................          0x02, //index of string descriptor of the product  ==15 
....................          0x00, //index of string descriptor of serial number  ==16 
....................          USB_NUM_CONFIGURATIONS  //number of possible configurations  ==17 
....................    }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start string descriptors 
.................... ///   String 0 is a special language string, and must be defined.  People in U.S.A. can leave this alone. 
.................... /// 
.................... ///   You must define the length else get_next_string_character() will not see the string 
.................... ///   Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string.  offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... char USB_STRING_DESC_OFFSET[]={0,4,14}; 
....................  
.................... char const USB_STRING_DESC[]={ 
....................    //string 0 
....................          4, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          0x09,0x04,   //Microsoft Defined for US-English 
....................    //string 1 
....................          10, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          'A',0, 
....................          'U',0, 
....................          'R',0, 
....................          'E',0, 
....................    //string 2 
....................          40, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          'A',0, 
....................          'u',0, 
....................          'r',0, 
....................          'e',0, 
....................          'B',0, 
....................          'o',0, 
....................          'a',0, 
....................          'r',0, 
....................          'd',0, 
....................          ' ',0, 
....................          'U',0, 
....................          's',0, 
....................          'b',0, 
....................          '-',0, 
....................          'S',0, 
....................          'e',0, 
....................          'r',0, 
....................          'i',0, 
....................          'e',0,         
.................... }; 
....................  
.................... #ENDIF 
....................  
.................... #include <usb.c>        //handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... //// Many settings important to the USB API are defined in usb.h.      //// 
.................... //// See the documentation in usb.h about these settings.              //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The following functions are of use to  //// 
.................... //// the user (for more docs on the functions, read the comments at    //// 
.................... //// each function):                                                   //// 
.................... ////                                                                   //// 
.................... ////    **********************  FUNCTIONS  ***********************     //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral until you //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit() - Returns true if OUT endpoint contains data from     //// 
.................... ////               host.                                               //// 
.................... ////                                                                   //// 
.................... //// usb_puts() - Sends a multiple packet message to the host          //// 
.................... ////                                                                   //// 
.................... //// usb_gets() - Gets multiple packets from the host                  //// 
.................... ////                                                                   //// 
.................... //// The rest of the functions in this file are part of the USB        //// 
.................... //// interrupt service routine and are not meant to be called by the   //// 
.................... //// user.                                                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must include the following functions:                             //// 
.................... ////                                                                   //// 
.................... //// void usb_stall_ep(int8 endpoint);                                 //// 
.................... //// void usb_unstall_ep(int8 endpoint);                               //// 
.................... //// int1 usb_endpoint_stalled(int8 endpoint);                         //// 
.................... //// void usb_set_address(int8 address);                               //// 
.................... //// void usb_set_configured(int config);                              //// 
.................... //// int8 usb_get_packet(int8 endpoint, int8 * ptr, int8 max);         //// 
.................... //// int1 usb_put_packet(int endpoint, int * ptr, int len, USB_DTS_BIT toggle); //// 
.................... //// void usb_request_send_response(int8 len);                                //// 
.................... //// int1 usb_kbhit(int8 endpoint);                                    //// 
.................... ////                                                                   //// 
.................... //// CCS provides a USB peripheral hardware layer for PIC16C7x5        //// 
.................... //// (pic_usb.h), 18Fxx5x (pic18_usb.h) and National's USBN960x        //// 
.................... //// (usbn960x.c).  See these files for more documentation.            //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... ////                   **** DEFINITIONS *****                          //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (FALSE) - Set to TRUE if your device supports        //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            Only the 18Fxx5x USB peripheral can    //// 
.................... ////                            have a value larger than 8.            //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE  //set to false to opt for less RAM, true to opt for less ROM 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     0 
.................... #define USB_ENABLE_BULK         0x01 
.................... #define USB_ENABLE_ISOCHRONOUS  0x02 
.................... #define USB_ENABLE_INTERRUPT    0x03 
.................... #define USB_ENABLE_CONTROL      0x04 
....................  
.................... //// DO NOT CHANGE THE FOLLOWING VALUES: 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #else 
.................... struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #endif 
....................  
.................... int16 __usb_kbhit_status; 
....................  
.................... /// *** User function prototypes 
.................... void usb_wait_for_enumeration(void); 
.................... int1 usb_unermated(void); 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout); 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout); 
....................  
.................... /// *** Token and request hanlder function prototypes 
.................... void usb_token_reset(); 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_request_send_response(int len);   //always sends usb_ep0_rx_buffer[] to endpoint 0 with a toggle of DATA 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tok_in_dne(int8 endpoint); 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
....................  
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
....................  
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
....................  
.................... void usb_finish_set_address(void); 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #define usb_kbhit(x) bit_test(__usb_kbhit_status,x) 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: Use this to see if device is configured / enumerated. 
.................... /***************************************************************/ 
.................... #define usb_enumerated() (USB_stack_status.curr_config) 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void) { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts(endpoint, *ptr, len, timeout) 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before timeout. 
.................... /*                   set to 0 for no timeout. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  If sending 
.................... /*          only one packet it is more effecient to use only usb_put_packet() 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout) { 
....................    int16 i=0; 
....................    int1 res; 
....................    int16 this_packet_len; 
....................    int16 packet_size; 
....................    int32 timeout_1us; 
....................  
....................    packet_size=usb_ep_tx_size[endpoint]; 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len=packet_size;} 
....................       else {this_packet_len=len-i;} 
....................       do { 
....................          res=usb_put_packet(endpoint,ptr + i,this_packet_len,USB_DTS_TOGGLE);   //send 64 byte packets 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i+=packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res=usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before timeout. 
.................... /*                   set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /* NOTE: NOT THOUROUGHLY TESTED.  I AM NOT EVEN SURE IF THIS IS A GOOD IDEA 
.................... /* 
.................... /*****************************************************************************/ 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout) { 
....................    int16 ret=0; 
....................    int16 to; 
....................    int16 len; 
....................    int16 packet_size; 
....................    int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output: modifies global variables USB_Interface[], in[], usb_getdesc_ptr, 
.................... /*         usb_getdesc_len, USB_status_device, USB_dev_req 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset() { 
....................    int i; 
....................  
....................  
....................  
....................       for (i=0;i<USB_MAX_NUM_INTERFACES;i++) { 
*
2086:  CLRF   xB3
2088:  MOVF   xB3,W
208A:  SUBLW  01
208C:  BNC   20A2
....................          USB_Interface[i]=0;   //reset each interface to default 
208E:  CLRF   03
2090:  MOVF   xB3,W
2092:  ADDLW  28
2094:  MOVWF  FE9
2096:  MOVLW  00
2098:  ADDWFC 03,W
209A:  MOVWF  FEA
209C:  CLRF   FEF
....................       } 
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) { 
....................        hid_protocol[i]=1; 
....................    } 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
209E:  INCF   xB3,F
20A0:  BRA    2088
....................    usb_cdc_init(); 
20A2:  RCALL  2062
....................   #endif 
....................  
....................     USB_stack_status.curr_config=0;      //unconfigured device 
20A4:  CLRF   1A
....................  
....................     USB_stack_status.status_device=1;    //previous state.  init at none 
20A6:  MOVLW  01
20A8:  MOVWF  1B
....................     USB_stack_status.dev_req=NONE;       //previous token request state.  init at none 
20AA:  CLRF   19
.................... } 
20AC:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... // 
.................... int1 usb_endpoint_is_valid(int8 endpoint) { 
....................    int1 direction; 
....................    direction = bit_test(endpoint,7); 
*
2522:  BCF    xB5.0
2524:  BTFSC  xB4.7
2526:  BSF    xB5.0
....................    endpoint &= 0x7F; 
2528:  BCF    xB4.7
....................    if (direction) { //IN 
252A:  BTFSS  xB5.0
252C:  BRA    2550
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
252E:  CLRF   03
2530:  MOVF   xB4,W
2532:  MOVFF  FF2,B6
2536:  BCF    FF2.7
2538:  CALL   18B6
253C:  BTFSC  xB6.7
253E:  BSF    FF2.7
2540:  XORLW  00
2542:  BNZ   2548
2544:  MOVLW  00
2546:  BRA    254A
2548:  MOVLW  01
254A:  MOVWF  01
254C:  BRA    2570
....................    } 
....................    else {   //OUT 
254E:  BRA    2570
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
2550:  CLRF   03
2552:  MOVF   xB4,W
2554:  MOVFF  FF2,B6
2558:  BCF    FF2.7
255A:  CALL   18D6
255E:  BTFSC  xB6.7
2560:  BSF    FF2.7
2562:  XORLW  00
2564:  BNZ   256A
2566:  MOVLW  00
2568:  BRA    256C
256A:  MOVLW  01
256C:  MOVWF  01
256E:  BRA    2570
....................    } 
.................... } 
2570:  GOTO   2654 (RETURN)
....................  
.................... ///---------------------------------------------------------------/// 
.................... /// Processing Message stages is the biggest portion of the ISR   /// 
.................... ///---------------------------------------------------------------/// 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token.  Should be 0. 
.................... /* 
.................... /* Summary: When receiving an IN token from the PC on endpoint 0 that means the 
.................... /*          host is asking for a response from a setup token, or the next packet 
.................... /*          from a currently processing token.  (For example, a 24 byte descriptor 
.................... /*          would require 3 IN tokens if the packet size is 8 bytes.)  USB_dev_req 
.................... /*          is a global variable that defines what setup token we are currently processing. 
.................... /* 
.................... /* Part of USB interrupt service routine. 
.................... /* Only checks endpoint 0. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
2B04:  MOVF   xB4,F
2B06:  BNZ   2B1C
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
2B08:  DECFSZ 19,W
2B0A:  BRA    2B12
2B0C:  CALL   214C
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
2B10:  BRA    2B1A
2B12:  MOVF   19,W
2B14:  SUBLW  02
2B16:  BNZ   2B1A
2B18:  BRA    2A22
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
2B1A:  BRA    2B24
2B1C:  MOVF   xB4,W
2B1E:  SUBLW  02
2B20:  BNZ   2B24
....................       usb_isr_tok_in_cdc_data_dne(); 
2B22:  BRA    2AF6
....................   } 
....................   #endif 
.................... } 
2B24:  RETLW  00
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data. 
.................... /*        This code doesn't allow reception of data from EP0. (Add later) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy incoming 
.................... /*          to the pic), but not out setup tokens.  Data is placed into a 
.................... /*          a buffer if it is empty, and the rx flag is set.  If the buffer 
.................... /*          is not empty then the overrun bit of that EP status byte is set it. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint) { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
29DA:  MOVF   xB4,F
29DC:  BNZ   29E2
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
29DE:  BRA    2944
....................      #else 
....................       usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
29E0:  BRA    2A0A
29E2:  MOVF   xB4,W
29E4:  SUBLW  02
29E6:  BNZ   29EC
....................       usb_isr_tok_out_cdc_data_dne(); 
29E8:  BRA    29C8
....................    } 
....................   #endif 
....................    else { 
29EA:  BRA    2A0A
....................       bit_set(__usb_kbhit_status,endpoint); 
29EC:  CLRF   03
29EE:  MOVLW  01
29F0:  MOVWF  02
29F2:  MOVF   xB4,W
29F4:  MOVWF  00
29F6:  BZ    2A02
29F8:  BCF    FD8.0
29FA:  RLCF   02,F
29FC:  RLCF   03,F
29FE:  DECFSZ 00,F
2A00:  BRA    29F8
2A02:  MOVF   02,W
2A04:  IORWF  1D,F
2A06:  MOVF   03,W
2A08:  IORWF  1E,F
....................    } 
.................... } 
2A0A:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
.................... ////// HUGE - most of our code is to read setup messages //// 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the 8 bytes of the setup packet. 
.................... /* 
.................... /* Output: The DTS we expect for the next packet on OUT 0. 
.................... /* 
.................... /* Summary: This function is the start of code that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration, Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[8] now contains setup data packet, which has the following records 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
....................                                        (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet 
.................... /*                        for host-to-device, this exactly how many bytes in data packet 
.................... /*                        for device-to-host, this is the maximum bytes that can fit one packet 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void) { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
2756:  CLRF   19
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
2758:  MOVLB  5
275A:  MOVF   x00,W
275C:  ANDLW  7F
275E:  MOVLB  0
2760:  BZ    2770
2762:  XORLW  01
2764:  BZ    2772
2766:  XORLW  03
2768:  BZ    2774
276A:  XORLW  23
276C:  BZ    2776
276E:  BRA    2778
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
2770:  BRA    23E8
....................          break; 
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
2772:  BRA    248A
....................          break; 
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
2774:  BRA    264E
....................          break; 
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
2776:  BRA    26B4
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
2778:  RCALL  2146
....................          break; 
277A:  BRA    277C
....................    } 
.................... } 
277C:  GOTO   2B46 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
23E8:  MOVLB  5
23EA:  MOVF   x01,W
23EC:  MOVLB  0
23EE:  BZ    240A
23F0:  XORLW  01
23F2:  BZ    241C
23F4:  XORLW  02
23F6:  BZ    2434
23F8:  XORLW  06
23FA:  BZ    244A
23FC:  XORLW  03
23FE:  BZ    2458
2400:  XORLW  0E
2402:  BZ    245A
2404:  XORLW  01
2406:  BZ    2466
2408:  BRA    2482
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
240A:  MOVFF  1B,540
....................             usb_ep0_tx_buffer[1]=0; 
240E:  MOVLB  5
2410:  CLRF   x41
....................             usb_request_send_response(2); 
2412:  MOVLW  02
2414:  MOVLB  0
2416:  MOVWF  xB7
2418:  RCALL  2140
....................             break; 
241A:  BRA    2486
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
241C:  MOVLB  5
241E:  DECFSZ x02,W
2420:  BRA    242E
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
2422:  MOVLW  01
2424:  ANDWF  1B,F
....................                usb_put_0len_0(); 
2426:  MOVLB  0
2428:  CLRF   xB7
242A:  RCALL  2140
....................             } 
....................             else 
242C:  BRA    2432
....................                usb_request_stall(); 
242E:  MOVLB  0
2430:  RCALL  2146
....................             break; 
2432:  BRA    2486
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
2434:  MOVLB  5
2436:  DECFSZ x02,W
2438:  BRA    2444
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
243A:  BSF    1B.1
....................                usb_put_0len_0(); 
243C:  MOVLB  0
243E:  CLRF   xB7
2440:  RCALL  2140
....................             } 
....................             else 
2442:  BRA    2448
....................                usb_request_stall(); 
2444:  MOVLB  0
2446:  RCALL  2146
....................             break; 
2448:  BRA    2486
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
244A:  MOVLW  02
244C:  MOVWF  19
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
244E:  MOVFF  502,24
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................          	USB_stack_status.curr_config=0;	// make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
2452:  CLRF   xB7
2454:  RCALL  2140
....................             break; 
2456:  BRA    2486
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
2458:  BRA    21D2
....................             break; 
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
245A:  MOVFF  1A,540
....................             usb_request_send_response(1); 
245E:  MOVLW  01
2460:  MOVWF  xB7
2462:  RCALL  2140
....................             break; 
2464:  BRA    2486
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
2466:  MOVLB  5
2468:  MOVF   x02,W
246A:  SUBLW  01
246C:  BNC   247E
....................                debug_usb(debug_putc,"SC"); 
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
246E:  MOVFF  502,1A
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
2472:  MOVFF  502,B4
2476:  MOVLB  0
2478:  BRA    224A
....................                usb_put_0len_0(); 
247A:  CLRF   xB7
247C:  RCALL  2140
....................             } 
....................             break; 
247E:  MOVLB  0
2480:  BRA    2486
....................  
....................       default: 
....................             usb_request_stall(); 
2482:  RCALL  2146
....................             break; 
2484:  BRA    2486
....................    } 
.................... } 
2486:  GOTO   277C (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
248A:  MOVFF  1A,B4
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
248E:  MOVLB  5
2490:  MOVF   x01,W
2492:  MOVLB  0
2494:  BZ    24A0
2496:  XORLW  0A
2498:  BZ    24B0
249A:  XORLW  01
249C:  BZ    24F6
249E:  BRA    251A
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
24A0:  MOVLB  5
24A2:  CLRF   x40
....................             usb_ep0_tx_buffer[1]=0; 
24A4:  CLRF   x41
....................             usb_request_send_response(2); 
24A6:  MOVLW  02
24A8:  MOVLB  0
24AA:  MOVWF  xB7
24AC:  RCALL  2140
....................             break; 
24AE:  BRA    251E
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
24B0:  MOVF   xB4,F
24B2:  BZ    24F2
24B4:  MOVLW  01
24B6:  SUBWF  xB4,W
24B8:  CLRF   03
24BA:  MOVFF  FF2,B6
24BE:  BCF    FF2.7
24C0:  CALL   19BC
24C4:  BTFSC  xB6.7
24C6:  BSF    FF2.7
24C8:  MOVWF  01
24CA:  MOVLB  5
24CC:  SUBWF  x04,W
24CE:  BTFSS  FD8.0
24D0:  BRA    24D6
24D2:  MOVLB  0
24D4:  BRA    24F2
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
24D6:  CLRF   03
24D8:  MOVF   x04,W
24DA:  ADDLW  28
24DC:  MOVWF  FE9
24DE:  MOVLW  00
24E0:  ADDWFC 03,W
24E2:  MOVWF  FEA
24E4:  MOVFF  FEF,540
....................                usb_request_send_response(1);; //send byte back 
24E8:  MOVLW  01
24EA:  MOVLB  0
24EC:  MOVWF  xB7
24EE:  RCALL  2140
....................             } 
....................             else 
24F0:  BRA    24F4
....................                usb_request_stall(); 
24F2:  RCALL  2146
....................             break; 
24F4:  BRA    251E
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
24F6:  MOVF   xB4,F
24F8:  BZ    2516
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
24FA:  CLRF   03
24FC:  MOVLB  5
24FE:  MOVF   x04,W
2500:  ADDLW  28
2502:  MOVWF  FE9
2504:  MOVLW  00
2506:  ADDWFC 03,W
2508:  MOVWF  FEA
250A:  MOVFF  502,FEF
....................                usb_put_0len_0(); 
250E:  MOVLB  0
2510:  CLRF   xB7
2512:  RCALL  2140
....................             } 
....................             else 
2514:  BRA    2518
....................                usb_request_stall(); 
2516:  RCALL  2146
....................             break; 
2518:  BRA    251E
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
251A:  RCALL  2146
....................             break; 
251C:  BRA    251E
....................    } 
.................... } 
251E:  GOTO   277C (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
264E:  MOVFF  504,B4
2652:  BRA    2522
2654:  MOVF   01,F
2656:  BZ    26AA
....................       switch(usb_ep0_rx_buffer[1]) { 
2658:  MOVLB  5
265A:  MOVF   x01,W
265C:  XORLW  01
265E:  MOVLB  0
2660:  BZ    266C
2662:  XORLW  02
2664:  BZ    2678
2666:  XORLW  03
2668:  BZ    2684
266A:  BRA    26A6
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
266C:  MOVFF  504,B4
2670:  BRA    2574
....................                usb_put_0len_0(); 
2672:  CLRF   xB7
2674:  RCALL  2140
....................                break; 
2676:  BRA    26AA
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
2678:  MOVFF  504,B4
267C:  BRA    25B6
....................                      usb_put_0len_0(); 
267E:  CLRF   xB7
2680:  RCALL  2140
....................                      break; 
2682:  BRA    26AA
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
2684:  MOVLB  5
2686:  CLRF   x40
....................                usb_ep0_tx_buffer[1]=0; 
2688:  CLRF   x41
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
268A:  MOVFF  504,B4
268E:  MOVLB  0
2690:  BRA    25FA
2692:  MOVF   01,F
2694:  BZ    269E
....................                   usb_ep0_tx_buffer[0]=1; 
2696:  MOVLW  01
2698:  MOVLB  5
269A:  MOVWF  x40
269C:  MOVLB  0
....................                } 
....................                usb_request_send_response(2); 
269E:  MOVLW  02
26A0:  MOVWF  xB7
26A2:  RCALL  2140
....................                break; 
26A4:  BRA    26AA
....................  
....................          default: 
....................             usb_request_stall(); 
26A6:  RCALL  2146
....................             break; 
26A8:  BRA    26AA
....................       } 
....................    } 
.................... } 
26AA:  GOTO   277C (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
21D2:  CLRF   26
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
21D4:  CLRF   1C
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
21D6:  MOVLB  5
21D8:  MOVF   x03,W
21DA:  XORLW  01
21DC:  MOVLB  0
21DE:  BZ    21EA
21E0:  XORLW  03
21E2:  BZ    21F4
21E4:  XORLW  01
21E6:  BZ    21FA
21E8:  BRA    222A
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
21EA:  MOVLW  12
21EC:  MOVWF  27
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
21EE:  MOVLW  03
21F0:  MOVWF  1C
....................             break; 
21F2:  BRA    222E
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
21F4:  MOVLW  43
21F6:  MOVWF  27
....................             break; 
21F8:  BRA    222E
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
21FA:  MOVLW  02
21FC:  MOVWF  1C
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
21FE:  CLRF   03
2200:  MOVLB  5
2202:  MOVF   x02,W
2204:  ADDLW  21
2206:  MOVWF  FE9
2208:  MOVLW  00
220A:  ADDWFC 03,W
220C:  MOVWF  FEA
220E:  MOVFF  FEF,26
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
2212:  CLRF   03
2214:  MOVF   26,W
2216:  MOVFF  FF2,B4
221A:  BCF    FF2.7
221C:  MOVLB  0
221E:  CALL   19F0
2222:  BTFSC  xB4.7
2224:  BSF    FF2.7
2226:  MOVWF  27
....................             break; 
2228:  BRA    222E
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][0]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
....................  
....................  
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
222A:  RCALL  2146
....................             return; 
222C:  BRA    2246
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
222E:  MOVLB  5
2230:  MOVF   x07,F
2232:  BNZ   223E
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
2234:  MOVF   27,W
2236:  SUBWF  x06,W
2238:  BC    223E
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
223A:  MOVFF  506,27
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
223E:  MOVLW  01
2240:  MOVWF  19
....................    usb_copy_desc_seg_to_ep(); 
2242:  MOVLB  0
2244:  RCALL  214C
.................... } 
2246:  GOTO   2486 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
.................... 	USB_stack_status.curr_config=0;	// make sure current configuration is 0 
*
2A22:  CLRF   1A
....................  
....................    #ifdef __PIC__ 
.................... 	USB_stack_status.dev_req=NONE;  // no request pending 
2A24:  CLRF   19
....................    usb_set_address(USB_address_pending); 
2A26:  MOVFF  24,B5
2A2A:  BRA    2A0C
....................    #endif 
.................... } 
2A2C:  GOTO   2B1A (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
....................    int i=0; 
*
214C:  CLRF   xB5
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
214E:  MOVF   27,F
2150:  BZ    21BE
2152:  MOVF   xB5,W
2154:  SUBLW  3F
2156:  BNC   21BE
....................       switch(USB_stack_status.getdesc_type) { 
2158:  MOVF   1C,W
215A:  BZ    2166
215C:  XORLW  02
215E:  BZ    217C
2160:  XORLW  01
2162:  BZ    2190
2164:  BRA    21A4
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
2166:  CLRF   03
2168:  MOVF   26,W
216A:  MOVFF  FF2,B7
216E:  BCF    FF2.7
2170:  CALL   1968
2174:  BTFSC  xB7.7
2176:  BSF    FF2.7
2178:  MOVWF  xB6
....................             break; 
217A:  BRA    21A4
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
217C:  CLRF   03
217E:  MOVF   26,W
2180:  MOVFF  FF2,B7
2184:  BCF    FF2.7
2186:  RCALL  19F0
2188:  BTFSC  xB7.7
218A:  BSF    FF2.7
218C:  MOVWF  xB6
....................             break; 
218E:  BRA    21A4
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
2190:  CLRF   03
2192:  MOVF   26,W
2194:  MOVFF  FF2,B7
2198:  BCF    FF2.7
219A:  RCALL  19CE
219C:  BTFSC  xB7.7
219E:  BSF    FF2.7
21A0:  MOVWF  xB6
....................             break; 
21A2:  BRA    21A4
....................       } 
....................       usb_getdesc_ptr++; 
21A4:  INCF   26,F
....................       usb_getdesc_len--; 
21A6:  DECF   27,F
....................       usb_ep0_tx_buffer[i++]=c; 
21A8:  MOVF   xB5,W
21AA:  INCF   xB5,F
21AC:  CLRF   03
21AE:  ADDLW  40
21B0:  MOVWF  FE9
21B2:  MOVLW  05
21B4:  ADDWFC 03,W
21B6:  MOVWF  FEA
21B8:  MOVFF  B6,FEF
....................    } 
21BC:  BRA    214E
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
21BE:  MOVF   27,F
21C0:  BNZ   21CA
21C2:  MOVF   xB5,W
21C4:  SUBLW  40
21C6:  BZ    21CA
....................          USB_stack_status.dev_req = NONE; 
21C8:  CLRF   19
....................    } 
....................  
....................    usb_request_send_response(i); 
21CA:  MOVFF  B5,B7
21CE:  RCALL  2140
.................... } 
21D0:  RETLW  00
....................  
.................... #ENDIF 
....................  
....................  
.................... struct { 
....................         int32   dwDTERrate;   //data terminal rate, in bits per second 
....................         int8    bCharFormat;  //num of stop bits (0=1, 1=1.5, 2=2) 
....................         int8    bParityType;  //parity (0=none, 1=odd, 2=even, 3=mark, 4=space) 
....................         int8    bDataBits;    //data bits (5,6,7,8 or 16) 
.................... } usb_cdc_line_coding; 
....................  
.................... //length of time, in ms, of break signal as we received in a SendBreak message. 
.................... //if ==0xFFFF, send break signal until we receive a 0x0000. 
.................... int16 usb_cdc_break; 
....................  
.................... int8 usb_cdc_encapsulated_cmd[8]; 
....................  
.................... int8 usb_cdc_put_buffer[USB_CDC_DATA_IN_SIZE]; 
.................... int1 usb_cdc_put_buffer_free; 
.................... #if USB_CDC_DATA_IN_SIZE>=0x100 
....................  int16 usb_cdc_put_buffer_nextin=0; 
.................... // int16 usb_cdc_last_data_packet_size; 
.................... #else 
....................  int8 usb_cdc_put_buffer_nextin=0; 
.................... // int8 usb_cdc_last_data_packet_size; 
.................... #endif 
....................  
.................... struct { 
....................    int1 got; 
....................   #if USB_CDC_DATA_OUT_SIZE>=0x100 
....................    int16 len; 
....................    int16 index; 
....................   #else 
....................    int8 len; 
....................    int8 index; 
....................   #endif 
.................... } usb_cdc_get_buffer_status; 
....................  
.................... int8 usb_cdc_get_buffer_status_buffer[USB_CDC_DATA_OUT_SIZE]; 
.................... #if (defined(__PIC__)) 
....................  #if __PIC__ 
....................   //#locate usb_cdc_get_buffer_status_buffer=0x500+(2*USB_MAX_EP0_PACKET_LENGTH)+USB_CDC_COMM_IN_SIZE 
....................   #if USB_MAX_EP0_PACKET_LENGTH==8 
....................      #locate usb_cdc_get_buffer_status_buffer=0x500+24 
....................   #elif USB_MAX_EP0_PACKET_LENGTH==64 
....................      #locate usb_cdc_get_buffer_status_buffer=0x500+136 
....................   #else 
....................    #error CCS BUG WONT LET ME USE MATH IN LOCATE 
....................   #endif 
....................  #endif 
.................... #endif 
....................  
.................... int1 usb_cdc_got_set_line_coding; 
....................  
.................... struct  { 
....................    int1 dte_present; //1=DTE present, 0=DTE not present 
....................    int1 active;      //1=activate carrier, 0=deactivate carrier 
....................    int reserved:6; 
.................... } usb_cdc_carrier; 
....................  
.................... enum {USB_CDC_OUT_NOTHING=0, USB_CDC_OUT_COMMAND=1, USB_CDC_OUT_LINECODING=2, USB_CDC_WAIT_0LEN=3} __usb_cdc_state=0; 
....................  
.................... #byte INTCON=0xFF2 
.................... #bit INT_GIE=INTCON.7 
....................  
.................... //handle OUT token done interrupt on endpoint 0 [read encapsulated cmd and line coding data] 
.................... void usb_isr_tok_out_cdc_control_dne(void) { 
....................    debug_usb(debug_putc,"CDC %X ",__usb_cdc_state); 
....................  
....................    switch (__usb_cdc_state) { 
*
2944:  MOVF   x81,W
2946:  XORLW  01
2948:  BZ    2950
294A:  XORLW  03
294C:  BZ    2972
294E:  BRA    2994
....................       //printf(putc_tbe,"@%X@\r\n", __usb_cdc_state); 
....................       case USB_CDC_OUT_COMMAND: 
....................          //usb_get_packet(0, usb_cdc_encapsulated_cmd, 8); 
....................          memcpy(usb_cdc_encapsulated_cmd, usb_ep0_rx_buffer,8); 
2950:  CLRF   FEA
2952:  MOVLW  33
2954:  MOVWF  FE9
2956:  MOVLW  05
2958:  MOVWF  FE2
295A:  CLRF   FE1
295C:  MOVLW  08
295E:  MOVWF  01
2960:  MOVFF  FE6,FEE
2964:  DECFSZ 01,F
2966:  BRA    2960
....................         #if USB_MAX_EP0_PACKET_LENGTH==8 
....................          __usb_cdc_state=USB_CDC_WAIT_0LEN; 
....................          usb_request_get_data(); 
....................         #else 
....................          usb_put_0len_0(); 
2968:  CLRF   xB7
296A:  CALL   2140
....................          __usb_cdc_state=0; 
296E:  CLRF   x81
....................         #endif 
....................          break; 
2970:  BRA    299C
....................  
....................     #if USB_MAX_EP0_PACKET_LENGTH==8 
....................       case USB_CDC_WAIT_0LEN: 
....................          usb_put_0len_0(); 
....................          __usb_cdc_state=0; 
....................          break; 
....................     #endif 
....................  
....................       case USB_CDC_OUT_LINECODING: 
....................          //usb_get_packet(0, &usb_cdc_line_coding, 7); 
....................          //printf(putc_tbe,"\r\n!GSLC FIN!\r\n"); 
....................          memcpy(&usb_cdc_line_coding, usb_ep0_rx_buffer,7); 
2972:  CLRF   FEA
2974:  MOVLW  2A
2976:  MOVWF  FE9
2978:  MOVLW  05
297A:  MOVWF  FE2
297C:  CLRF   FE1
297E:  MOVLW  07
2980:  MOVWF  01
2982:  MOVFF  FE6,FEE
2986:  DECFSZ 01,F
2988:  BRA    2982
....................          __usb_cdc_state=0; 
298A:  CLRF   x81
....................          usb_put_0len_0(); 
298C:  CLRF   xB7
298E:  CALL   2140
....................          break; 
2992:  BRA    299C
....................  
....................       default: 
....................          __usb_cdc_state=0; 
2994:  CLRF   x81
....................          usb_init_ep0_setup(); 
2996:  CALL   20DA
....................          break; 
299A:  BRA    299C
....................    } 
.................... } 
299C:  GOTO   29E0 (RETURN)
....................  
.................... //handle IN token on 0 (setup packet) 
.................... void usb_isr_tkn_cdc(void) { 
....................    //make sure the request goes to a CDC interface 
....................    if ((usb_ep0_rx_buffer[4] == 1) || (usb_ep0_rx_buffer[4] == 0)) { 
*
26B4:  MOVLB  5
26B6:  DECFSZ x04,W
26B8:  BRA    26BC
26BA:  BRA    26C0
26BC:  MOVF   x04,F
26BE:  BNZ   2750
....................       //printf(putc_tbe,"!%X!\r\n", usb_ep0_rx_buffer[1]); 
....................       switch(usb_ep0_rx_buffer[1]) { 
26C0:  MOVF   x01,W
26C2:  MOVLB  0
26C4:  BZ    26DC
26C6:  XORLW  01
26C8:  BZ    26E4
26CA:  XORLW  21
26CC:  BZ    2706
26CE:  XORLW  01
26D0:  BZ    2710
26D2:  XORLW  03
26D4:  BZ    2732
26D6:  XORLW  01
26D8:  BZ    273C
26DA:  BRA    274A
....................          case 0x00:  //send_encapsulated_command 
....................             __usb_cdc_state=USB_CDC_OUT_COMMAND; 
26DC:  MOVLW  01
26DE:  MOVWF  x81
....................             usb_request_get_data(); 
26E0:  RCALL  26AE
....................             break; 
26E2:  BRA    274E
....................  
....................          case 0x01:  //get_encapsulated_command 
....................             memcpy(usb_ep0_tx_buffer, usb_cdc_encapsulated_cmd, 8); 
26E4:  MOVLW  05
26E6:  MOVWF  FEA
26E8:  MOVLW  40
26EA:  MOVWF  FE9
26EC:  CLRF   FE2
26EE:  MOVLW  33
26F0:  MOVWF  FE1
26F2:  MOVLW  08
26F4:  MOVWF  01
26F6:  MOVFF  FE6,FEE
26FA:  DECFSZ 01,F
26FC:  BRA    26F6
....................             usb_request_send_response(usb_ep0_rx_buffer[6]);  //send wLength bytes 
26FE:  MOVFF  506,B7
2702:  RCALL  2140
....................             break; 
2704:  BRA    274E
....................  
....................          case 0x20:  //set_line_coding 
....................             debug_usb(debug_putc,"!GSLC!"); 
....................             __usb_cdc_state=USB_CDC_OUT_LINECODING; 
2706:  MOVLW  02
2708:  MOVWF  x81
....................             usb_cdc_got_set_line_coding=TRUE; 
270A:  BSF    x7B.1
....................             usb_request_get_data(); 
270C:  RCALL  26AE
....................             break; 
270E:  BRA    274E
....................  
....................          case 0x21:  //get_line_coding 
....................             memcpy(usb_ep0_tx_buffer, &usb_cdc_line_coding, sizeof(usb_cdc_line_coding)); 
2710:  MOVLW  05
2712:  MOVWF  FEA
2714:  MOVLW  40
2716:  MOVWF  FE9
2718:  CLRF   FE2
271A:  MOVLW  2A
271C:  MOVWF  FE1
271E:  MOVLW  07
2720:  MOVWF  01
2722:  MOVFF  FE6,FEE
2726:  DECFSZ 01,F
2728:  BRA    2722
....................             usb_request_send_response(sizeof(usb_cdc_line_coding)); //send wLength bytes 
272A:  MOVLW  07
272C:  MOVWF  xB7
272E:  RCALL  2140
....................             break; 
2730:  BRA    274E
....................  
....................          case 0x22:  //set_control_line_state 
....................             usb_cdc_carrier=usb_ep0_rx_buffer[2]; 
2732:  MOVFF  502,80
....................             usb_put_0len_0(); 
2736:  CLRF   xB7
2738:  RCALL  2140
....................             break; 
273A:  BRA    274E
....................  
....................          case 0x23:  //send_break 
....................             usb_cdc_break=make16(usb_ep0_rx_buffer[2],usb_ep0_rx_buffer[3]); 
273C:  MOVFF  502,32
2740:  MOVFF  503,31
....................             usb_put_0len_0(); 
2744:  CLRF   xB7
2746:  RCALL  2140
....................             break; 
2748:  BRA    274E
....................  
....................          default: 
....................             usb_request_stall(); 
274A:  RCALL  2146
....................             break; 
274C:  BRA    274E
274E:  MOVLB  5
....................       } 
....................    } 
.................... } 
2750:  MOVLB  0
2752:  GOTO   277C (RETURN)
....................  
.................... //handle OUT token done interrupt on endpoint 3 [buffer incoming received chars] 
.................... void usb_isr_tok_out_cdc_data_dne(void) { 
....................    usb_cdc_get_buffer_status.got=TRUE; 
*
29C8:  BSF    x7D.0
....................    usb_cdc_get_buffer_status.index=0; 
29CA:  CLRF   x7F
.................... #if (defined(__PIC__)) 
....................    #if __PIC__ 
....................     usb_cdc_get_buffer_status.len=usb_rx_packet_size(USB_CDC_DATA_OUT_ENDPOINT); 
29CC:  MOVLW  02
29CE:  MOVWF  xB5
29D0:  BRA    29A0
29D2:  MOVFF  01,7E
....................    #else 
....................     usb_cdc_get_buffer_status.len=usb_get_packet_buffer( 
....................        USB_CDC_DATA_OUT_ENDPOINT,&usb_cdc_get_buffer_status_buffer[0],USB_CDC_DATA_OUT_SIZE); 
....................    #endif 
.................... #else 
....................    usb_cdc_get_buffer_status.len=usb_get_packet_buffer( 
....................       USB_CDC_DATA_OUT_ENDPOINT,&usb_cdc_get_buffer_status_buffer[0],USB_CDC_DATA_OUT_SIZE); 
.................... #endif 
.................... } 
29D6:  GOTO   29EA (RETURN)
....................  
.................... //handle IN token done interrupt on endpoint 2 [transmit buffered characters] 
.................... void usb_isr_tok_in_cdc_data_dne(void) { 
....................    if (usb_cdc_put_buffer_nextin) { 
*
2AF6:  MOVF   x7C,F
2AF8:  BZ    2AFE
....................       usb_cdc_flush_out_buffer(); 
2AFA:  RCALL  2AD6
....................    } 
....................    //send a 0len packet if needed 
.................... //   else if (usb_cdc_last_data_packet_size==USB_CDC_DATA_IN_SIZE) { 
.................... //      usb_cdc_last_data_packet_size=0; 
.................... //      printf(putc_tbe, "FL 0\r\n"); 
.................... //      usb_put_packet(USB_CDC_DATA_IN_ENDPOINT,0,0,USB_DTS_TOGGLE); 
.................... //   } 
....................    else { 
2AFC:  BRA    2B00
....................       usb_cdc_put_buffer_free=TRUE; 
2AFE:  BSF    x7B.0
....................       //printf(putc_tbe, "FL DONE\r\n"); 
....................    } 
.................... } 
2B00:  GOTO   2B24 (RETURN)
....................  
.................... void usb_cdc_flush_out_buffer(void) { 
....................    if (usb_cdc_put_buffer_nextin) { 
*
2AD6:  MOVF   x7C,F
2AD8:  BZ    2AF4
....................       usb_cdc_put_buffer_free=FALSE; 
2ADA:  BCF    x7B.0
....................       //usb_cdc_last_data_packet_size=usb_cdc_put_buffer_nextin; 
....................       //printf(putc_tbe, "FL %U\r\n", usb_cdc_put_buffer_nextin); 
....................       usb_put_packet(USB_CDC_DATA_IN_ENDPOINT,usb_cdc_put_buffer,usb_cdc_put_buffer_nextin,USB_DTS_TOGGLE); 
2ADC:  MOVLW  02
2ADE:  MOVWF  xB5
2AE0:  CLRF   xB7
2AE2:  MOVLW  3B
2AE4:  MOVWF  xB6
2AE6:  CLRF   xB9
2AE8:  MOVFF  7C,B8
2AEC:  MOVLW  02
2AEE:  MOVWF  xBA
2AF0:  RCALL  2A30
....................       usb_cdc_put_buffer_nextin=0; 
2AF2:  CLRF   x7C
....................    } 
.................... } 
2AF4:  RETLW  00
....................  
.................... void usb_cdc_init(void) { 
....................    usb_cdc_line_coding.dwDTERrate=9600; 
*
2062:  CLRF   2D
2064:  CLRF   2C
2066:  MOVLW  25
2068:  MOVWF  2B
206A:  MOVLW  80
206C:  MOVWF  2A
....................    usb_cdc_line_coding.bCharFormat=0; 
206E:  CLRF   2E
....................    usb_cdc_line_coding.bParityType=0; 
2070:  CLRF   2F
....................    usb_cdc_line_coding.bDataBits=8; 
2072:  MOVLW  08
2074:  MOVWF  30
....................    (int8)usb_cdc_carrier=0; 
2076:  CLRF   x80
....................    usb_cdc_got_set_line_coding=FALSE; 
2078:  BCF    x7B.1
....................    usb_cdc_break=0; 
207A:  CLRF   32
207C:  CLRF   31
....................    usb_cdc_put_buffer_nextin=0; 
207E:  CLRF   x7C
....................    usb_cdc_get_buffer_status.got=0; 
2080:  BCF    x7D.0
....................    usb_cdc_put_buffer_free=TRUE; 
2082:  BSF    x7B.0
.................... } 
2084:  RETLW  00
....................  
.................... ////////////////// END USB CONTROL HANDLING ////////////////////////////////// 
....................  
.................... ////////////////// BEGIN USB<->RS232 CDC LIBRARY ///////////////////////////// 
....................  
.................... char usb_cdc_getc(void) { 
....................    char c; 
....................  
....................    while (!usb_cdc_kbhit()) {} 
*
30E8:  BTFSC  x7D.0
30EA:  BRA    30EE
30EC:  BRA    30E8
....................  
....................    c=usb_cdc_get_buffer_status_buffer[usb_cdc_get_buffer_status.index++]; 
30EE:  MOVF   x7F,W
30F0:  INCF   x7F,F
30F2:  CLRF   03
30F4:  ADDLW  88
30F6:  MOVWF  FE9
30F8:  MOVLW  05
30FA:  ADDWFC 03,W
30FC:  MOVWF  FEA
30FE:  MOVFF  FEF,90
....................    if (usb_cdc_get_buffer_status.index >= usb_cdc_get_buffer_status.len) { 
3102:  MOVF   x7E,W
3104:  SUBWF  x7F,W
3106:  BNC   3120
....................       usb_cdc_get_buffer_status.got=FALSE; 
3108:  BCF    x7D.0
310A:  CLRF   18
310C:  BTFSC  FF2.7
310E:  BSF    18.7
3110:  BCF    FF2.7
....................       usb_flush_out(USB_CDC_DATA_OUT_ENDPOINT, USB_DTS_TOGGLE); 
3112:  MOVLW  02
3114:  MOVWF  xB4
3116:  MOVWF  xB5
3118:  CALL   2780
311C:  BTFSC  18.7
311E:  BSF    FF2.7
....................    } 
....................  
....................    return(c); 
3120:  MOVFF  90,01
.................... } 
3124:  GOTO   312A (RETURN)
....................  
.................... void usb_cdc_putc_fast(char c) { 
....................    int1 old_gie; 
....................  
....................    //disable global interrupts 
....................    old_gie=INT_GIE; 
*
2DE6:  BCF    x95.0
2DE8:  BTFSC  FF2.7
2DEA:  BSF    x95.0
....................    INT_GIE=0; 
2DEC:  BCF    FF2.7
....................  
....................    if (usb_cdc_put_buffer_nextin >= USB_CDC_DATA_IN_SIZE) { 
2DEE:  MOVF   x7C,W
2DF0:  SUBLW  3F
2DF2:  BC    2DF8
....................       usb_cdc_put_buffer_nextin=USB_CDC_DATA_IN_SIZE-1;  //we just overflowed the buffer! 
2DF4:  MOVLW  3F
2DF6:  MOVWF  x7C
....................    } 
....................    usb_cdc_put_buffer[usb_cdc_put_buffer_nextin++]=c; 
2DF8:  MOVF   x7C,W
2DFA:  INCF   x7C,F
2DFC:  CLRF   03
2DFE:  ADDLW  3B
2E00:  MOVWF  FE9
2E02:  MOVLW  00
2E04:  ADDWFC 03,W
2E06:  MOVWF  FEA
2E08:  MOVFF  94,FEF
....................  
....................    //renable global interrupts 
....................    INT_GIE=old_gie; 
2E0C:  BCF    FF2.7
2E0E:  BTFSC  x95.0
2E10:  BSF    FF2.7
....................  
....................    /* 
....................    if (usb_tbe(USB_CDC_DATA_IN_ENDPOINT)) { 
....................       if (usb_cdc_put_buffer_nextin) 
....................          usb_cdc_flush_out_buffer(); 
....................    } 
....................    */ 
....................    if (usb_cdc_put_buffer_free) { 
2E12:  BTFSS  x7B.0
2E14:  BRA    2E24
2E16:  CLRF   18
2E18:  BTFSC  FF2.7
2E1A:  BSF    18.7
2E1C:  BCF    FF2.7
....................       usb_cdc_flush_out_buffer(); 
2E1E:  RCALL  2AD6
2E20:  BTFSC  18.7
2E22:  BSF    FF2.7
....................    } 
.................... } 
2E24:  GOTO   2E48 (RETURN)
....................  
.................... void usb_cdc_putc(char c) { 
....................    while (!usb_cdc_putready()) { 
2E28:  MOVF   x7C,W
2E2A:  SUBLW  3F
2E2C:  BC    2E42
....................       if (usb_cdc_put_buffer_free) { 
2E2E:  BTFSS  x7B.0
2E30:  BRA    2E40
2E32:  CLRF   18
2E34:  BTFSC  FF2.7
2E36:  BSF    18.7
2E38:  BCF    FF2.7
....................          usb_cdc_flush_out_buffer(); 
2E3A:  RCALL  2AD6
2E3C:  BTFSC  18.7
2E3E:  BSF    FF2.7
....................       } 
....................       //delay_ms(500); 
....................       //printf(putc_tbe,"TBE=%U CNT=%U LST=%U\r\n",usb_tbe(USB_CDC_DATA_IN_ENDPOINT), usb_cdc_put_buffer_nextin, usb_cdc_last_data_packet_size); 
....................    } 
2E40:  BRA    2E28
....................    usb_cdc_putc_fast(c); 
2E42:  MOVFF  93,94
2E46:  BRA    2DE6
.................... } 
2E48:  RETLW  00
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... BYTE gethex1_usb() { 
....................    char digit; 
....................  
....................    digit = usb_cdc_getc(); 
....................  
....................    usb_cdc_putc(digit); 
....................  
....................    if(digit<='9') 
....................      return(digit-'0'); 
....................    else 
....................      return((toupper(digit)-'A')+10); 
.................... } 
....................  
.................... BYTE gethex_usb() { 
....................    int lo,hi; 
....................  
....................    hi = gethex1_usb(); 
....................    lo = gethex1_usb(); 
....................    if(lo==0xdd) 
....................      return(hi); 
....................    else 
....................      return( hi*16+lo ); 
.................... } 
....................  
.................... void get_string_usb(char* s, int max) { 
....................    int len; 
....................    char c; 
....................  
....................    --max; 
....................    len=0; 
....................    do { 
....................      c=usb_cdc_getc(); 
....................      if(c==8) {  // Backspace 
....................         if(len>0) { 
....................           len--; 
....................           usb_cdc_putc(c); 
....................           usb_cdc_putc(' '); 
....................           usb_cdc_putc(c); 
....................         } 
....................      } else if ((c>=' ')&&(c<='~')) 
....................        if(len<max) { 
....................          s[len++]=c; 
....................          usb_cdc_putc(c); 
....................        } 
....................    } while(c!=13); 
....................    s[len]=0; 
.................... } 
....................  
....................  
.................... // stdlib.h is required for the ato_ conversions 
.................... // in the following functions 
.................... #ifdef _STDLIB 
....................  
.................... signed int get_int_usb() { 
....................   char s[5]; 
....................   signed int i; 
....................  
....................   get_string_usb(s, 5); 
....................  
....................   i=atoi(s); 
....................   return(i); 
.................... } 
....................  
.................... signed long get_long_usb() { 
....................   char s[7]; 
....................   signed long l; 
....................  
....................   get_string_usb(s, 7); 
....................   l=atol(s); 
....................   return(l); 
.................... } 
....................  
.................... float get_float_usb() { 
....................   char s[20]; 
....................   float f; 
....................  
....................   get_string_usb(s, 20); 
....................   f = atof(s); 
....................   return(f); 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... //Creamos el puerto serie (96008N1) 
.................... #use rs232 (baud=9600,XMIT=PIN_C6,RCV=PIN_C7,BITS=8) 
....................  
.................... #USE STANDARD_IO (e) 
....................  
....................  
.................... // Configuramos los dispositivos incluidos en la placa. 
.................... #define LED PIN_C2 
.................... #define PULSADOR PIN_A4 
....................  
.................... // Alias de funciones 
.................... #define ENCENDER  output_high 
.................... #define APAGAR    output_low 
.................... #define CONMUTAR  output_toggle 
....................  
.................... // Para configurar el usb si esperar al host 
.................... void aure_configurar_usb_sinespera() 
.................... { 
....................    usb_cdc_init(); 
*
2DDC:  CALL   2062
....................    usb_init(); 
2DE0:  BRA    2DCE
.................... } 
2DE2:  GOTO   2EEC (RETURN)
....................  
....................  
.................... // Devuelve 1 si el dispositivo cdc está conectado 
.................... int aure_configurar_usb_comprobar() 
.................... { 
....................    if (usb_cdc_connected() && usb_enumerated()) return 1; 
....................    return 0; 
.................... } 
....................  
.................... // Configura el usb y espera al host 
.................... void aure_configurar_usb() 
.................... { 
....................    usb_cdc_init(); 
....................    usb_init(); 
....................    while(!usb_cdc_connected()) {} 
....................    if (usb_enumerated()) printf(usb_cdc_putc, "\r\n\n-AureBoard ¡Lista!\r\n"); 
.................... } 
....................  
....................  
.................... // Inicializa el PIC 
.................... void aure_configurar() 
.................... { 
....................    int t=0; 
*
2E4A:  CLRF   x8F
....................    printf ("\r\nAUREBOT\r\n_______\r\n\r\nIniciando...\r\n"); 
2E4C:  CLRF   x90
2E4E:  MOVF   x90,W
2E50:  CALL   1A36
2E54:  INCF   x90,F
2E56:  MOVWF  00
2E58:  MOVF   00,W
2E5A:  BTFSS  F9E.4
2E5C:  BRA    2E5A
2E5E:  MOVWF  FAD
2E60:  MOVLW  24
2E62:  SUBWF  x90,W
2E64:  BNZ   2E4E
....................    printf("[Delay 50 ms]\r\n"); 
2E66:  CLRF   x90
2E68:  MOVF   x90,W
2E6A:  CALL   1A76
2E6E:  INCF   x90,F
2E70:  MOVWF  00
2E72:  MOVF   00,W
2E74:  BTFSS  F9E.4
2E76:  BRA    2E74
2E78:  MOVWF  FAD
2E7A:  MOVLW  0F
2E7C:  SUBWF  x90,W
2E7E:  BNZ   2E68
....................    delay_ms(50); 
2E80:  MOVLW  32
2E82:  MOVWF  xA8
2E84:  RCALL  2D3A
....................    printf("[Ok]\r\n"); 
2E86:  CLRF   x90
2E88:  MOVF   x90,W
2E8A:  CALL   1AA0
2E8E:  INCF   x90,F
2E90:  MOVWF  00
2E92:  MOVF   00,W
2E94:  BTFSS  F9E.4
2E96:  BRA    2E94
2E98:  MOVWF  FAD
2E9A:  MOVLW  06
2E9C:  SUBWF  x90,W
2E9E:  BNZ   2E88
....................    for (t=0; t<10; t++) 
2EA0:  CLRF   x8F
2EA2:  MOVF   x8F,W
2EA4:  SUBLW  09
2EA6:  BNC   2EB6
....................    { 
....................       output_toggle(LED); 
2EA8:  BCF    F94.2
2EAA:  BTG    F8B.2
....................       delay_ms(100); 
2EAC:  MOVLW  64
2EAE:  MOVWF  xA8
2EB0:  RCALL  2D3A
....................    } 
2EB2:  INCF   x8F,F
2EB4:  BRA    2EA2
....................    printf("-Led Verde\r\n"); 
2EB6:  CLRF   x90
2EB8:  MOVF   x90,W
2EBA:  CALL   1AC2
2EBE:  INCF   x90,F
2EC0:  MOVWF  00
2EC2:  MOVF   00,W
2EC4:  BTFSS  F9E.4
2EC6:  BRA    2EC4
2EC8:  MOVWF  FAD
2ECA:  MOVLW  0C
2ECC:  SUBWF  x90,W
2ECE:  BNZ   2EB8
....................  
....................    /* 
....................       Configuramos el usb-serie 
....................       -aure_configurar_usb() 
....................          Espera a que el host configure el dispositivo, la ejecución del 
....................          programa no comienza hasta ese momento. 
....................       -aure_configurar_usb_sinespera() 
....................          No espera a que el host configure el dispositivo. Se puede usar la  
....................          función aure_configurar_usb_comprobar() para saber si el dispositivo 
....................          esta conectado (f()==1 conectado, f()==0 desconectado) 
....................    */ 
....................    printf("-USB CDC\r\n"); 
2ED0:  CLRF   x90
2ED2:  MOVF   x90,W
2ED4:  CALL   1AEA
2ED8:  INCF   x90,F
2EDA:  MOVWF  00
2EDC:  MOVF   00,W
2EDE:  BTFSS  F9E.4
2EE0:  BRA    2EDE
2EE2:  MOVWF  FAD
2EE4:  MOVLW  0A
2EE6:  SUBWF  x90,W
2EE8:  BNZ   2ED2
....................       aure_configurar_usb_sinespera(); 
2EEA:  BRA    2DDC
....................    //Configuramos los registros TRIS 
....................    //set_tris_a(0b00000111); 
....................    //set_tris_b(0x00); 
....................    //set_tris_c(0x00); 
....................    //set_tris_d(0x00); 
....................    //set_tris_e(0x00);       
....................    //printf("-Registros TRIS\r\n"); 
....................  
....................    //Configuramos las resistencias de pullup del puerto B 
....................    port_b_pullups(FALSE); 
2EEC:  BSF    FF1.7
....................   // printf(usb_cdc_putc, "-Pull up's         [OFF]\r\n"); 
....................  
....................    //Todos los puertos a nivel bajo 
....................    //output_a (0x00); 
....................    //output_b (0x00); 
....................    //output_c (0xff); 
....................    //output_d (0x00); 
....................    //output_e (0x00); 
....................    //printf("-Puertos a 0\r\n"); 
....................  
....................  
....................    //Configuramos el ADC 
....................    //Todas las entradas analogicas activas y rango 0-Vdd 
....................    //setup_adc_ports( ALL_ANALOG|VSS_VDD ); 
....................    setup_adc_ports(NO_ANALOGS); 
2EEE:  MOVF   FC1,W
2EF0:  ANDLW  C0
2EF2:  IORLW  0F
2EF4:  MOVWF  FC1
....................    setup_adc_ports(NO_ANALOGS); 
2EF6:  MOVF   FC1,W
2EF8:  ANDLW  C0
2EFA:  IORLW  0F
2EFC:  MOVWF  FC1
....................    setup_adc(ADC_OFF); 
2EFE:  BCF    FC2.0
....................    //Reloj interno 
....................    //setup_adc(ADC_CLOCK_INTERNAL ); 
....................    //set_adc_channel(0); 
....................    //printf("usb_cdc_putc, "-ADC      [ON]\r\n"); 
....................    //printf(usb_cdc_putc, "-ADC         [OFF]\r\n"); 
....................  
....................    disable_interrupts(global); 
2F00:  BCF    FF2.6
2F02:  BCF    FF2.7
2F04:  BTFSC  FF2.7
2F06:  BRA    2F02
....................  
....................  
....................    setup_spi(FALSE); 
2F08:  BCF    FC6.5
2F0A:  BCF    F94.7
2F0C:  BSF    F93.0
2F0E:  BCF    F93.1
2F10:  MOVLW  00
2F12:  MOVWF  FC6
2F14:  MOVWF  FC7
....................       printf(usb_cdc_putc, "-SPI          [OFF]\r\n"); 
2F16:  CLRF   x90
2F18:  MOVF   x90,W
2F1A:  CALL   1B10
2F1E:  INCF   x90,F
2F20:  MOVWF  00
2F22:  MOVWF  x93
2F24:  RCALL  2E28
2F26:  MOVLW  15
2F28:  SUBWF  x90,W
2F2A:  BNZ   2F18
....................    setup_psp(PSP_DISABLED); 
2F2C:  BCF    F96.4
....................       printf(usb_cdc_putc, "-PSP          [OFF]\r\n"); 
2F2E:  CLRF   x90
2F30:  MOVF   x90,W
2F32:  CALL   1B40
2F36:  INCF   x90,F
2F38:  MOVWF  00
2F3A:  MOVWF  x93
2F3C:  RCALL  2E28
2F3E:  MOVLW  15
2F40:  SUBWF  x90,W
2F42:  BNZ   2F30
....................     // Habilitamos el TIMER1 
....................    //enable_interrupts(INT_TIMER1); 
....................    setup_timer_0(RTCC_OFF); 
2F44:  CLRF   FD5
....................       printf(usb_cdc_putc, "-Timer0       [OFF]\r\n"); 
2F46:  CLRF   x90
2F48:  MOVF   x90,W
2F4A:  CALL   1B70
2F4E:  INCF   x90,F
2F50:  MOVWF  00
2F52:  MOVWF  x93
2F54:  RCALL  2E28
2F56:  MOVLW  15
2F58:  SUBWF  x90,W
2F5A:  BNZ   2F48
....................    setup_timer_1(T1_DISABLED| T1_DIV_BY_1); 
2F5C:  CLRF   FCD
....................       printf(usb_cdc_putc, "-Timer1       [OFF]\r\n"); 
2F5E:  CLRF   x90
2F60:  MOVF   x90,W
2F62:  CALL   1BA0
2F66:  INCF   x90,F
2F68:  MOVWF  00
2F6A:  MOVWF  x93
2F6C:  RCALL  2E28
2F6E:  MOVLW  15
2F70:  SUBWF  x90,W
2F72:  BNZ   2F60
....................    setup_timer_2(T2_DISABLED,0,1); 
2F74:  MOVLW  00
2F76:  MOVWF  FCA
2F78:  MOVLW  00
2F7A:  MOVWF  FCB
....................       printf(usb_cdc_putc, "-Timer2       [OFF]\r\n"); 
2F7C:  CLRF   x90
2F7E:  MOVF   x90,W
2F80:  CALL   1BD0
2F84:  INCF   x90,F
2F86:  MOVWF  00
2F88:  MOVWF  x93
2F8A:  RCALL  2E28
2F8C:  MOVLW  15
2F8E:  SUBWF  x90,W
2F90:  BNZ   2F7E
....................    setup_timer_3(T3_DISABLED); 
2F92:  MOVF   FB1,W
2F94:  ANDLW  48
2F96:  MOVWF  FB1
....................       printf(usb_cdc_putc, "-Timer3       [OFF]\r\n"); 
2F98:  CLRF   x90
2F9A:  MOVF   x90,W
2F9C:  CALL   1C00
2FA0:  INCF   x90,F
2FA2:  MOVWF  00
2FA4:  MOVWF  x93
2FA6:  RCALL  2E28
2FA8:  MOVLW  15
2FAA:  SUBWF  x90,W
2FAC:  BNZ   2F9A
....................    setup_comparator(NC_NC_NC_NC); 
2FAE:  MOVLW  07
2FB0:  MOVWF  FB4
2FB2:  MOVF   F92,W
2FB4:  MOVLW  27
2FB6:  MOVWF  00
2FB8:  DECFSZ 00,F
2FBA:  BRA    2FB8
2FBC:  BRA    2FBE
2FBE:  MOVF   FB4,W
2FC0:  BCF    FA1.6
....................       printf(usb_cdc_putc, "-Comparador   [OFF]\r\n"); 
2FC2:  CLRF   x90
2FC4:  MOVF   x90,W
2FC6:  CALL   1C30
2FCA:  INCF   x90,F
2FCC:  MOVWF  00
2FCE:  MOVWF  x93
2FD0:  RCALL  2E28
2FD2:  MOVLW  15
2FD4:  SUBWF  x90,W
2FD6:  BNZ   2FC4
....................    setup_vref(FALSE); 
2FD8:  CLRF   FB5
....................  
....................    //Habilitamos la interrupcion serie 
....................    enable_interrupts(int_rda);  
2FDA:  BSF    F9D.5
....................    //   printf(usb_cdc_putc, "-Int SERIE   [ON]\r\n"); 
....................  
....................    // Habilitamos las interrupcione globales 
....................    enable_interrupts(GLOBAL); 
2FDC:  MOVLW  C0
2FDE:  IORWF  FF2,F
....................    //   printf (usb_cdc_putc, "-Int GLOB   [ON]\r\n"); 
....................  
....................  
....................    //printf (usb_cdc_putc, "¡Lista!\r\n\r\n"); 
.................... } 
2FE0:  GOTO   3ECA (RETURN)
....................  
....................  
.................... //Interrupción y gestión serie 
.................... int keypress=0; 
.................... void aure_serie(); 
.................... void aure_usb_serie_int(); 
....................  
.................... void aure_usb() 
.................... { 
....................    // Si usamos el USB 
....................    usb_task(); 
*
333C:  RCALL  2DAC
....................    // Comprobamos si tenemos algún caracter en el buffer serie/usb, si lo 
....................    // tenemos llamamos a aure_usb_serie_int() que nos lo guardará en keypress 
....................    if (usb_cdc_kbhit()) 
333E:  BTFSS  x7D.0
3340:  BRA    334A
....................    { 
....................       aure_usb_serie_int(); 
3342:  RCALL  3128
....................       if (keypress!=0x00) aure_serie(); 
3344:  MOVF   x82,F
3346:  BZ    334A
3348:  RCALL  322E
....................    } 
.................... } 
334A:  GOTO   3ED2 (RETURN)
....................  
.................... #int_rda 
.................... void aure_serie_int() 
.................... { 
....................    int key; 
....................    key=getc(); 
*
2C5A:  BTFSS  F9E.5
2C5C:  BRA    2C5A
2C5E:  MOVFF  FAE,B3
....................     if (key!=0x00 && key!=0xFF) 
2C62:  MOVF   xB3,F
2C64:  BZ    2C7C
2C66:  INCFSZ xB3,W
2C68:  BRA    2C6C
2C6A:  BRA    2C7C
....................     { 
....................       output_toggle(LED); 
2C6C:  BCF    F94.2
2C6E:  BTG    F8B.2
....................       keypress=key; 
2C70:  MOVFF  B3,82
....................       //printf ("\rRX:%u->%c\r\n", key,key); 
....................       if (key==27) reset_cpu(); 
2C74:  MOVF   xB3,W
2C76:  SUBLW  1B
2C78:  BTFSC  FD8.2
2C7A:  RESET
....................     } 
.................... } 
....................  
....................  
2C7C:  BCF    F9E.5
2C7E:  GOTO   1870
.................... void aure_usb_serie_int() 
.................... { 
....................    int key; 
....................    key=usb_cdc_getc(); 
*
3128:  BRA    30E8
312A:  MOVFF  01,8F
....................     if (key!=0x00 && key!=0xFF) 
312E:  MOVF   x8F,F
3130:  BZ    3148
3132:  INCFSZ x8F,W
3134:  BRA    3138
3136:  BRA    3148
....................     { 
....................       output_toggle(LED); 
3138:  BCF    F94.2
313A:  BTG    F8B.2
....................       keypress=key; 
313C:  MOVFF  8F,82
....................       //printf ("\rUSB RX:%u->%c\r\n", key,key); 
....................       if (key==27) reset_cpu(); 
3140:  MOVF   x8F,W
3142:  SUBLW  1B
3144:  BTFSC  FD8.2
3146:  RESET
....................     } 
.................... } 
3148:  RETLW  00
....................  
.................... void barra(int valor) 
.................... { 
....................    float lectura; 
....................    int j, lec[25]; 
....................          lectura=valor; 
....................          lectura=lectura/10; 
....................          for (j=0; j<25; j++) if (j<=lectura) { lec[j]='O'; } else {lec[j]=' ';} 
....................          lec[24]='\0'; 
....................          printf (usb_cdc_putc, "%s | (%u)\r\n", lec, valor); 
.................... } 
....................  
.................... #inline 
.................... int leeradc(int canal) 
.................... { 
....................    set_adc_channel(canal); 
*
3528:  RLCF   xA5,W
352A:  MOVWF  00
352C:  RLCF   00,F
352E:  MOVLW  FC
3530:  ANDWF  00,F
3532:  MOVF   FC2,W
3534:  ANDLW  C3
3536:  IORWF  00,W
3538:  MOVWF  FC2
*
35EA:  RLCF   xA5,W
35EC:  MOVWF  00
35EE:  RLCF   00,F
35F0:  MOVLW  FC
35F2:  ANDWF  00,F
35F4:  MOVF   FC2,W
35F6:  ANDLW  C3
35F8:  IORWF  00,W
35FA:  MOVWF  FC2
*
36CC:  RLCF   xA5,W
36CE:  MOVWF  00
36D0:  RLCF   00,F
36D2:  MOVLW  FC
36D4:  ANDWF  00,F
36D6:  MOVF   FC2,W
36D8:  ANDLW  C3
36DA:  IORWF  00,W
36DC:  MOVWF  FC2
*
3790:  RLCF   xA5,W
3792:  MOVWF  00
3794:  RLCF   00,F
3796:  MOVLW  FC
3798:  ANDWF  00,F
379A:  MOVF   FC2,W
379C:  ANDLW  C3
379E:  IORWF  00,W
37A0:  MOVWF  FC2
*
3C08:  RLCF   xA5,W
3C0A:  MOVWF  00
3C0C:  RLCF   00,F
3C0E:  MOVLW  FC
3C10:  ANDWF  00,F
3C12:  MOVF   FC2,W
3C14:  ANDLW  C3
3C16:  IORWF  00,W
3C18:  MOVWF  FC2
*
3C2E:  RLCF   xA5,W
3C30:  MOVWF  00
3C32:  RLCF   00,F
3C34:  MOVLW  FC
3C36:  ANDWF  00,F
3C38:  MOVF   FC2,W
3C3A:  ANDLW  C3
3C3C:  IORWF  00,W
3C3E:  MOVWF  FC2
*
3EEA:  RLCF   xA5,W
3EEC:  MOVWF  00
3EEE:  RLCF   00,F
3EF0:  MOVLW  FC
3EF2:  ANDWF  00,F
3EF4:  MOVF   FC2,W
3EF6:  ANDLW  C3
3EF8:  IORWF  00,W
3EFA:  MOVWF  FC2
*
3F10:  RLCF   xA5,W
3F12:  MOVWF  00
3F14:  RLCF   00,F
3F16:  MOVLW  FC
3F18:  ANDWF  00,F
3F1A:  MOVF   FC2,W
3F1C:  ANDLW  C3
3F1E:  IORWF  00,W
3F20:  MOVWF  FC2
*
3F86:  RLCF   xA5,W
3F88:  MOVWF  00
3F8A:  RLCF   00,F
3F8C:  MOVLW  FC
3F8E:  ANDWF  00,F
3F90:  MOVF   FC2,W
3F92:  ANDLW  C3
3F94:  IORWF  00,W
3F96:  MOVWF  FC2
*
3FAE:  RLCF   xA5,W
3FB0:  MOVWF  00
3FB2:  RLCF   00,F
3FB4:  MOVLW  FC
3FB6:  ANDWF  00,F
3FB8:  MOVF   FC2,W
3FBA:  ANDLW  C3
3FBC:  IORWF  00,W
3FBE:  MOVWF  FC2
*
40EE:  RLCF   xA5,W
40F0:  MOVWF  00
40F2:  RLCF   00,F
40F4:  MOVLW  FC
40F6:  ANDWF  00,F
40F8:  MOVF   FC2,W
40FA:  ANDLW  C3
40FC:  IORWF  00,W
40FE:  MOVWF  FC2
....................    canal=read_adc(); 
*
353A:  BSF    FC2.1
353C:  BTFSC  FC2.1
353E:  BRA    353C
3540:  MOVFF  FC4,A5
*
35FC:  BSF    FC2.1
35FE:  BTFSC  FC2.1
3600:  BRA    35FE
3602:  MOVFF  FC4,A5
*
36DE:  BSF    FC2.1
36E0:  BTFSC  FC2.1
36E2:  BRA    36E0
36E4:  MOVFF  FC4,A5
*
37A2:  BSF    FC2.1
37A4:  BTFSC  FC2.1
37A6:  BRA    37A4
37A8:  MOVFF  FC4,A5
*
3C1A:  BSF    FC2.1
3C1C:  BTFSC  FC2.1
3C1E:  BRA    3C1C
3C20:  MOVFF  FC4,A5
*
3C40:  BSF    FC2.1
3C42:  BTFSC  FC2.1
3C44:  BRA    3C42
3C46:  MOVFF  FC4,A5
*
3EFC:  BSF    FC2.1
3EFE:  BTFSC  FC2.1
3F00:  BRA    3EFE
3F02:  MOVFF  FC4,A5
*
3F22:  BSF    FC2.1
3F24:  BTFSC  FC2.1
3F26:  BRA    3F24
3F28:  MOVFF  FC4,A5
*
3F98:  BSF    FC2.1
3F9A:  BTFSC  FC2.1
3F9C:  BRA    3F9A
3F9E:  MOVFF  FC4,A5
*
3FC0:  BSF    FC2.1
3FC2:  BTFSC  FC2.1
3FC4:  BRA    3FC2
3FC6:  MOVFF  FC4,A5
*
4100:  BSF    FC2.1
4102:  BTFSC  FC2.1
4104:  BRA    4102
4106:  MOVFF  FC4,A5
....................    return canal; 
*
3544:  MOVFF  A5,01
*
3606:  MOVFF  A5,01
*
36E8:  MOVFF  A5,01
*
37AC:  MOVFF  A5,01
*
3C24:  MOVFF  A5,01
*
3C4A:  MOVFF  A5,01
*
3F06:  MOVFF  A5,01
*
3F2C:  MOVFF  A5,01
*
3FA2:  MOVFF  A5,01
*
3FCA:  MOVFF  A5,01
*
410A:  MOVFF  A5,01
.................... } 
....................  
....................  
.................... #include <../lib/ldr.h> 
.................... #define ldr 1 
.................... #define LDR_I 1 
.................... #define LDR_D 0 
....................  
.................... void ldr_configurar() 
.................... { 
....................    //Configuramos el ADC 
....................    //Todas las entradas analogicas activas y rango 0-Vdd 
....................    setup_adc_ports( AN0_TO_AN1_ANALOG|VSS_VDD ); 
*
3424:  MOVF   FC1,W
3426:  ANDLW  C0
3428:  IORLW  0D
342A:  MOVWF  FC1
....................    //Reloj interno 
....................    setup_adc(ADC_CLOCK_INTERNAL ); 
342C:  BSF    FC0.0
342E:  BSF    FC0.1
3430:  BSF    FC0.2
3432:  BCF    FC0.7
3434:  BSF    FC2.0
....................    printf("-ADC\r\n"); 
3436:  CLRF   xA5
3438:  MOVF   xA5,W
343A:  CALL   1C60
343E:  INCF   xA5,F
3440:  MOVWF  00
3442:  MOVF   00,W
3444:  BTFSS  F9E.4
3446:  BRA    3444
3448:  MOVWF  FAD
344A:  MOVLW  06
344C:  SUBWF  xA5,W
344E:  BNZ   3438
....................    printf("-LDRs configuradas\r\n"); 
3450:  CLRF   xA5
3452:  MOVF   xA5,W
3454:  CALL   1C82
3458:  INCF   xA5,F
345A:  MOVWF  00
345C:  MOVF   00,W
345E:  BTFSS  F9E.4
3460:  BRA    345E
3462:  MOVWF  FAD
3464:  MOVLW  14
3466:  SUBWF  xA5,W
3468:  BNZ   3452
.................... } 
346A:  RETLW  00
....................  
.................... void ldr_comprobar() 
.................... { 
....................    printf (usb_cdc_putc, "Comprobando sensores LDR...\r\n"); 
....................    printf (usb_cdc_putc, "Configurando...\r\n"); 
....................    ldr_configurar(); 
....................    printf (usb_cdc_putc, "\tSensor derecho:\r\n"); 
....................    while (!usb_cdc_kbhit()) 
....................    { 
....................  
....................       barra(leeradc(LDR_D)); 
....................       delay_ms(250); 
....................    } 
....................    usb_cdc_getc(); 
....................    printf (usb_cdc_putc, "\r\n"); 
....................    printf (usb_cdc_putc, "\tSensor izquierdo:\r\n"); 
....................    while (!usb_cdc_kbhit()) 
....................    { 
....................  
....................       barra(leeradc(LDR_I)); 
....................       delay_ms(250); 
....................    } 
....................    usb_cdc_getc(); 
....................    printf (usb_cdc_putc, "\r\n"); 
.................... } 
....................  
.................... #include <../lib/cny70.h> 
.................... #define cny70 1 
.................... #define CNY_I 2 
.................... #define CNY_D 3 
....................  
....................  
.................... void cny70_configurar() 
.................... { 
....................    //Configuramos el ADC 
....................    //Todas las entradas analogicas activas y rango 0-Vdd 
....................    setup_adc_ports( ALL_ANALOG|VSS_VDD ); 
....................    //Reloj interno 
....................    setup_adc(ADC_CLOCK_INTERNAL ); 
....................    printf("-ADC\r\n"); 
....................  
....................    printf("-CNY70 configurado\r\n"); 
.................... } 
....................  
.................... #include <../lib/bumper.h> 
.................... #define bumper 1 
.................... #define BUMPER_I PIN_A2 
.................... #define BUMPER_D PIN_A3 
....................  
.................... void bumpers_comprobar() 
.................... { 
....................    int c; 
....................    printf (usb_cdc_putc, "Comprobando bumpers...\r\n"); 
....................    while (1) 
....................    { 
....................       usb_task(); 
....................       if (usb_cdc_kbhit()) 
....................       { 
....................          c=usb_cdc_getc(); 
....................          printf(usb_cdc_putc, "%c\r\n",c); 
....................          if (c==27) return; 
....................       } 
....................       printf (usb_cdc_putc, "Bumper izquierdo: %d Bumper derecho: %d\r\n", input(BUMPER_I), input(BUMPER_D)); 
....................       delay_ms(100); 
....................    } 
.................... } 
....................  
.................... #include <../lib/flex_lcd.c> 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... //#define LCD_DB4   PIN_B4 
.................... //#define LCD_DB5   PIN_B5 
.................... //#define LCD_DB6   PIN_B6 
.................... //#define LCD_DB7   PIN_B7 
.................... // 
.................... //#define LCD_RS    PIN_C0 
.................... //#define LCD_RW    PIN_C1 
.................... //#define LCD_E     PIN_C2 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
.................... #define lcd 1 
.................... #define LCD_DB4 PIN_B5 
.................... #define LCD_DB5 PIN_B4 
.................... #define LCD_DB6 PIN_B3 
.................... #define LCD_DB7 PIN_B2 
....................  
.................... #define LCD_RS PIN_B7 
.................... #define LCD_E PIN_B6 
.................... //#define LCD_RW PIN_A2 
.................... //#define USE_LCD_RW   1 
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
.................... //======================================== 
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................   0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................   0xc, // Display on 
....................   1, // Clear display 
....................   6 // Increment cursor 
.................... }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
....................   // Note: !! converts an integer expression 
....................   // to a boolean (1 or 0). 
....................   output_bit(LCD_DB4, !!(nibble & 1)); 
*
2FE4:  BTFSC  xAF.0
2FE6:  BRA    2FEC
2FE8:  BCF    F8A.5
2FEA:  BRA    2FEE
2FEC:  BSF    F8A.5
2FEE:  BCF    F93.5
....................   output_bit(LCD_DB5, !!(nibble & 2)); 
2FF0:  BTFSC  xAF.1
2FF2:  BRA    2FF8
2FF4:  BCF    F8A.4
2FF6:  BRA    2FFA
2FF8:  BSF    F8A.4
2FFA:  BCF    F93.4
....................   output_bit(LCD_DB6, !!(nibble & 4)); 
2FFC:  BTFSC  xAF.2
2FFE:  BRA    3004
3000:  BCF    F8A.3
3002:  BRA    3006
3004:  BSF    F8A.3
3006:  BCF    F93.3
....................   output_bit(LCD_DB7, !!(nibble & 8)); 
3008:  BTFSC  xAF.3
300A:  BRA    3010
300C:  BCF    F8A.2
300E:  BRA    3012
3010:  BSF    F8A.2
3012:  BCF    F93.2
....................  
....................   delay_us(1); 
3014:  MOVLW  03
3016:  MOVWF  00
3018:  DECFSZ 00,F
301A:  BRA    3018
301C:  BRA    301E
....................   output_high(LCD_E); 
301E:  BCF    F93.6
3020:  BSF    F8A.6
....................   delay_us(2); 
3022:  MOVLW  07
3024:  MOVWF  00
3026:  DECFSZ 00,F
3028:  BRA    3026
302A:  BRA    302C
....................   output_low(LCD_E); 
302C:  BCF    F93.6
302E:  BCF    F8A.6
.................... } 
3030:  RETLW  00
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine. For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
....................   int8 retval; 
....................   // Create bit variables so that we can easily set 
....................   // individual bits in the retval variable. 
....................   #bit retval_0 = retval.0 
....................   #bit retval_1 = retval.1 
....................   #bit retval_2 = retval.2 
....................   #bit retval_3 = retval.3 
....................  
....................   retval = 0; 
....................  
....................   output_high(LCD_E); 
....................   delay_us(1); 
....................  
....................   retval_0 = input(LCD_DB4); 
....................   retval_1 = input(LCD_DB5); 
....................   retval_2 = input(LCD_DB6); 
....................   retval_3 = input(LCD_DB7); 
....................  
....................   output_low(LCD_E); 
....................  
....................   return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
....................   int8 low; 
....................   int8 high; 
....................  
....................   output_high(LCD_RW); 
....................   delay_cycles(1); 
....................  
....................   high = lcd_read_nibble(); 
....................  
....................   low = lcd_read_nibble(); 
....................  
....................   return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
....................   output_low(LCD_RS); 
3032:  BCF    F93.7
3034:  BCF    F8A.7
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
3036:  MOVLW  EF
3038:  MOVWF  00
303A:  DECFSZ 00,F
303C:  BRA    303A
303E:  BRA    3040
.................... #endif 
....................  
....................   if(address) 
3040:  MOVF   xAC,F
3042:  BZ    304A
....................   output_high(LCD_RS); 
3044:  BCF    F93.7
3046:  BSF    F8A.7
....................   else 
3048:  BRA    304E
....................   output_low(LCD_RS); 
304A:  BCF    F93.7
304C:  BCF    F8A.7
....................  
....................   delay_cycles(1); 
304E:  NOP   
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
....................   output_low(LCD_E); 
3050:  BCF    F93.6
3052:  BCF    F8A.6
....................  
....................   lcd_send_nibble(n >> 4); 
3054:  SWAPF  xAD,W
3056:  MOVWF  xAE
3058:  MOVLW  0F
305A:  ANDWF  xAE,F
305C:  MOVFF  AE,AF
3060:  RCALL  2FE4
....................   lcd_send_nibble(n & 0xf); 
3062:  MOVF   xAD,W
3064:  ANDLW  0F
3066:  MOVWF  xAE
3068:  MOVWF  xAF
306A:  RCALL  2FE4
.................... } 
306C:  RETLW  00
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
....................   int8 i; 
....................  
....................   output_low(LCD_RS); 
306E:  BCF    F93.7
3070:  BCF    F8A.7
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
....................   output_low(LCD_E); 
3072:  BCF    F93.6
3074:  BCF    F8A.6
....................  
....................   delay_ms(15); 
3076:  MOVLW  0F
3078:  MOVWF  xA8
307A:  RCALL  2D3A
....................  
....................   for(i=0 ;i < 3; i++) 
307C:  CLRF   x8F
307E:  MOVF   x8F,W
3080:  SUBLW  02
3082:  BNC   3094
....................   { 
....................     lcd_send_nibble(0x03); 
3084:  MOVLW  03
3086:  MOVWF  xAF
3088:  RCALL  2FE4
....................     delay_ms(5); 
308A:  MOVLW  05
308C:  MOVWF  xA8
308E:  RCALL  2D3A
....................   } 
3090:  INCF   x8F,F
3092:  BRA    307E
....................  
....................   lcd_send_nibble(0x02); 
3094:  MOVLW  02
3096:  MOVWF  xAF
3098:  RCALL  2FE4
....................  
....................   for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
309A:  CLRF   x8F
309C:  MOVF   x8F,W
309E:  SUBLW  03
30A0:  BNC   30C6
....................   { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
30A2:  CLRF   03
30A4:  MOVF   x8F,W
30A6:  MOVFF  FF2,90
30AA:  BCF    FF2.7
30AC:  CALL   1CB2
30B0:  BTFSC  x90.7
30B2:  BSF    FF2.7
30B4:  MOVWF  x91
30B6:  CLRF   xAC
30B8:  MOVWF  xAD
30BA:  RCALL  3032
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled. One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
.................... #ifndef USE_LCD_RW 
.................... delay_ms(5); 
30BC:  MOVLW  05
30BE:  MOVWF  xA8
30C0:  RCALL  2D3A
.................... #endif 
.................... } 
30C2:  INCF   x8F,F
30C4:  BRA    309C
....................  
.................... } 
30C6:  RETLW  00
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
....................   int8 address; 
....................  
....................   if(y != 1) 
*
33BE:  DECFSZ xA9,W
33C0:  BRA    33C4
33C2:  BRA    33CA
....................   address = lcd_line_two; 
33C4:  MOVLW  40
33C6:  MOVWF  xAA
....................   else 
33C8:  BRA    33CC
....................   address=0; 
33CA:  CLRF   xAA
....................  
....................   address += x-1; 
33CC:  MOVLW  01
33CE:  SUBWF  xA8,W
33D0:  ADDWF  xAA,F
....................   lcd_send_byte(0, 0x80 | address); 
33D2:  MOVF   xAA,W
33D4:  IORLW  80
33D6:  MOVWF  xAB
33D8:  CLRF   xAC
33DA:  MOVWF  xAD
33DC:  RCALL  3032
.................... } 
33DE:  RETLW  00
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................   switch(c) 
....................   { 
33E0:  MOVF   xA7,W
33E2:  XORLW  0C
33E4:  BZ    33F0
33E6:  XORLW  01
33E8:  BZ    3400
33EA:  XORLW  05
33EC:  BZ    340C
33EE:  BRA    3416
....................     case '\f': 
....................       lcd_send_byte(0,1); 
33F0:  CLRF   xAC
33F2:  MOVLW  01
33F4:  MOVWF  xAD
33F6:  RCALL  3032
....................       delay_ms(2); 
33F8:  MOVLW  02
33FA:  MOVWF  xA8
33FC:  RCALL  2D3A
....................       break; 
33FE:  BRA    3422
....................  
....................     case 0x0d: 
....................       lcd_gotoxy(1,2); 
3400:  MOVLW  01
3402:  MOVWF  xA8
3404:  MOVLW  02
3406:  MOVWF  xA9
3408:  RCALL  33BE
....................       break; 
340A:  BRA    3422
....................  
....................     case '\b': 
....................       lcd_send_byte(0,0x10); 
340C:  CLRF   xAC
340E:  MOVLW  10
3410:  MOVWF  xAD
3412:  RCALL  3032
....................       break; 
3414:  BRA    3422
....................  
....................     default: 
....................       lcd_send_byte(1,c); 
3416:  MOVLW  01
3418:  MOVWF  xAC
341A:  MOVFF  A7,AD
341E:  RCALL  3032
....................       break; 
3420:  BRA    3422
....................   } 
.................... } 
3422:  RETLW  00
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
....................   char value; 
....................  
....................   lcd_gotoxy(x,y); 
....................  
....................   // Wait until busy flag is low. 
....................   while(bit_test(lcd_read_byte(),7)); 
....................  
....................   output_high(LCD_RS); 
....................   value = lcd_read_byte(); 
....................   output_low(lcd_RS); 
....................  
....................   return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
*
30C8:  BCF    FD8.0
30CA:  RLCF   x8F,W
30CC:  IORLW  0C
30CE:  IORWF  x90,W
30D0:  MOVWF  x92
30D2:  CLRF   xAC
30D4:  MOVWF  xAD
30D6:  RCALL  3032
.................... } 
30D8:  GOTO   30E4 (RETURN)
....................  
.................... void lcd_configurar() 
.................... { 
....................    lcd_init(); lcd_setcursor_vb(0,0);    
30DC:  RCALL  306E
30DE:  CLRF   x8F
30E0:  CLRF   x90
30E2:  BRA    30C8
....................    //printf(lcd_putc, "Aure         LCD\r READY..."); 
....................    //printf ("-L.C.D.\r\n"); 
....................  
.................... } 
30E4:  GOTO   3ECE (RETURN)
....................  
....................  
.................... #include <../lib/motores.h> 
.................... #define motores 1 
.................... #define MIR PIN_D5 
.................... #define MIF PIN_D4 
.................... #define MDR PIN_D7 
.................... #define MDF PIN_D6 
....................  
.................... void motores_patras() 
.................... { 
....................       output_bit(MDF,1); 
*
2CA6:  BSF    F8C.6
2CA8:  BCF    F95.6
....................       output_bit(MDR,0); 
2CAA:  BCF    F8C.7
2CAC:  BCF    F95.7
....................       output_bit(MIF,1); 
2CAE:  BSF    F8C.4
2CB0:  BCF    F95.4
....................       output_bit(MIR,0); 
2CB2:  BCF    F8C.5
2CB4:  BCF    F95.5
.................... } 
2CB6:  RETLW  00
....................  
.................... void motores_palante() 
.................... { 
....................       output_bit(MDF,0); 
*
2C94:  BCF    F8C.6
2C96:  BCF    F95.6
....................       output_bit(MDR,1); 
2C98:  BSF    F8C.7
2C9A:  BCF    F95.7
....................       output_bit(MIF,0); 
2C9C:  BCF    F8C.4
2C9E:  BCF    F95.4
....................       output_bit(MIR,1); 
2CA0:  BSF    F8C.5
2CA2:  BCF    F95.5
.................... } 
2CA4:  RETLW  00
....................  
.................... void motores_paderecha() 
.................... { 
....................       output_bit(MDF,1); 
*
2CB8:  BSF    F8C.6
2CBA:  BCF    F95.6
....................       output_bit(MDR,0); 
2CBC:  BCF    F8C.7
2CBE:  BCF    F95.7
....................       output_bit(MIF,0); 
2CC0:  BCF    F8C.4
2CC2:  BCF    F95.4
....................       output_bit(MIR,1); 
2CC4:  BSF    F8C.5
2CC6:  BCF    F95.5
.................... } 
2CC8:  RETLW  00
....................  
.................... void motores_paizda() 
.................... { 
....................       output_bit(MDF,0); 
2CCA:  BCF    F8C.6
2CCC:  BCF    F95.6
....................       output_bit(MDR,1); 
2CCE:  BSF    F8C.7
2CD0:  BCF    F95.7
....................       output_bit(MIF,1); 
2CD2:  BSF    F8C.4
2CD4:  BCF    F95.4
....................       output_bit(MIR,0); 
2CD6:  BCF    F8C.5
2CD8:  BCF    F95.5
.................... } 
2CDA:  RETLW  00
....................  
.................... void motores_parar() 
.................... { 
....................       output_bit(MDF,0); 
*
2C82:  BCF    F8C.6
2C84:  BCF    F95.6
....................       output_bit(MDR,0); 
2C86:  BCF    F8C.7
2C88:  BCF    F95.7
....................       output_bit(MIF,0); 
2C8A:  BCF    F8C.4
2C8C:  BCF    F95.4
....................       output_bit(MIR,0); 
2C8E:  BCF    F8C.5
2C90:  BCF    F95.5
.................... } 
2C92:  RETLW  00
....................  
....................  
....................  
.................... void motores_comprobar() 
.................... { 
....................    printf (usb_cdc_putc, "Comprobando motores...\r\n"); 
....................    printf (usb_cdc_putc, "\tAdelante\r\n"); 
....................    motores_palante(); 
....................    delay_ms(2000); 
....................    printf (usb_cdc_putc, "\tAtras\r\n"); 
....................    motores_patras(); 
....................    delay_ms(2000); 
....................    printf (usb_cdc_putc, "\tDerecha\r\n"); 
....................    motores_paderecha(); 
....................    delay_ms(2000); 
....................    printf (usb_cdc_putc, "\tIzquierda\r\n"); 
....................    motores_paizda(); 
....................    delay_ms(2000); 
....................    printf (usb_cdc_putc, "Motores comprobados\r\n\r\n"); 
.................... } 
....................  
.................... int motores_cv_estado=0; 
.................... int motores_cv_velocidad=0; 
.................... int motores_cv_contador=0; 
....................     
.................... void motores_cv_off() 
.................... { 
....................    setup_timer_2 ( T2_DISABLED, 0xff, 16); 
....................    disable_interrupts(int_timer2); 
....................    printf (usb_cdc_putc, "-TIMER2 [OFF]\r\n"); 
....................    printf (usb_cdc_putc,"-Control de velocidad [OFF]\r\n"); 
.................... } 
....................  
.................... void motores_cv_configurar() 
.................... { 
....................    setup_timer_2 ( T2_DIV_BY_16, 0x50, 1); 
....................    enable_interrupts(int_timer2); 
....................    printf (usb_cdc_putc, "-TIMER2 [ON]\r\n"); 
....................    printf (usb_cdc_putc,"-Control de velocidad [ON]\r\n"); 
.................... } 
....................  
....................  
.................... #int_timer2 
.................... void motores_cv_int() 
.................... { 
....................    if (motores_cv_contador>motores_cv_velocidad)  
*
2CDC:  MOVF   x85,W
2CDE:  SUBWF  x84,W
2CE0:  BC    2CE4
....................    { 
.................... 		motores_parar(); 
2CE2:  RCALL  2C82
....................    } 
....................    if (motores_cv_contador>254)  
2CE4:  MOVF   x85,W
2CE6:  SUBLW  FE
2CE8:  BC    2D0E
....................    { 
....................       motores_cv_contador=0; 
2CEA:  CLRF   x85
....................       switch (motores_cv_estado)  
....................       { 
2CEC:  MOVF   x83,W
2CEE:  ADDLW  FB
2CF0:  BC    2D0C
2CF2:  ADDLW  05
2CF4:  GOTO   2D16
....................          case 1: 
....................             motores_palante(); 
2CF8:  RCALL  2C94
....................             break; 
2CFA:  BRA    2D0C
....................          case 2: 
....................             motores_patras(); 
2CFC:  RCALL  2CA6
....................             break; 
2CFE:  BRA    2D0C
....................          case 3: 
....................             motores_paderecha(); 
2D00:  RCALL  2CB8
....................             break; 
2D02:  BRA    2D0C
....................          case 4: 
....................             motores_paizda(); 
2D04:  RCALL  2CCA
....................             break; 
2D06:  BRA    2D0C
....................          case 0: 
....................             motores_parar(); 
2D08:  RCALL  2C82
....................             break; 
2D0A:  BRA    2D0C
....................       } 
....................    } else { 
2D0C:  BRA    2D10
.................... 		motores_cv_contador++; 
2D0E:  INCF   x85,F
....................    } 
.................... } 
....................  
2D10:  BCF    F9E.1
2D12:  GOTO   1870
.................... void motores_cv_palante(int velocidad) 
.................... { 
....................    motores_cv_velocidad=velocidad; 
*
321A:  MOVFF  8F,84
....................    motores_cv_estado=1; 
321E:  MOVLW  01
3220:  MOVWF  x83
.................... } 
3222:  GOTO   3338 (RETURN)
....................  
.................... void motores_cv_patras(int velocidad) 
.................... { 
....................    motores_cv_velocidad=velocidad; 
....................    motores_cv_estado=2; 
.................... } 
....................  
.................... void motores_cv_paderecha(int velocidad) 
.................... { 
....................    motores_cv_velocidad=velocidad; 
....................    motores_cv_estado=3; 
.................... } 
....................  
.................... void motores_cv_paizda(int velocidad) 
.................... { 
....................    motores_cv_velocidad=velocidad; 
....................    motores_cv_estado=4; 
.................... } 
....................  
.................... void motores_cv_parar() 
.................... { 
....................    motores_cv_velocidad=0; 
3226:  CLRF   x84
....................    motores_cv_estado=0; 
3228:  CLRF   x83
.................... } 
322A:  GOTO   3338 (RETURN)
....................  
.................... void motores_cv_cambiar_velocidad(int velocidad) 
.................... { 
....................    motores_cv_velocidad=velocidad; 
.................... } 
....................  
.................... void motores_cv_sum_velocidad(int velocidad) 
.................... { 
....................    if ((motores_cv_velocidad+velocidad)<255 && (motores_cv_velocidad+velocidad)>0) motores_cv_velocidad+=velocidad; 
*
31DA:  MOVF   x8F,W
31DC:  ADDWF  x84,W
31DE:  SUBLW  FF
31E0:  BZ    31EC
31E2:  MOVF   x8F,W
31E4:  ADDWF  x84,W
31E6:  BZ    31EC
31E8:  MOVF   x8F,W
31EA:  ADDWF  x84,F
....................    printf(usb_cdc_putc, "Vel: %u\r\n",  motores_cv_velocidad); 
31EC:  CLRF   x90
31EE:  MOVF   x90,W
31F0:  CALL   1CD0
31F4:  INCF   x90,F
31F6:  MOVWF  00
31F8:  MOVWF  x93
31FA:  RCALL  2E28
31FC:  MOVLW  05
31FE:  SUBWF  x90,W
3200:  BNZ   31EE
3202:  MOVFF  84,91
3206:  MOVLW  1B
3208:  MOVWF  x92
320A:  BRA    3172
320C:  MOVLW  0D
320E:  MOVWF  x93
3210:  RCALL  2E28
3212:  MOVLW  0A
3214:  MOVWF  x93
3216:  RCALL  2E28
.................... } 
3218:  RETLW  00
....................  
.................... #include <../lib/sonido.h> 
.................... #define sonido 1 
.................... //PIN del altavoz 
.................... #define altavoz PIN_C0 
....................  
.................... void sdsa() 
.................... { 
....................    int j=0; 
....................    for (j=0; j<255; j++) 
....................    { 
....................    output_low(altavoz); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(altavoz); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
....................  
....................    for (j=255; j>0; j--) 
....................    { 
....................    output_low(altavoz); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(altavoz); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
.................... } 
....................  
.................... void sonido_beep() 
.................... { 
....................    int j=0; 
*
387E:  CLRF   x90
....................    for (j=0; j<150; j++) 
3880:  CLRF   x90
3882:  MOVF   x90,W
3884:  SUBLW  95
3886:  BNC   38A0
....................    { 
....................       output_high(altavoz); 
3888:  BCF    F94.0
388A:  BSF    F8B.0
....................       delay_us(200); 
388C:  MOVLW  C8
388E:  MOVWF  x91
3890:  RCALL  385E
....................       output_low(altavoz); 
3892:  BCF    F94.0
3894:  BCF    F8B.0
....................       delay_us(200); 
3896:  MOVLW  C8
3898:  MOVWF  x91
389A:  RCALL  385E
....................    } 
389C:  INCF   x90,F
389E:  BRA    3882
....................  
.................... } 
38A0:  RETLW  00
.................... void sonido_dolordecabeza() 
.................... { 
....................    int j=0; 
....................    for (j=0; j<1000; j++) 
....................    { 
....................       output_high(altavoz); 
....................       delay_us(20); 
....................       output_low(altavoz); 
....................       delay_us(20); 
....................    } 
....................  
.................... } 
....................  
.................... void sonido_voipvoip() 
.................... { 
....................    int i=0,j=0; 
....................    for (i=0; i<2; i++) 
....................    { 
....................  
....................    for (j=255; j>0; j--) 
....................    { 
....................    output_low(altavoz); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(altavoz); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
....................     
....................    } 
.................... } 
....................  
.................... void sonido_sirena() 
.................... { 
....................    int i=0,j=0; 
....................    for (i=0; i<2; i++) 
....................    { 
....................  
....................    for (j=255; j>0; j--) 
....................    { 
....................    output_low(altavoz); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(altavoz); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
....................    for (j=0; j<255; j++) 
....................    { 
....................    output_low(altavoz); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(altavoz); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
....................  
....................    } 
.................... } 
....................  
....................  
.................... void sonido_laser() 
.................... { 
....................    int j=0; 
....................    for (j=440; j<1000; j++) 
....................    { 
....................       output_low(altavoz); 
....................       delay_us(j); 
....................       output_high(altavoz); 
....................       delay_us(j); 
....................    } 
.................... } 
....................  
.................... #include <../lib/2leds.h> 
.................... #define 2leds 1 
.................... #define LED_I PIN_A5 
.................... #define LED_D PIN_E0 
....................  
....................  
.................... void leds_configurar() 
.................... { 
....................    printf("-Configurando leds\r\n"); 
....................    set_tris_e(0xff); 
....................    output_high(LED_I); printf ("-Led izquierdo\r\n"); 
....................    output_high(LED_D); printf ("-Led derecho\r\n"); 
.................... } 
....................  
....................  
....................  
.................... #include <../lib/navegacion_luz.c> 
....................  
.................... void navegacion_luz() 
.................... { 
....................    int izq, der, ui, ud, j, lec[13]; 
....................    float lectura; 
....................    //printf (usb_cdc_putc, "Buscador de luz\r\n Deje el robot en reposo y pulse el botón.\r\n"); 
....................    while(input(PULSADOR)==1)   {} 
*
3BF0:  BSF    F92.4
3BF2:  BTFSS  F80.4
3BF4:  BRA    3BF8
3BF6:  BRA    3BF0
....................    ldr_configurar(); 
3BF8:  RCALL  3424
....................  
....................    while(input(PULSADOR)!=1) 
....................    { 
3BFA:  BSF    F92.4
3BFC:  BTFSC  F80.4
3BFE:  BRA    3E70
....................       usb_task(); 
3C00:  CALL   2DAC
....................       izq=leeradc(LDR_I); 
3C04:  MOVLW  01
3C06:  MOVWF  xA5
*
3C28:  MOVFF  01,8F
....................       der=leeradc(LDR_D); 
3C2C:  CLRF   xA5
*
3C4E:  MOVFF  01,90
....................       //printf(usb_cdc_putc, "DER->%03u;  IZQ->%03u\r",izq*10,der*10); 
....................       lcd_gotoxy(1,1); 
3C52:  MOVLW  01
3C54:  MOVWF  xA8
3C56:  MOVWF  xA9
3C58:  CALL   33BE
....................       lectura=izq; 
3C5C:  CLRF   xA6
3C5E:  MOVFF  8F,A5
3C62:  RCALL  39EA
3C64:  MOVFF  03,A4
3C68:  MOVFF  02,A3
3C6C:  MOVFF  01,A2
3C70:  MOVFF  00,A1
....................       lectura=lectura/22; 
3C74:  MOVFF  A4,A8
3C78:  MOVFF  A3,A7
3C7C:  MOVFF  A2,A6
3C80:  MOVFF  A1,A5
3C84:  CLRF   xAC
3C86:  CLRF   xAB
3C88:  MOVLW  30
3C8A:  MOVWF  xAA
3C8C:  MOVLW  83
3C8E:  MOVWF  xA9
3C90:  RCALL  3A20
3C92:  MOVFF  03,A4
3C96:  MOVFF  02,A3
3C9A:  MOVFF  01,A2
3C9E:  MOVFF  00,A1
....................       for (j=0; j<12; j++) if (j<=lectura) { lec[j]=219; } else {lec[j]='-';} 
3CA2:  CLRF   x93
3CA4:  MOVF   x93,W
3CA6:  SUBLW  0B
3CA8:  BNC   3D02
3CAA:  CLRF   xA6
3CAC:  MOVFF  93,A5
3CB0:  RCALL  39EA
3CB2:  MOVFF  03,A8
3CB6:  MOVFF  02,A7
3CBA:  MOVFF  01,A6
3CBE:  MOVFF  00,A5
3CC2:  MOVFF  A4,AC
3CC6:  MOVFF  A3,AB
3CCA:  MOVFF  A2,AA
3CCE:  MOVFF  A1,A9
3CD2:  RCALL  3B7A
3CD4:  BC    3CD8
3CD6:  BNZ   3CEC
3CD8:  CLRF   03
3CDA:  MOVF   x93,W
3CDC:  ADDLW  94
3CDE:  MOVWF  FE9
3CE0:  MOVLW  00
3CE2:  ADDWFC 03,W
3CE4:  MOVWF  FEA
3CE6:  MOVLW  DB
3CE8:  MOVWF  FEF
3CEA:  BRA    3CFE
3CEC:  CLRF   03
3CEE:  MOVF   x93,W
3CF0:  ADDLW  94
3CF2:  MOVWF  FE9
3CF4:  MOVLW  00
3CF6:  ADDWFC 03,W
3CF8:  MOVWF  FEA
3CFA:  MOVLW  2D
3CFC:  MOVWF  FEF
3CFE:  INCF   x93,F
3D00:  BRA    3CA4
....................       lec[12]='\0'; 
3D02:  CLRF   xA0
....................       printf (lcd_putc, "%03u|%s\r", izq, lec); 
3D04:  MOVFF  8F,A5
3D08:  MOVLW  03
3D0A:  MOVWF  xA6
3D0C:  CALL   34AE
3D10:  MOVLW  7C
3D12:  MOVWF  xA7
3D14:  CALL   33E0
3D18:  CLRF   FEA
3D1A:  MOVLW  94
3D1C:  MOVWF  FE9
3D1E:  MOVLW  00
3D20:  IORWF  FEF,W
3D22:  BZ    3D44
3D24:  MOVFF  FEA,A6
3D28:  MOVFF  FE9,A5
3D2C:  MOVFF  FEF,A7
3D30:  CALL   33E0
3D34:  MOVFF  A6,FEA
3D38:  MOVFF  A5,FE9
3D3C:  INCF   FE9,F
3D3E:  BTFSC  FD8.2
3D40:  INCF   FEA,F
3D42:  BRA    3D1E
3D44:  MOVLW  0D
3D46:  MOVWF  xA7
3D48:  CALL   33E0
....................       lectura=der; 
3D4C:  CLRF   xA6
3D4E:  MOVFF  90,A5
3D52:  RCALL  39EA
3D54:  MOVFF  03,A4
3D58:  MOVFF  02,A3
3D5C:  MOVFF  01,A2
3D60:  MOVFF  00,A1
....................       lectura=lectura/22; 
3D64:  MOVFF  A4,A8
3D68:  MOVFF  A3,A7
3D6C:  MOVFF  A2,A6
3D70:  MOVFF  A1,A5
3D74:  CLRF   xAC
3D76:  CLRF   xAB
3D78:  MOVLW  30
3D7A:  MOVWF  xAA
3D7C:  MOVLW  83
3D7E:  MOVWF  xA9
3D80:  RCALL  3A20
3D82:  MOVFF  03,A4
3D86:  MOVFF  02,A3
3D8A:  MOVFF  01,A2
3D8E:  MOVFF  00,A1
....................       for (j=0; j<12; j++) if (j<=lectura) { lec[j]=219; } else {lec[j]='-';} 
3D92:  CLRF   x93
3D94:  MOVF   x93,W
3D96:  SUBLW  0B
3D98:  BNC   3DF2
3D9A:  CLRF   xA6
3D9C:  MOVFF  93,A5
3DA0:  RCALL  39EA
3DA2:  MOVFF  03,A8
3DA6:  MOVFF  02,A7
3DAA:  MOVFF  01,A6
3DAE:  MOVFF  00,A5
3DB2:  MOVFF  A4,AC
3DB6:  MOVFF  A3,AB
3DBA:  MOVFF  A2,AA
3DBE:  MOVFF  A1,A9
3DC2:  RCALL  3B7A
3DC4:  BC    3DC8
3DC6:  BNZ   3DDC
3DC8:  CLRF   03
3DCA:  MOVF   x93,W
3DCC:  ADDLW  94
3DCE:  MOVWF  FE9
3DD0:  MOVLW  00
3DD2:  ADDWFC 03,W
3DD4:  MOVWF  FEA
3DD6:  MOVLW  DB
3DD8:  MOVWF  FEF
3DDA:  BRA    3DEE
3DDC:  CLRF   03
3DDE:  MOVF   x93,W
3DE0:  ADDLW  94
3DE2:  MOVWF  FE9
3DE4:  MOVLW  00
3DE6:  ADDWFC 03,W
3DE8:  MOVWF  FEA
3DEA:  MOVLW  2D
3DEC:  MOVWF  FEF
3DEE:  INCF   x93,F
3DF0:  BRA    3D94
....................       lec[12]='\0'; 
3DF2:  CLRF   xA0
....................       printf (lcd_putc, "%03u|%s\r", der, lec); 
3DF4:  MOVFF  90,A5
3DF8:  MOVLW  03
3DFA:  MOVWF  xA6
3DFC:  CALL   34AE
3E00:  MOVLW  7C
3E02:  MOVWF  xA7
3E04:  CALL   33E0
3E08:  CLRF   FEA
3E0A:  MOVLW  94
3E0C:  MOVWF  FE9
3E0E:  MOVLW  00
3E10:  IORWF  FEF,W
3E12:  BZ    3E34
3E14:  MOVFF  FEA,A6
3E18:  MOVFF  FE9,A5
3E1C:  MOVFF  FEF,A7
3E20:  CALL   33E0
3E24:  MOVFF  A6,FEA
3E28:  MOVFF  A5,FE9
3E2C:  INCF   FE9,F
3E2E:  BTFSC  FD8.2
3E30:  INCF   FEA,F
3E32:  BRA    3E0E
3E34:  MOVLW  0D
3E36:  MOVWF  xA7
3E38:  CALL   33E0
....................   
....................       if (abs((izq)-(der))>25) 
3E3C:  MOVF   x90,W
3E3E:  SUBWF  x8F,W
3E40:  MOVWF  xA5
3E42:  MOVF   xA5,W
3E44:  SUBLW  19
3E46:  BC    3E62
....................       { 
....................          if ((izq)>(der)) 
3E48:  MOVF   x8F,W
3E4A:  SUBWF  x90,W
3E4C:  BC    3E58
....................          { 
....................             encender(LED_I); 
3E4E:  BCF    F92.5
3E50:  BSF    F89.5
....................             motores_paderecha(); 
3E52:  CALL   2CB8
....................          } else { 
3E56:  BRA    3E60
....................             encender(LED_D); 
3E58:  BCF    F96.0
3E5A:  BSF    F8D.0
....................             motores_paizda(); 
3E5C:  CALL   2CCA
....................  
....................          } 
....................       } else { 
3E60:  BRA    3E6E
....................          apagar(LED_I); 
3E62:  BCF    F92.5
3E64:  BCF    F89.5
....................          apagar(LED_D); 
3E66:  BCF    F96.0
3E68:  BCF    F8D.0
....................          motores_palante(); 
3E6A:  CALL   2C94
....................       } 
....................    } 
3E6E:  BRA    3BFA
....................    motores_parar(); 
3E70:  CALL   2C82
.................... } 
3E74:  GOTO   43FE (RETURN)
....................  
.................... #include <../lib/navegacion_bumpers.c> 
....................  
....................  
.................... void navegacion_bumpers() 
.................... { 
....................    int j; 
....................    lcd_gotoxy(1,1); 
*
38A2:  MOVLW  01
38A4:  MOVWF  xA8
38A6:  MOVWF  xA9
38A8:  RCALL  33BE
....................    printf (lcd_putc, "Navega. autonoma"); 
38AA:  CLRF   x90
38AC:  MOVF   x90,W
38AE:  CALL   1CF4
38B2:  INCF   x90,F
38B4:  MOVWF  00
38B6:  MOVWF  xA7
38B8:  RCALL  33E0
38BA:  MOVLW  10
38BC:  SUBWF  x90,W
38BE:  BNZ   38AC
....................    for (j=0; j<10; j++) 
38C0:  CLRF   x8F
38C2:  MOVF   x8F,W
38C4:  SUBLW  09
38C6:  BNC   38D6
....................    { 
....................       sonido_beep(); 
38C8:  RCALL  387E
....................       delay_ms(100); 
38CA:  MOVLW  64
38CC:  MOVWF  xA8
38CE:  CALL   2D3A
....................    } 
38D2:  INCF   x8F,F
38D4:  BRA    38C2
....................    while (input(pulsador)==1){} 
38D6:  BSF    F92.4
38D8:  BTFSS  F80.4
38DA:  BRA    38DE
38DC:  BRA    38D6
....................    while (input(pulsador)!=1) 
....................    { 
38DE:  BSF    F92.4
38E0:  BTFSC  F80.4
38E2:  BRA    39DA
....................       lcd_gotoxy(1,2); 
38E4:  MOVLW  01
38E6:  MOVWF  xA8
38E8:  MOVLW  02
38EA:  MOVWF  xA9
38EC:  RCALL  33BE
....................       printf (lcd_putc, "***!Adelante!***"); 
38EE:  CLRF   x90
38F0:  MOVF   x90,W
38F2:  CALL   1D20
38F6:  INCF   x90,F
38F8:  MOVWF  00
38FA:  MOVWF  xA7
38FC:  RCALL  33E0
38FE:  MOVLW  10
3900:  SUBWF  x90,W
3902:  BNZ   38F0
....................       encender(LED_I); 
3904:  BCF    F92.5
3906:  BSF    F89.5
....................       encender(LED_D); 
3908:  BCF    F96.0
390A:  BSF    F8D.0
....................       usb_task(); 
390C:  CALL   2DAC
....................       motores_palante(); 
3910:  CALL   2C94
....................       if (input(bumper_i)) 
3914:  BSF    F92.2
3916:  BTFSS  F80.2
3918:  BRA    3976
....................       { 
....................          lcd_gotoxy(1,2); 
391A:  MOVLW  01
391C:  MOVWF  xA8
391E:  MOVLW  02
3920:  MOVWF  xA9
3922:  RCALL  33BE
....................          printf (lcd_putc, "!Ups!obstac.izda"); 
3924:  CLRF   x90
3926:  MOVF   x90,W
3928:  CALL   1D4C
392C:  INCF   x90,F
392E:  MOVWF  00
3930:  MOVWF  xA7
3932:  RCALL  33E0
3934:  MOVLW  10
3936:  SUBWF  x90,W
3938:  BNZ   3926
....................          apagar(LED_I); 
393A:  BCF    F92.5
393C:  BCF    F89.5
....................          motores_parar(); 
393E:  CALL   2C82
....................          sonido_beep(); 
3942:  RCALL  387E
....................          delay_ms(100); 
3944:  MOVLW  64
3946:  MOVWF  xA8
3948:  CALL   2D3A
....................          sonido_beep(); 
394C:  RCALL  387E
....................          motores_patras(); 
394E:  CALL   2CA6
....................          delay_ms(300); 
3952:  MOVLW  02
3954:  MOVWF  x90
3956:  MOVLW  96
3958:  MOVWF  xA8
395A:  CALL   2D3A
395E:  DECFSZ x90,F
3960:  BRA    3956
....................          motores_paderecha(); 
3962:  CALL   2CB8
....................          delay_ms(300); 
3966:  MOVLW  02
3968:  MOVWF  x90
396A:  MOVLW  96
396C:  MOVWF  xA8
396E:  CALL   2D3A
3972:  DECFSZ x90,F
3974:  BRA    396A
....................       } 
....................       if (input(bumper_d)) 
3976:  BSF    F92.3
3978:  BTFSS  F80.3
397A:  BRA    39D8
....................       { 
....................          lcd_gotoxy(1,2); 
397C:  MOVLW  01
397E:  MOVWF  xA8
3980:  MOVLW  02
3982:  MOVWF  xA9
3984:  RCALL  33BE
....................          printf (lcd_putc, "!Ups!obstac.dcha"); 
3986:  CLRF   x90
3988:  MOVF   x90,W
398A:  CALL   1D78
398E:  INCF   x90,F
3990:  MOVWF  00
3992:  MOVWF  xA7
3994:  RCALL  33E0
3996:  MOVLW  10
3998:  SUBWF  x90,W
399A:  BNZ   3988
....................          apagar(LED_D); 
399C:  BCF    F96.0
399E:  BCF    F8D.0
....................          motores_parar(); 
39A0:  CALL   2C82
....................          sonido_beep(); 
39A4:  RCALL  387E
....................          delay_ms(100); 
39A6:  MOVLW  64
39A8:  MOVWF  xA8
39AA:  CALL   2D3A
....................          sonido_beep();          
39AE:  RCALL  387E
....................          motores_patras(); 
39B0:  CALL   2CA6
....................          delay_ms(300); 
39B4:  MOVLW  02
39B6:  MOVWF  x90
39B8:  MOVLW  96
39BA:  MOVWF  xA8
39BC:  CALL   2D3A
39C0:  DECFSZ x90,F
39C2:  BRA    39B8
....................          motores_paizda(); 
39C4:  CALL   2CCA
....................          delay_ms(300); 
39C8:  MOVLW  02
39CA:  MOVWF  x90
39CC:  MOVLW  96
39CE:  MOVWF  xA8
39D0:  CALL   2D3A
39D4:  DECFSZ x90,F
39D6:  BRA    39CC
....................       }          
....................    } 
39D8:  BRA    38DE
....................    motores_parar(); 
39DA:  CALL   2C82
....................     while (input(pulsador)==1){} 
39DE:  BSF    F92.4
39E0:  BTFSS  F80.4
39E2:  BRA    39E6
39E4:  BRA    39DE
.................... } 
39E6:  GOTO   4380 (RETURN)
....................  
....................  
.................... int prueba_pilas=0, enviar_ldr=0, enviar_cny=0, enviar_pulsadores=0, enviar_analog=0, enviar_dig=0; 
....................  
....................  
....................  
.................... // Rutina de gestión de pulsaciones serie 
.................... void aure_serie() 
.................... { 
....................    output_toggle(LED); 
*
322E:  BCF    F94.2
3230:  BTG    F8B.2
....................    switch(keypress) 
....................    { 
3232:  MOVF   x82,W
3234:  XORLW  31
3236:  BZ    3282
3238:  XORLW  03
323A:  BZ    3290
323C:  XORLW  01
323E:  BZ    329E
3240:  XORLW  07
3242:  BZ    32AC
3244:  XORLW  01
3246:  BZ    32BA
3248:  XORLW  03
324A:  BZ    32C8
324C:  XORLW  41
324E:  BZ    32D6
3250:  XORLW  04
3252:  BZ    32DA
3254:  XORLW  17
3256:  BZ    32DE
3258:  XORLW  05
325A:  BZ    32E2
325C:  XORLW  10
325E:  BZ    32E6
3260:  XORLW  1F
3262:  BZ    32EA
3264:  XORLW  03
3266:  BZ    32F0
3268:  XORLW  17
326A:  BZ    32F6
326C:  XORLW  02
326E:  BZ    32F8
3270:  XORLW  1E
3272:  BZ    32FA
3274:  XORLW  01
3276:  BZ    3302
3278:  XORLW  0C
327A:  BZ    330A
327C:  XORLW  07
327E:  BZ    3310
3280:  BRA    3312
.................... //Control de sensores 
....................          case '1': 
....................             if (enviar_ldr==1) { enviar_ldr=0; } else{ enviar_ldr=1;} 
3282:  DECFSZ x87,W
3284:  BRA    328A
3286:  CLRF   x87
3288:  BRA    328E
328A:  MOVLW  01
328C:  MOVWF  x87
....................             break; 
328E:  BRA    3338
....................          case '2': 
....................             if (enviar_cny==1) { enviar_cny=0; } else{ enviar_cny=1;} 
3290:  DECFSZ x88,W
3292:  BRA    3298
3294:  CLRF   x88
3296:  BRA    329C
3298:  MOVLW  01
329A:  MOVWF  x88
....................             break; 
329C:  BRA    3338
....................          case '3': 
....................             if (enviar_pulsadores==1) { enviar_pulsadores=0; } else{ enviar_pulsadores=1;} 
329E:  DECFSZ x89,W
32A0:  BRA    32A6
32A2:  CLRF   x89
32A4:  BRA    32AA
32A6:  MOVLW  01
32A8:  MOVWF  x89
....................             break; 
32AA:  BRA    3338
....................          case '4': 
....................             if (enviar_analog==1) { enviar_analog=0; } else{ enviar_analog=1;} 
32AC:  DECFSZ x8A,W
32AE:  BRA    32B4
32B0:  CLRF   x8A
32B2:  BRA    32B8
32B4:  MOVLW  01
32B6:  MOVWF  x8A
....................             break; 
32B8:  BRA    3338
....................          case '5': 
....................             if (enviar_dig==1) { enviar_dig=0; } else{ enviar_dig=1;} 
32BA:  DECFSZ x8B,W
32BC:  BRA    32C2
32BE:  CLRF   x8B
32C0:  BRA    32C6
32C2:  MOVLW  01
32C4:  MOVWF  x8B
....................             break; 
32C6:  BRA    3338
....................          case '6': 
....................             if (prueba_pilas==1) { prueba_pilas=0; } else{ prueba_pilas=1;} 
32C8:  DECFSZ x86,W
32CA:  BRA    32D0
32CC:  CLRF   x86
32CE:  BRA    32D4
32D0:  MOVLW  01
32D2:  MOVWF  x86
....................             break; 
32D4:  BRA    3338
.................... //Control de movimiento 
....................             case 'w': 
....................                motores_palante(); 
32D6:  RCALL  2C94
....................                break; 
32D8:  BRA    3338
....................             case 's': 
....................                motores_patras(); 
32DA:  RCALL  2CA6
....................                break; 
32DC:  BRA    3338
....................             case 'd': 
....................                motores_paderecha(); 
32DE:  RCALL  2CB8
....................                break; 
32E0:  BRA    3338
....................             case 'a': 
....................                motores_paizda(); 
32E2:  RCALL  2CCA
....................                break; 
32E4:  BRA    3338
....................             case 'q': 
....................                motores_parar(); 
32E6:  RCALL  2C82
....................                break; 
32E8:  BRA    3338
.................... //Control de leds 
....................             case 'n': 
....................             output_toggle(LED_I); 
32EA:  BCF    F92.5
32EC:  BTG    F89.5
....................             break; 
32EE:  BRA    3338
....................             case 'm': 
....................             output_toggle(LED_D); 
32F0:  BCF    F96.0
32F2:  BTG    F8D.0
....................             break; 
32F4:  BRA    3338
.................... // Funciones 
....................          case 'z': 
....................             //modo_buscaluz(); 
....................             break; 
32F6:  BRA    3338
....................         case 'x': 
....................             //navegacion_auto(); 
....................             break; 
32F8:  BRA    3338
....................          case 'f': 
....................             motores_cv_sum_velocidad(-5); 
32FA:  MOVLW  FB
32FC:  MOVWF  x8F
32FE:  RCALL  31DA
....................             break; 
3300:  BRA    3338
....................          case 'g': 
....................             motores_cv_sum_velocidad(5); 
3302:  MOVLW  05
3304:  MOVWF  x8F
3306:  RCALL  31DA
....................             break; 
3308:  BRA    3338
....................          case 'k': 
....................             motores_cv_palante(200); 
330A:  MOVLW  C8
330C:  MOVWF  x8F
330E:  BRA    321A
....................             break; 
....................          case 'l': 
....................             motores_cv_parar(); 
3310:  BRA    3226
....................             break; 
....................          default: 
....................             printf (usb_cdc_putc, "NR:%c\r\n", keypress); 
3312:  MOVLW  4E
3314:  MOVWF  x93
3316:  RCALL  2E28
3318:  MOVLW  52
331A:  MOVWF  x93
331C:  RCALL  2E28
331E:  MOVLW  3A
3320:  MOVWF  x93
3322:  RCALL  2E28
3324:  MOVFF  82,93
3328:  RCALL  2E28
332A:  MOVLW  0D
332C:  MOVWF  x93
332E:  RCALL  2E28
3330:  MOVLW  0A
3332:  MOVWF  x93
3334:  RCALL  2E28
....................             break; 
3336:  BRA    3338
....................    } 
....................    //Vaciamos el buffer 
....................    keypress=0; 
3338:  CLRF   x82
.................... } 
333A:  RETLW  00
....................  
....................  
.................... void ldr_a_lcd() 
.................... { 
....................    long lectura; 
....................    int valor; 
....................    int j, lec[13]; 
....................    ldr_configurar(); 
*
3514:  RCALL  3424
....................    while (input(PULSADOR)!=1) 
....................    { 
3516:  BSF    F92.4
3518:  BTFSC  F80.4
351A:  BRA    36B4
....................       lcd_gotoxy(1,1); 
351C:  MOVLW  01
351E:  MOVWF  xA8
3520:  MOVWF  xA9
3522:  RCALL  33BE
....................       valor=leeradc(LDR_I); 
3524:  MOVLW  01
3526:  MOVWF  xA5
*
3548:  MOVFF  01,91
....................       lectura=valor; 
354C:  CLRF   x90
354E:  MOVFF  91,8F
....................       lectura=lectura/22; 
3552:  MOVFF  90,A1
3556:  MOVFF  8F,A0
355A:  CLRF   xA3
355C:  MOVLW  16
355E:  MOVWF  xA2
3560:  RCALL  346C
3562:  MOVFF  02,90
3566:  MOVFF  01,8F
....................       for (j=0; j<12; j++) if (j<=lectura) { lec[j]=219; } else {lec[j]='-';} 
356A:  CLRF   x92
356C:  MOVF   x92,W
356E:  SUBLW  0B
3570:  BNC   35A6
3572:  MOVF   x90,F
3574:  BNZ   357C
3576:  MOVF   x92,W
3578:  SUBWF  x8F,W
357A:  BNC   3590
357C:  CLRF   03
357E:  MOVF   x92,W
3580:  ADDLW  93
3582:  MOVWF  FE9
3584:  MOVLW  00
3586:  ADDWFC 03,W
3588:  MOVWF  FEA
358A:  MOVLW  DB
358C:  MOVWF  FEF
358E:  BRA    35A2
3590:  CLRF   03
3592:  MOVF   x92,W
3594:  ADDLW  93
3596:  MOVWF  FE9
3598:  MOVLW  00
359A:  ADDWFC 03,W
359C:  MOVWF  FEA
359E:  MOVLW  2D
35A0:  MOVWF  FEF
35A2:  INCF   x92,F
35A4:  BRA    356C
....................       lec[12]='\0'; 
35A6:  CLRF   x9F
....................       printf (lcd_putc, "%03u|%s\r", valor, lec); 
35A8:  MOVFF  91,A5
35AC:  MOVLW  03
35AE:  MOVWF  xA6
35B0:  RCALL  34AE
35B2:  MOVLW  7C
35B4:  MOVWF  xA7
35B6:  RCALL  33E0
35B8:  CLRF   FEA
35BA:  MOVLW  93
35BC:  MOVWF  FE9
35BE:  MOVLW  00
35C0:  IORWF  FEF,W
35C2:  BZ    35E2
35C4:  MOVFF  FEA,A1
35C8:  MOVFF  FE9,A0
35CC:  MOVFF  FEF,A7
35D0:  RCALL  33E0
35D2:  MOVFF  A1,FEA
35D6:  MOVFF  A0,FE9
35DA:  INCF   FE9,F
35DC:  BTFSC  FD8.2
35DE:  INCF   FEA,F
35E0:  BRA    35BE
35E2:  MOVLW  0D
35E4:  MOVWF  xA7
35E6:  RCALL  33E0
....................       valor=leeradc(LDR_D); 
35E8:  CLRF   xA5
*
360A:  MOVFF  01,91
....................       lectura=valor; 
360E:  CLRF   x90
3610:  MOVFF  91,8F
....................       lectura=lectura/22; 
3614:  MOVFF  90,A1
3618:  MOVFF  8F,A0
361C:  CLRF   xA3
361E:  MOVLW  16
3620:  MOVWF  xA2
3622:  RCALL  346C
3624:  MOVFF  02,90
3628:  MOVFF  01,8F
....................       for (j=0; j<12; j++) if (j<=lectura) { lec[j]=219; } else {lec[j]='-';} 
362C:  CLRF   x92
362E:  MOVF   x92,W
3630:  SUBLW  0B
3632:  BNC   3668
3634:  MOVF   x90,F
3636:  BNZ   363E
3638:  MOVF   x92,W
363A:  SUBWF  x8F,W
363C:  BNC   3652
363E:  CLRF   03
3640:  MOVF   x92,W
3642:  ADDLW  93
3644:  MOVWF  FE9
3646:  MOVLW  00
3648:  ADDWFC 03,W
364A:  MOVWF  FEA
364C:  MOVLW  DB
364E:  MOVWF  FEF
3650:  BRA    3664
3652:  CLRF   03
3654:  MOVF   x92,W
3656:  ADDLW  93
3658:  MOVWF  FE9
365A:  MOVLW  00
365C:  ADDWFC 03,W
365E:  MOVWF  FEA
3660:  MOVLW  2D
3662:  MOVWF  FEF
3664:  INCF   x92,F
3666:  BRA    362E
....................       lec[12]='\0'; 
3668:  CLRF   x9F
....................       printf (lcd_putc, "%03u|%s\r", valor, lec); 
366A:  MOVFF  91,A5
366E:  MOVLW  03
3670:  MOVWF  xA6
3672:  RCALL  34AE
3674:  MOVLW  7C
3676:  MOVWF  xA7
3678:  RCALL  33E0
367A:  CLRF   FEA
367C:  MOVLW  93
367E:  MOVWF  FE9
3680:  MOVLW  00
3682:  IORWF  FEF,W
3684:  BZ    36A4
3686:  MOVFF  FEA,A1
368A:  MOVFF  FE9,A0
368E:  MOVFF  FEF,A7
3692:  RCALL  33E0
3694:  MOVFF  A1,FEA
3698:  MOVFF  A0,FE9
369C:  INCF   FE9,F
369E:  BTFSC  FD8.2
36A0:  INCF   FEA,F
36A2:  BRA    3680
36A4:  MOVLW  0D
36A6:  MOVWF  xA7
36A8:  RCALL  33E0
....................       delay_ms(40); 
36AA:  MOVLW  28
36AC:  MOVWF  xA8
36AE:  CALL   2D3A
....................    } 
36B2:  BRA    3516
.................... } 
36B4:  GOTO   4284 (RETURN)
....................  
.................... void cny_a_lcd() 
.................... { 
....................    long lectura; 
....................    int valor; 
....................    int j, lec[13]; 
....................    ldr_configurar(); 
36B8:  RCALL  3424
....................    while (input(PULSADOR)!=1) 
....................    { 
36BA:  BSF    F92.4
36BC:  BTFSC  F80.4
36BE:  BRA    385A
....................       lcd_gotoxy(1,1); 
36C0:  MOVLW  01
36C2:  MOVWF  xA8
36C4:  MOVWF  xA9
36C6:  RCALL  33BE
....................       valor=leeradc(CNY_I); 
36C8:  MOVLW  02
36CA:  MOVWF  xA5
*
36EC:  MOVFF  01,91
....................       lectura=valor; 
36F0:  CLRF   x90
36F2:  MOVFF  91,8F
....................       lectura=lectura/22; 
36F6:  MOVFF  90,A1
36FA:  MOVFF  8F,A0
36FE:  CLRF   xA3
3700:  MOVLW  16
3702:  MOVWF  xA2
3704:  RCALL  346C
3706:  MOVFF  02,90
370A:  MOVFF  01,8F
....................       for (j=0; j<12; j++) if (j<=lectura) { lec[j]=219; } else {lec[j]='-';} 
370E:  CLRF   x92
3710:  MOVF   x92,W
3712:  SUBLW  0B
3714:  BNC   374A
3716:  MOVF   x90,F
3718:  BNZ   3720
371A:  MOVF   x92,W
371C:  SUBWF  x8F,W
371E:  BNC   3734
3720:  CLRF   03
3722:  MOVF   x92,W
3724:  ADDLW  93
3726:  MOVWF  FE9
3728:  MOVLW  00
372A:  ADDWFC 03,W
372C:  MOVWF  FEA
372E:  MOVLW  DB
3730:  MOVWF  FEF
3732:  BRA    3746
3734:  CLRF   03
3736:  MOVF   x92,W
3738:  ADDLW  93
373A:  MOVWF  FE9
373C:  MOVLW  00
373E:  ADDWFC 03,W
3740:  MOVWF  FEA
3742:  MOVLW  2D
3744:  MOVWF  FEF
3746:  INCF   x92,F
3748:  BRA    3710
....................       lec[12]='\0'; 
374A:  CLRF   x9F
....................       printf (lcd_putc, "%03u|%s\r", valor, lec); 
374C:  MOVFF  91,A5
3750:  MOVLW  03
3752:  MOVWF  xA6
3754:  RCALL  34AE
3756:  MOVLW  7C
3758:  MOVWF  xA7
375A:  RCALL  33E0
375C:  CLRF   FEA
375E:  MOVLW  93
3760:  MOVWF  FE9
3762:  MOVLW  00
3764:  IORWF  FEF,W
3766:  BZ    3786
3768:  MOVFF  FEA,A1
376C:  MOVFF  FE9,A0
3770:  MOVFF  FEF,A7
3774:  RCALL  33E0
3776:  MOVFF  A1,FEA
377A:  MOVFF  A0,FE9
377E:  INCF   FE9,F
3780:  BTFSC  FD8.2
3782:  INCF   FEA,F
3784:  BRA    3762
3786:  MOVLW  0D
3788:  MOVWF  xA7
378A:  RCALL  33E0
....................       valor=leeradc(CNY_D); 
378C:  MOVLW  03
378E:  MOVWF  xA5
*
37B0:  MOVFF  01,91
....................       lectura=valor; 
37B4:  CLRF   x90
37B6:  MOVFF  91,8F
....................       lectura=lectura/22; 
37BA:  MOVFF  90,A1
37BE:  MOVFF  8F,A0
37C2:  CLRF   xA3
37C4:  MOVLW  16
37C6:  MOVWF  xA2
37C8:  RCALL  346C
37CA:  MOVFF  02,90
37CE:  MOVFF  01,8F
....................       for (j=0; j<12; j++) if (j<=lectura) { lec[j]=219; } else {lec[j]='-';} 
37D2:  CLRF   x92
37D4:  MOVF   x92,W
37D6:  SUBLW  0B
37D8:  BNC   380E
37DA:  MOVF   x90,F
37DC:  BNZ   37E4
37DE:  MOVF   x92,W
37E0:  SUBWF  x8F,W
37E2:  BNC   37F8
37E4:  CLRF   03
37E6:  MOVF   x92,W
37E8:  ADDLW  93
37EA:  MOVWF  FE9
37EC:  MOVLW  00
37EE:  ADDWFC 03,W
37F0:  MOVWF  FEA
37F2:  MOVLW  DB
37F4:  MOVWF  FEF
37F6:  BRA    380A
37F8:  CLRF   03
37FA:  MOVF   x92,W
37FC:  ADDLW  93
37FE:  MOVWF  FE9
3800:  MOVLW  00
3802:  ADDWFC 03,W
3804:  MOVWF  FEA
3806:  MOVLW  2D
3808:  MOVWF  FEF
380A:  INCF   x92,F
380C:  BRA    37D4
....................       lec[12]='\0'; 
380E:  CLRF   x9F
....................       printf (lcd_putc, "%03u|%s\r", valor, lec); 
3810:  MOVFF  91,A5
3814:  MOVLW  03
3816:  MOVWF  xA6
3818:  RCALL  34AE
381A:  MOVLW  7C
381C:  MOVWF  xA7
381E:  RCALL  33E0
3820:  CLRF   FEA
3822:  MOVLW  93
3824:  MOVWF  FE9
3826:  MOVLW  00
3828:  IORWF  FEF,W
382A:  BZ    384A
382C:  MOVFF  FEA,A1
3830:  MOVFF  FE9,A0
3834:  MOVFF  FEF,A7
3838:  RCALL  33E0
383A:  MOVFF  A1,FEA
383E:  MOVFF  A0,FE9
3842:  INCF   FE9,F
3844:  BTFSC  FD8.2
3846:  INCF   FEA,F
3848:  BRA    3826
384A:  MOVLW  0D
384C:  MOVWF  xA7
384E:  RCALL  33E0
....................       delay_ms(40); 
3850:  MOVLW  28
3852:  MOVWF  xA8
3854:  CALL   2D3A
....................    } 
3858:  BRA    36BA
.................... } 
385A:  GOTO   4302 (RETURN)
....................  
....................  
.................... //Rutina principal 
.................... void main() 
.................... { 
*
3E78:  CLRF   FF8
3E7A:  BCF    FD0.7
3E7C:  BSF    0D.7
3E7E:  CLRF   FEA
3E80:  CLRF   FE9
3E82:  BSF    FB8.3
3E84:  MOVLW  E1
3E86:  MOVWF  FAF
3E88:  MOVLW  04
3E8A:  MOVWF  FB0
3E8C:  MOVLW  A6
3E8E:  MOVWF  FAC
3E90:  MOVLW  90
3E92:  MOVWF  FAB
3E94:  MOVF   FC1,W
3E96:  ANDLW  C0
3E98:  IORLW  0F
3E9A:  MOVWF  FC1
3E9C:  MOVLW  07
3E9E:  MOVWF  FB4
3EA0:  CLRF   1F
3EA2:  CLRF   21
3EA4:  MOVLW  04
3EA6:  MOVWF  22
3EA8:  MOVLW  0E
3EAA:  MOVWF  23
3EAC:  CLRF   27
3EAE:  CLRF   x7C
3EB0:  CLRF   x81
3EB2:  CLRF   x82
3EB4:  CLRF   x83
3EB6:  CLRF   x84
3EB8:  CLRF   x85
3EBA:  CLRF   x86
3EBC:  CLRF   x87
3EBE:  CLRF   x88
3EC0:  CLRF   x89
3EC2:  CLRF   x8A
3EC4:  CLRF   x8B
....................    int i, d, j; 
....................    aure_configurar(); 
3EC6:  GOTO   2E4A
....................    lcd_configurar(); 
3ECA:  GOTO   30DC
....................    //motores_cv_configurar(); 
....................    while(1) 
....................    { 
....................      // Si usamos el USB 
....................      aure_usb(); 
3ECE:  GOTO   333C
....................      // Comprobamos si tenemos algún caracter en el buffer serie/usb, si lo 
....................      // tenemos llamamos a aure_usb_serie_int() que nos lo guardará en keypress 
....................      if (usb_cdc_kbhit()) 
3ED2:  BTFSS  x7D.0
3ED4:  BRA    3EE2
....................      { 
....................          aure_usb_serie_int(); 
3ED6:  CALL   3128
....................          if (keypress!=0x00) aure_serie(); 
3EDA:  MOVF   x82,F
3EDC:  BZ    3EE2
3EDE:  CALL   322E
....................      } 
....................      if (enviar_ldr==1) 
3EE2:  DECFSZ x87,W
3EE4:  BRA    3F7E
....................      { 
....................          i=leeradc(LDR_I); 
3EE6:  MOVLW  01
3EE8:  MOVWF  xA5
*
3F0A:  MOVFF  01,8C
....................          d=leeradc(LDR_D); 
3F0E:  CLRF   xA5
*
3F30:  MOVFF  01,8D
....................          printf (usb_cdc_putc, "<SI:%c><SD:%c>", i, d); 
3F34:  CLRF   x8F
3F36:  MOVF   x8F,W
3F38:  CALL   1DA4
3F3C:  INCF   x8F,F
3F3E:  MOVWF  00
3F40:  MOVWF  x93
3F42:  CALL   2E28
3F46:  MOVLW  04
3F48:  SUBWF  x8F,W
3F4A:  BNZ   3F36
3F4C:  MOVFF  8C,93
3F50:  CALL   2E28
3F54:  MOVLW  06
3F56:  MOVWF  x90
3F58:  MOVF   x90,W
3F5A:  CALL   1DA4
3F5E:  INCF   x90,F
3F60:  MOVWF  00
3F62:  MOVWF  x93
3F64:  CALL   2E28
3F68:  MOVLW  0B
3F6A:  SUBWF  x90,W
3F6C:  BNZ   3F58
3F6E:  MOVFF  8D,93
3F72:  CALL   2E28
3F76:  MOVLW  3E
3F78:  MOVWF  x93
3F7A:  CALL   2E28
....................      } 
....................      if (enviar_cny==1) 
3F7E:  DECFSZ x88,W
3F80:  BRA    401C
....................      { 
....................          i=leeradc(CNY_I); 
3F82:  MOVLW  02
3F84:  MOVWF  xA5
*
3FA6:  MOVFF  01,8C
....................          d=leeradc(CNY_D); 
3FAA:  MOVLW  03
3FAC:  MOVWF  xA5
*
3FCE:  MOVFF  01,8D
....................          printf (usb_cdc_putc, "<CI:%c><CD:%c>", i, d); 
3FD2:  CLRF   x8F
3FD4:  MOVF   x8F,W
3FD6:  CALL   1DCE
3FDA:  INCF   x8F,F
3FDC:  MOVWF  00
3FDE:  MOVWF  x93
3FE0:  CALL   2E28
3FE4:  MOVLW  04
3FE6:  SUBWF  x8F,W
3FE8:  BNZ   3FD4
3FEA:  MOVFF  8C,93
3FEE:  CALL   2E28
3FF2:  MOVLW  06
3FF4:  MOVWF  x90
3FF6:  MOVF   x90,W
3FF8:  CALL   1DCE
3FFC:  INCF   x90,F
3FFE:  MOVWF  00
4000:  MOVWF  x93
4002:  CALL   2E28
4006:  MOVLW  0B
4008:  SUBWF  x90,W
400A:  BNZ   3FF6
400C:  MOVFF  8D,93
4010:  CALL   2E28
4014:  MOVLW  3E
4016:  MOVWF  x93
4018:  CALL   2E28
....................      } 
....................      if (enviar_pulsadores==1) 
401C:  DECFSZ x89,W
401E:  BRA    40C8
....................      { 
....................          if (input(PULSADOR)) {   printf (usb_cdc_putc,"<PU:H>"); } else { printf (usb_cdc_putc,"<PU:L>");} 
4020:  BSF    F92.4
4022:  BTFSS  F80.4
4024:  BRA    4040
4026:  CLRF   x8F
4028:  MOVF   x8F,W
402A:  CALL   1DF8
402E:  INCF   x8F,F
4030:  MOVWF  00
4032:  MOVWF  x93
4034:  CALL   2E28
4038:  MOVLW  06
403A:  SUBWF  x8F,W
403C:  BNZ   4028
403E:  BRA    4058
4040:  CLRF   x8F
4042:  MOVF   x8F,W
4044:  CALL   1E1A
4048:  INCF   x8F,F
404A:  MOVWF  00
404C:  MOVWF  x93
404E:  CALL   2E28
4052:  MOVLW  06
4054:  SUBWF  x8F,W
4056:  BNZ   4042
....................          if (input(BUMPER_I)) {   printf (usb_cdc_putc,"<BI:H>"); } else { printf (usb_cdc_putc,"<BI:L>");} 
4058:  BSF    F92.2
405A:  BTFSS  F80.2
405C:  BRA    4078
405E:  CLRF   x8F
4060:  MOVF   x8F,W
4062:  CALL   1E3C
4066:  INCF   x8F,F
4068:  MOVWF  00
406A:  MOVWF  x93
406C:  CALL   2E28
4070:  MOVLW  06
4072:  SUBWF  x8F,W
4074:  BNZ   4060
4076:  BRA    4090
4078:  CLRF   x8F
407A:  MOVF   x8F,W
407C:  CALL   1E5E
4080:  INCF   x8F,F
4082:  MOVWF  00
4084:  MOVWF  x93
4086:  CALL   2E28
408A:  MOVLW  06
408C:  SUBWF  x8F,W
408E:  BNZ   407A
....................          if (input(BUMPER_D)) {   printf (usb_cdc_putc,"<BD:H>"); } else { printf (usb_cdc_putc,"<BD:L>");} 
4090:  BSF    F92.3
4092:  BTFSS  F80.3
4094:  BRA    40B0
4096:  CLRF   x8F
4098:  MOVF   x8F,W
409A:  CALL   1E80
409E:  INCF   x8F,F
40A0:  MOVWF  00
40A2:  MOVWF  x93
40A4:  CALL   2E28
40A8:  MOVLW  06
40AA:  SUBWF  x8F,W
40AC:  BNZ   4098
40AE:  BRA    40C8
40B0:  CLRF   x8F
40B2:  MOVF   x8F,W
40B4:  CALL   1EA2
40B8:  INCF   x8F,F
40BA:  MOVWF  00
40BC:  MOVWF  x93
40BE:  CALL   2E28
40C2:  MOVLW  06
40C4:  SUBWF  x8F,W
40C6:  BNZ   40B2
....................      } 
....................      if (enviar_analog==1) 
40C8:  DECFSZ x8A,W
40CA:  BRA    4150
....................      { 
....................         setup_adc_ports( ALL_ANALOG|VSS_VDD ); 
40CC:  MOVF   FC1,W
40CE:  ANDLW  C0
40D0:  MOVWF  FC1
....................         setup_adc(ADC_CLOCK_INTERNAL); 
40D2:  BSF    FC0.0
40D4:  BSF    FC0.1
40D6:  BSF    FC0.2
40D8:  BCF    FC0.7
40DA:  BSF    FC2.0
....................          for (j=0; j<2; j++) 
40DC:  CLRF   x8E
40DE:  MOVF   x8E,W
40E0:  SUBLW  01
40E2:  BNC   4146
....................          { 
....................             printf(usb_cdc_putc, "<A%c:%c>", j+'0', leeradc(j)); 
40E4:  MOVLW  30
40E6:  ADDWF  x8E,W
40E8:  MOVWF  x8F
40EA:  MOVFF  8E,A5
*
410E:  MOVFF  01,90
4112:  MOVLW  3C
4114:  MOVWF  x93
4116:  CALL   2E28
411A:  MOVLW  41
411C:  MOVWF  x93
411E:  CALL   2E28
4122:  MOVFF  8F,93
4126:  CALL   2E28
412A:  MOVLW  3A
412C:  MOVWF  x93
412E:  CALL   2E28
4132:  MOVFF  90,93
4136:  CALL   2E28
413A:  MOVLW  3E
413C:  MOVWF  x93
413E:  CALL   2E28
....................          } 
4142:  INCF   x8E,F
4144:  BRA    40DE
....................          setup_adc_ports(NO_ANALOGS); 
4146:  MOVF   FC1,W
4148:  ANDLW  C0
414A:  IORLW  0F
414C:  MOVWF  FC1
....................          setup_adc(ADC_OFF); 
414E:  BCF    FC2.0
....................      } 
....................      if (enviar_dig==1) 
4150:  DECFSZ x8B,W
4152:  BRA    41CE
....................      { 
....................       for (j=0; j<2; j++) 
4154:  CLRF   x8E
4156:  MOVF   x8E,W
4158:  SUBLW  01
415A:  BNC   41CE
....................       { 
....................          printf(usb_cdc_putc, "<A%c:%c>", j+'0', 50+input(PIN_A0+j)*150); 
415C:  MOVLW  30
415E:  ADDWF  x8E,W
4160:  MOVWF  x8F
4162:  MOVFF  8E,90
4166:  MOVLW  7C
4168:  MOVFF  8E,92
416C:  MOVLW  01
416E:  MOVWF  x93
4170:  MOVLW  0F
4172:  MOVWF  x95
4174:  MOVLW  92
4176:  MOVWF  x94
4178:  GOTO   334E
417C:  MOVFF  90,92
4180:  MOVLW  0F
4182:  MOVWF  x94
4184:  MOVLW  80
4186:  MOVWF  x93
4188:  GOTO   338E
418C:  MOVLW  00
418E:  BTFSC  01.0
4190:  MOVLW  01
4192:  MULLW  96
4194:  MOVF   FF3,W
4196:  ADDLW  32
4198:  MOVWF  x92
419A:  MOVLW  3C
419C:  MOVWF  x93
419E:  CALL   2E28
41A2:  MOVLW  41
41A4:  MOVWF  x93
41A6:  CALL   2E28
41AA:  MOVFF  8F,93
41AE:  CALL   2E28
41B2:  MOVLW  3A
41B4:  MOVWF  x93
41B6:  CALL   2E28
41BA:  MOVFF  92,93
41BE:  CALL   2E28
41C2:  MOVLW  3E
41C4:  MOVWF  x93
41C6:  CALL   2E28
....................       } 
41CA:  INCF   x8E,F
41CC:  BRA    4156
....................      } 
....................      if (prueba_pilas==1) { 
41CE:  DECFSZ x86,W
41D0:  BRA    41EA
....................       motores_palante(); 
41D2:  CALL   2C94
....................       delay_ms(250); 
41D6:  MOVLW  FA
41D8:  MOVWF  xA8
41DA:  CALL   2D3A
....................       motores_parar(); 
41DE:  CALL   2C82
....................       delay_ms(250); 
41E2:  MOVLW  FA
41E4:  MOVWF  xA8
41E6:  CALL   2D3A
....................      } 
....................      if (input(PULSADOR)==1) 
41EA:  BSF    F92.4
41EC:  BTFSS  F80.4
41EE:  BRA    4402
....................      { 
....................          while(input(PULSADOR)==1) {} 
41F0:  BSF    F92.4
41F2:  BTFSS  F80.4
41F4:  BRA    41F8
41F6:  BRA    41F0
....................          lcd_gotoxy(1,1); 
41F8:  MOVLW  01
41FA:  MOVWF  xA8
41FC:  MOVWF  xA9
41FE:  CALL   33BE
....................          printf(lcd_putc, "______MENU______\r"); 
4202:  CLRF   x8F
4204:  MOVF   x8F,W
4206:  CALL   1EC4
420A:  INCF   x8F,F
420C:  MOVWF  00
420E:  MOVWF  xA7
4210:  CALL   33E0
4214:  MOVLW  11
4216:  SUBWF  x8F,W
4218:  BNZ   4204
....................          printf(lcd_putc, " ldr a lcd      "); 
421A:  CLRF   x8F
421C:  MOVF   x8F,W
421E:  CALL   1EF0
4222:  INCF   x8F,F
4224:  MOVWF  00
4226:  MOVWF  xA7
4228:  CALL   33E0
422C:  MOVLW  10
422E:  SUBWF  x8F,W
4230:  BNZ   421C
....................          for (j=0; j<10; j++) { delay_ms(100); if (input(PULSADOR)==1) j=10;} 
4232:  CLRF   x8E
4234:  MOVF   x8E,W
4236:  SUBLW  09
4238:  BNC   4250
423A:  MOVLW  64
423C:  MOVWF  xA8
423E:  CALL   2D3A
4242:  BSF    F92.4
4244:  BTFSS  F80.4
4246:  BRA    424C
4248:  MOVLW  0A
424A:  MOVWF  x8E
424C:  INCF   x8E,F
424E:  BRA    4234
....................          if (input(PULSADOR)==1) 
4250:  BSF    F92.4
4252:  BTFSS  F80.4
4254:  BRA    4284
....................          { 
....................             lcd_gotoxy(1,1); 
4256:  MOVLW  01
4258:  MOVWF  xA8
425A:  MOVWF  xA9
425C:  CALL   33BE
....................             printf (lcd_putc, "OK LDR A LCD    "); 
4260:  CLRF   x8F
4262:  MOVF   x8F,W
4264:  CALL   1F1C
4268:  INCF   x8F,F
426A:  MOVWF  00
426C:  MOVWF  xA7
426E:  CALL   33E0
4272:  MOVLW  10
4274:  SUBWF  x8F,W
4276:  BNZ   4262
....................             while(input(PULSADOR)==1) {} 
4278:  BSF    F92.4
427A:  BTFSS  F80.4
427C:  BRA    4280
427E:  BRA    4278
....................             ldr_a_lcd(); 
4280:  GOTO   3514
....................          } 
....................          lcd_gotoxy(1,1); 
4284:  MOVLW  01
4286:  MOVWF  xA8
4288:  MOVWF  xA9
428A:  CALL   33BE
....................          printf(lcd_putc, "______MENU______\r"); 
428E:  CLRF   x8F
4290:  MOVF   x8F,W
4292:  CALL   1EC4
4296:  INCF   x8F,F
4298:  MOVWF  00
429A:  MOVWF  xA7
429C:  CALL   33E0
42A0:  MOVLW  11
42A2:  SUBWF  x8F,W
42A4:  BNZ   4290
....................          printf(lcd_putc, " cny a lcd      "); 
42A6:  CLRF   x8F
42A8:  MOVF   x8F,W
42AA:  CALL   1F48
42AE:  INCF   x8F,F
42B0:  MOVWF  00
42B2:  MOVWF  xA7
42B4:  CALL   33E0
42B8:  MOVLW  10
42BA:  SUBWF  x8F,W
42BC:  BNZ   42A8
....................          delay_ms(1000); 
42BE:  MOVLW  04
42C0:  MOVWF  x8F
42C2:  MOVLW  FA
42C4:  MOVWF  xA8
42C6:  CALL   2D3A
42CA:  DECFSZ x8F,F
42CC:  BRA    42C2
....................          if (input(PULSADOR)==1) 
42CE:  BSF    F92.4
42D0:  BTFSS  F80.4
42D2:  BRA    4302
....................          { 
....................                lcd_gotoxy(1,1); 
42D4:  MOVLW  01
42D6:  MOVWF  xA8
42D8:  MOVWF  xA9
42DA:  CALL   33BE
....................                printf (lcd_putc, "OK CNY A LCD    "); 
42DE:  CLRF   x8F
42E0:  MOVF   x8F,W
42E2:  CALL   1F74
42E6:  INCF   x8F,F
42E8:  MOVWF  00
42EA:  MOVWF  xA7
42EC:  CALL   33E0
42F0:  MOVLW  10
42F2:  SUBWF  x8F,W
42F4:  BNZ   42E0
....................                while(input(PULSADOR)==1) {} 
42F6:  BSF    F92.4
42F8:  BTFSS  F80.4
42FA:  BRA    42FE
42FC:  BRA    42F6
....................                cny_a_lcd(); 
42FE:  GOTO   36B8
....................          } 
....................          lcd_gotoxy(1,1); 
4302:  MOVLW  01
4304:  MOVWF  xA8
4306:  MOVWF  xA9
4308:  CALL   33BE
....................          printf(lcd_putc, "______MENU______\r"); 
430C:  CLRF   x8F
430E:  MOVF   x8F,W
4310:  CALL   1EC4
4314:  INCF   x8F,F
4316:  MOVWF  00
4318:  MOVWF  xA7
431A:  CALL   33E0
431E:  MOVLW  11
4320:  SUBWF  x8F,W
4322:  BNZ   430E
....................          printf(lcd_putc, " navegacion auto"); 
4324:  CLRF   x8F
4326:  MOVF   x8F,W
4328:  CALL   1FA0
432C:  INCF   x8F,F
432E:  MOVWF  00
4330:  MOVWF  xA7
4332:  CALL   33E0
4336:  MOVLW  10
4338:  SUBWF  x8F,W
433A:  BNZ   4326
....................          delay_ms(1000); 
433C:  MOVLW  04
433E:  MOVWF  x8F
4340:  MOVLW  FA
4342:  MOVWF  xA8
4344:  CALL   2D3A
4348:  DECFSZ x8F,F
434A:  BRA    4340
....................          if (input(PULSADOR)==1) 
434C:  BSF    F92.4
434E:  BTFSS  F80.4
4350:  BRA    4380
....................          { 
....................                lcd_gotoxy(1,1); 
4352:  MOVLW  01
4354:  MOVWF  xA8
4356:  MOVWF  xA9
4358:  CALL   33BE
....................                printf (lcd_putc, "OK NAVEGACION   "); 
435C:  CLRF   x8F
435E:  MOVF   x8F,W
4360:  CALL   1FCC
4364:  INCF   x8F,F
4366:  MOVWF  00
4368:  MOVWF  xA7
436A:  CALL   33E0
436E:  MOVLW  10
4370:  SUBWF  x8F,W
4372:  BNZ   435E
....................                while(input(PULSADOR)==1) {} 
4374:  BSF    F92.4
4376:  BTFSS  F80.4
4378:  BRA    437C
437A:  BRA    4374
....................                navegacion_bumpers(); 
437C:  GOTO   38A2
....................          } 
....................          lcd_gotoxy(1,1); 
4380:  MOVLW  01
4382:  MOVWF  xA8
4384:  MOVWF  xA9
4386:  CALL   33BE
....................          printf(lcd_putc, "______MENU______\r"); 
438A:  CLRF   x8F
438C:  MOVF   x8F,W
438E:  CALL   1EC4
4392:  INCF   x8F,F
4394:  MOVWF  00
4396:  MOVWF  xA7
4398:  CALL   33E0
439C:  MOVLW  11
439E:  SUBWF  x8F,W
43A0:  BNZ   438C
....................          printf(lcd_putc, " buscaluz       "); 
43A2:  CLRF   x8F
43A4:  MOVF   x8F,W
43A6:  CALL   1FF8
43AA:  INCF   x8F,F
43AC:  MOVWF  00
43AE:  MOVWF  xA7
43B0:  CALL   33E0
43B4:  MOVLW  10
43B6:  SUBWF  x8F,W
43B8:  BNZ   43A4
....................          delay_ms(1000); 
43BA:  MOVLW  04
43BC:  MOVWF  x8F
43BE:  MOVLW  FA
43C0:  MOVWF  xA8
43C2:  CALL   2D3A
43C6:  DECFSZ x8F,F
43C8:  BRA    43BE
....................          if (input(PULSADOR)==1) 
43CA:  BSF    F92.4
43CC:  BTFSS  F80.4
43CE:  BRA    43FE
....................          { 
....................                lcd_gotoxy(1,1); 
43D0:  MOVLW  01
43D2:  MOVWF  xA8
43D4:  MOVWF  xA9
43D6:  CALL   33BE
....................                printf (lcd_putc, "OK BUSCALUZ     "); 
43DA:  CLRF   x8F
43DC:  MOVF   x8F,W
43DE:  CALL   2024
43E2:  INCF   x8F,F
43E4:  MOVWF  00
43E6:  MOVWF  xA7
43E8:  CALL   33E0
43EC:  MOVLW  10
43EE:  SUBWF  x8F,W
43F0:  BNZ   43DC
....................                while(input(PULSADOR)==1) {} 
43F2:  BSF    F92.4
43F4:  BTFSS  F80.4
43F6:  BRA    43FA
43F8:  BRA    43F2
....................                navegacion_luz(); 
43FA:  GOTO   3BF0
....................  
....................          } 
....................          lcd_init(); 
43FE:  CALL   306E
....................  
....................       } 
....................    //delay_ms(5); 
....................    } 
4402:  BRA    3ECE
.................... } 
4404:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 8300   PBADEN CCP2C1 MCLR NOLPT1OSC RESERVED
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT RESERVED
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
