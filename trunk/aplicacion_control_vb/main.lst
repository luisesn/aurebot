CCS PCH C Compiler, Version 4.068, 17192               17-mar-11 10:23

               Filename: C:\Llave\Mis documentos\Dropbox\Aurebot_p\aplicacion_control_vb\main.lst

               ROM used: 9074 bytes (28%)
                         Largest free fragment is 17546
               RAM used: 1168 (57%) at main() level
                         1212 (59%) worst case
               Stack:    13 worst case (6 in main + 7 for interrupts)

*
1800:  GOTO   3618
*
1808:  MOVWF  05
180A:  MOVFF  FD8,06
180E:  MOVFF  FE0,07
1812:  MOVLB  0
1814:  MOVFF  FE9,0D
1818:  MOVFF  FEA,08
181C:  MOVFF  FE1,09
1820:  MOVFF  FE2,0A
1824:  MOVFF  FD9,0B
1828:  MOVFF  FDA,0C
182C:  MOVFF  FF3,14
1830:  MOVFF  FF4,15
1834:  MOVFF  FFA,16
1838:  MOVFF  00,0F
183C:  MOVFF  01,10
1840:  MOVFF  02,11
1844:  MOVFF  03,12
1848:  MOVFF  04,13
184C:  BTFSS  F9D.5
184E:  GOTO   1858
1852:  BTFSC  F9E.5
1854:  GOTO   2B66
1858:  BTFSS  FA0.5
185A:  GOTO   1864
185E:  BTFSC  FA1.5
1860:  GOTO   2AFC
1864:  MOVFF  0F,00
1868:  MOVFF  10,01
186C:  MOVFF  11,02
1870:  MOVFF  12,03
1874:  MOVFF  13,04
1878:  BSF    0E.7
187A:  MOVFF  0D,FE9
187E:  MOVFF  08,FEA
1882:  MOVFF  09,FE1
1886:  MOVFF  0A,FE2
188A:  MOVFF  0B,FD9
188E:  MOVFF  0C,FDA
1892:  MOVFF  14,FF3
1896:  MOVFF  15,FF4
189A:  MOVFF  16,FFA
189E:  MOVF   05,W
18A0:  MOVFF  07,FE0
18A4:  MOVFF  06,FD8
18A8:  RETFIE 0
.................... /* 
....................           _____                    _____                    _____                    _____ 
....................          /\    \                  /\    \                  /\    \                  /\    \ 
....................         /::\    \                /::\____\                /::\    \                /::\    \ 
....................        /::::\    \              /:::/    /               /::::\    \              /::::\    \ 
....................       /::::::\    \            /:::/    /               /::::::\    \            /::::::\    \ 
....................      /:::/\:::\    \          /:::/    /               /:::/\:::\    \          /:::/\:::\    \ 
....................     /:::/__\:::\    \        /:::/    /               /:::/__\:::\    \        /:::/__\:::\    \ 
....................    /::::\   \:::\    \      /:::/    /               /::::\   \:::\    \      /::::\   \:::\    \ 
....................   /::::::\   \:::\    \    /:::/    /      _____    /::::::\   \:::\    \    /::::::\   \:::\    \ 
....................  /:::/\:::\   \:::\    \  /:::/____/      /\    \  /:::/\:::\   \:::\____\  /:::/\:::\   \:::\    \ 
.................... /:::/  \:::\   \:::\____\|:::|    /      /::\____\/:::/  \:::\   \:::|    |/:::/__\:::\   \:::\____\ 
.................... \::/    \:::\  /:::/    /|:::|____\     /:::/    /\::/   |::::\  /:::|____|\:::\   \:::\   \::/    / 
....................  \/____/ \:::\/:::/    /  \:::\    \   /:::/    /  \/____|:::::\/:::/    /  \:::\   \:::\   \/____/ 
....................           \::::::/    /    \:::\    \ /:::/    /         |:::::::::/    /    \:::\   \:::\    \ 
....................            \::::/    /      \:::\    /:::/    /          |::|\::::/    /      \:::\   \:::\____\ 
....................            /:::/    /        \:::\__/:::/    /           |::| \::/____/        \:::\   \::/    / 
....................           /:::/    /          \::::::::/    /            |::|  ~|               \:::\   \/____/ 
....................          /:::/    /            \::::::/    /             |::|   |                \:::\    \ 
....................         /:::/    /              \::::/    /              \::|   |                 \:::\____\ 
....................         \::/    /                \::/____/                \:|   |                  \::/    / 
....................          \/____/                  ~~                       \|___|                   \/____/ 
....................  
....................    Programa de ejemplo para la AureBoard 
....................    Requerido: Aureboard Versión>2.0 
....................  
....................    - El programa configura el puerto Serie por USB. 
....................    - Cada programa deberá ir en su carpeta al mismo nivel de la carpeta lib 
....................  
....................  
....................  
....................  
....................    A.U.R.E. 2010 
.................... */ 
....................  
.................... #include <../lib/aurebot.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... //Configuramos el pic para que trabaje a 48Mhz con un cristal de 4 Mhz. 
.................... #fuses XTPLL,MCLR,NOWDT,NOPROTECT,NOLVP,NODEBUG, VREGEN  
.................... #fuses IESO,BROWNOUT,STVREN,NOWRT,FCMEN,USBDIV,PLL1,CPUDIV1 
.................... #device adc=8 
.................... #use delay(clock=48000000) 
*
2B8E:  CLRF   FEA
2B90:  MOVLW  A0
2B92:  MOVWF  FE9
2B94:  MOVF   FEF,W
2B96:  BZ    2BB4
2B98:  MOVLW  0F
2B9A:  MOVWF  01
2B9C:  CLRF   00
2B9E:  DECFSZ 00,F
2BA0:  BRA    2B9E
2BA2:  DECFSZ 01,F
2BA4:  BRA    2B9C
2BA6:  MOVLW  8F
2BA8:  MOVWF  00
2BAA:  DECFSZ 00,F
2BAC:  BRA    2BAA
2BAE:  NOP   
2BB0:  DECFSZ FEF,F
2BB2:  BRA    2B98
2BB4:  RETLW  00
....................  
....................  
.................... // Incluimos el descriptor del cargador 
.................... #include "..\lib\bootloader\usb_bootloader.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                     USB_BOOTLOADER.H                              //// 
.................... ////                                                                   //// 
.................... ////  This include file must be included by any application loaded     //// 
.................... ////  by the example USB bootloader (ex_usb_bootloader                 //// 
.................... ////                                                                   //// 
.................... ////  The directives in this file relocate the reset and interrupt     //// 
.................... ////  vectors as well as reserving space for the bootloader.           //// 
.................... ////                                                                   //// 
.................... ////  For more documentation see ex_usb_bootloader.c                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... //how big is the bootloader? 
.................... //the bootloader will reside from address 0x0000 to this location.  the 
.................... //application will then sit at this location+1 to the end of program memory. 
.................... #define LOADER_SIZE        (0x17FF) 
....................  
.................... //the loader and application need a common flag that determines if we are in 
.................... //the bootloader or application, that way the ISR knows where to go.  this 
.................... //is the location in ram that is reserved for this flag. 
.................... #define LOC_IN_LOADER_FLAG  0x25 
....................  
.................... //// --- end configuration --- //////////////////////////////////////////// 
....................  
.................... #reserve LOC_IN_LOADER_FLAG 
....................  
.................... int8 g_InBootloader; 
.................... #locate g_InBootloader=LOC_IN_LOADER_FLAG 
....................  
.................... #define LOADER_START       (0) 
.................... #define LOADER_END         (LOADER_SIZE) 
.................... #define APPLICATION_START  (LOADER_SIZE+1) 
.................... #define APPLICATION_END    (getenv("PROGRAM_MEMORY")-1) 
.................... #define APPLICATION_ISR    (APPLICATION_START+8) 
....................  
.................... #ifdef _bootloader 
....................  /* 
....................   Provide an empty application, so if you load this .HEX file into the pic 
....................   without an application this will prevent the pic from executing unknown code. 
....................  */ 
....................  #org APPLICATION_START,APPLICATION_START+0xF 
....................  void BlankApplication(void)  
....................  { 
....................    while(TRUE); 
....................  } 
....................  
....................  //we need to prevent the loader from using application space 
....................  #if APPLICATION_END>0xFFFF 
....................    #org APPLICATION_START+0x10, 0xFFFF {} 
....................    #if APPLICATION_END>0x1FFFF 
....................       #org 0xFFFF, 0x1FFFF {} 
....................    #else 
....................       #org 0xFFFF, APPLICATION_END {} 
....................    #endif 
....................  #else 
....................    #org APPLICATION_START+0x10, APPLICATION_END {} 
....................  #endif 
.................... #endif 
....................  
.................... #ifndef _bootloader 
....................  //in the application, this moves the reset and isr vector out of the bootload 
....................  //space.  it then reserves the loader space from being used by the application. 
....................  #build(reset=APPLICATION_START, interrupt=APPLICATION_ISR) 
....................  #org 0, LOADER_END {} 
.................... #endif 
....................  
.................... // Incluimos las rutinas de gestión del usb y del "Comunications Device Class" 
.................... #include "..\lib\bootloader\usb_cdc.h" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////                            usb_cdc.h                            //// 
.................... ////                                                                 //// 
.................... //// Library for adding a virtual COM port on your PC over USB using //// 
.................... //// the standard Communication Device Class (CDC) specification.    //// 
.................... //// Including this file in your code will add all USB code,         //// 
.................... //// interrupts, descriptors and handlers required.  No other        //// 
.................... //// modifications need to be made.                                  //// 
.................... ////                                                                 //// 
.................... //// This library creates a virtual RS232 link between the PC and    //// 
.................... //// the PIC, therefore the library provided will be familiar to     //// 
.................... //// anyone with standard UART stream I/O:                           //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_kbhit() - Returns TRUE if there is one or more          //// 
.................... ////      character received and waiting in the receive buffer.      //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_getc() - Gets a character from the receive buffer.  If  //// 
.................... ////      there is no data in the receive buffer it will wait until  //// 
.................... ////      there is data in the receive buffer.  If you do not want   //// 
.................... ////      to wait in an infinit loop, use usb_cdc_kbhit() first to   //// 
.................... ////      check if there is data before calling usb_cdc_getc().      //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_putc(char c) - Puts a character into the transmit       //// 
.................... ////      buffer.  If the transmit buffer is full it will wait until //// 
.................... ////      the transmit buffer is not full before putting the char    //// 
.................... ////      into the transmit buffer.  The transmit buffer is read by  //// 
.................... ////      the PC very quickly, and therefore the buffer should only  //// 
.................... ////      be full for a few milli-seconds.  If you are concerned     //// 
.................... ////      and don't want to be stuck in a long or infinite loop,     //// 
.................... ////      use usb_cdc_putready() to see if there is space in the     //// 
.................... ////      transmit buffer before putting data into the transmit      //// 
.................... ////      buffer.                                                    //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_putready() - Returns TRUE if there is room left in the  //// 
.................... ////      transmit buffer for another character.                     //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_connected() - Returns TRUE if we received a             //// 
.................... ////      Set_Line_Coding.  On most serial terminal programs (such   //// 
.................... ////      as Hyperterminal), they will send a Set_Line_Coding        //// 
.................... ////      message when the program starts and it opens the virtual   //// 
.................... ////      COM port.  This is a simple way to determine if the PC     //// 
.................... ////      is ready to display data on a serial terminal program,     //// 
.................... ////      but is not garaunteed to work all the time or on other     //// 
.................... ////      terminal programs.                                         //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_putc_fast(char c) - Similar to usb_cdc_putc(), except   //// 
.................... ////      if the transmit buffer is full it will skip the char.      //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_line_coding - A structure used for Set_Line_Coding and  //// 
.................... ////       Get_Line_Coding.  Most of the time you can ignore this.   //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_break - If the PC has sent a break command, this will   //// 
.................... ////       hold the break time (in milli-seconds).  If the PC sends  //// 
.................... ////       a value of 0xFFFF the device is supposed to hold the      //// 
.................... ////       break until it sends a value of 0                         //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_carrier - Where Set_Control_Line_State value is stored. //// 
.................... ////       Of most relevance is the field dte_present, which is the  //// 
.................... ////       DTR setting.                                              //// 
.................... ////                                                                 //// 
.................... //// The following functions are also provided, and are ports of the //// 
.................... //// I/O functions in input.c.  See input.c and the CCS manual for   //// 
.................... //// documentation:                                                  //// 
.................... ////   get_float_usb() - Read a float number from the user           //// 
.................... ////   get_long_usb() - Read a long number from the user             //// 
.................... ////   get_int_usb() - Read an integer number from the user          //// 
.................... ////   get_string_usb(char *s, int max) - Read a string from the user. //// 
.................... ////   gethex_usb() - Read a byte, in HEX, from the user             //// 
.................... ////   gethex1_usb() - Read a HEX character                          //// 
.................... ////                                                                 //// 
.................... //// This driver will load all the rest of the USB code, and a set   //// 
.................... //// of descriptors that will properly describe a CDC device for a   //// 
.................... //// virtual COM port (usb_desc_cdc.h)                               //// 
.................... ////                                                                 //// 
.................... //// An .INF file is provided (cdc_NTXP.inf) that will load the      //// 
.................... //// standard CDC drivers for a virtual COM port in Windows          //// 
.................... //// NT/2000/XP and above.  Unfortunately we do not provide an .inf  //// 
.................... //// file for Windows 98 and ME.                                     //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// VERSION HISTORY                                                 //// 
.................... ////                                                                 //// 
.................... //// October 27th, 2005: Changed the way incoming packets are        //// 
.................... ////               handled in that CDC driver will not flush         //// 
.................... ////               endpoint until user has handled all data.  This   //// 
.................... ////               will prevent overflows as the USB will NAK        //// 
.................... ////               incoming packets until it is ready to receive     //// 
.................... ////               more.                                             //// 
.................... ////            When using 18F4550 family, the RX buffer is          //// 
.................... ////               mapped directly to the endpoint buffer - this     //// 
.................... ////               saves a chunk of RAM.                             //// 
.................... ////            When using the 18F4550 family, you can increase      //// 
.................... ////               the TX and RX size over 64 bytes.                 //// 
.................... ////            No longer send 0len packets in the TBE interrupt.    //// 
.................... ////            Hopefully fixed bugs that caused random crashes      //// 
.................... ////               if you tried sending more than 64 bytes.          //// 
.................... ////                                                                 //// 
.................... //// July 6th, 2005: Global interrupts disabled when writing to TX   //// 
.................... ////                   buffer.                                       //// 
.................... ////                                                                 //// 
.................... //// July 1st, 2005: Initial Release.                                //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... //api for the user: 
.................... #define usb_cdc_kbhit() (usb_cdc_get_buffer_status.got) 
.................... #define usb_cdc_putready() (usb_cdc_put_buffer_nextin<USB_CDC_DATA_IN_SIZE) 
.................... #define usb_cdc_connected() (usb_cdc_got_set_line_coding) 
.................... void usb_cdc_putc_fast(char c); 
.................... char usb_cdc_getc(void); 
.................... void usb_cdc_putc(char c); 
....................  
.................... //input.c ported to use CDC: 
.................... float get_float_usb(); 
.................... signed long get_long_usb(); 
.................... signed int get_int_usb(); 
.................... void get_string_usb(char* s, int max); 
.................... BYTE gethex_usb(); 
.................... BYTE gethex1_usb(); 
....................  
.................... //functions automatically called by USB handler code 
.................... void usb_isr_tkn_cdc(void); 
.................... void usb_cdc_init(void); 
.................... void usb_isr_tok_out_cdc_control_dne(void); 
.................... void usb_isr_tok_in_cdc_data_dne(void); 
.................... void usb_isr_tok_out_cdc_data_dne(void); 
....................  
.................... void usb_cdc_flush_out_buffer(void); 
....................  
.................... //Tells the CCS PIC USB firmware to include HID handling code. 
.................... #DEFINE USB_HID_DEVICE  FALSE 
.................... #DEFINE USB_CDC_DEVICE  TRUE 
....................  
.................... #define USB_CDC_COMM_IN_ENDPOINT       1 
.................... #define USB_CDC_COMM_IN_SIZE           8 
.................... #define USB_EP1_TX_ENABLE  USB_ENABLE_INTERRUPT 
.................... #define USB_EP1_TX_SIZE  USB_CDC_COMM_IN_SIZE 
....................  
.................... //pic to pc endpoint config 
.................... #define USB_CDC_DATA_IN_ENDPOINT       2 
.................... #define USB_CDC_DATA_IN_SIZE           64 
.................... #define USB_EP2_TX_ENABLE  USB_ENABLE_BULK 
.................... #define USB_EP2_TX_SIZE  USB_CDC_DATA_IN_SIZE 
....................  
.................... //pc to pic endpoint config 
.................... #define USB_CDC_DATA_OUT_ENDPOINT       2 
.................... #define USB_CDC_DATA_OUT_SIZE           64 
.................... #define USB_EP2_RX_ENABLE  USB_ENABLE_BULK 
.................... #define USB_EP2_RX_SIZE  USB_CDC_DATA_OUT_SIZE 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // Include the CCS USB Libraries.  See the comments at the top of these 
.................... // files for more information 
.................... // 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... #ifndef __USB_PIC_PERIF__ 
.................... #define __USB_PIC_PERIF__   1 
.................... #endif 
....................  
.................... #if __USB_PIC_PERIF__ 
....................  #if defined(__PCM__) 
....................   #error CDC requires bulk mode!  PIC16C7x5 does not have bulk mode 
....................  #else 
....................   #include <pic18_usb.h>   //Microchip 18Fxx5x hardware layer for usb.c 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes: //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor //// 
.................... ////   usb.c - USB token and request handler code                    //// 
.................... ////   usb.h - definitions, prototypes and global variables          //// 
.................... ////                                                                 //// 
.................... //// The following examples are provided by CCS:                     //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                 //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.       //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple  //// 
.................... ////                      interfaces.                                //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple //// 
.................... ////                      HID Reports.                               //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom        //// 
.................... ////                    protocol requiring custom Windows drivers.   //// 
.................... ////   ex_usb_serial.c -                                             //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for   //// 
.................... ////     a virtual COM port.                                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on C4 or C5 depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on C3, even if you are using  //// 
.................... ////  the internal 3.3V USB regulator.                               //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ////    ****************   USER FUNCTIONS  ***********************   //// 
.................... ////                                                                 //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and  //// 
.................... ////              attaches the unit to the usb bus.  Enables         //// 
.................... ////              interrupts.                                        //// 
.................... ////                                                                 //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit      //// 
.................... ////              to usb bus or enable interrupts.                   //// 
.................... ////                                                                 //// 
.................... //// usb_put_packet() - Sends one packet to the host.                //// 
.................... ////                    If you need to send a message that spans     //// 
.................... ////                    more than one packet then see usb_puts() in  //// 
.................... ////                    usb.c                                        //// 
.................... ////                                                                 //// 
.................... //// usb_kbhit() - Returns true if OUT endpoint contains data from   //// 
.................... ////               host.                                             //// 
.................... ////                                                                 //// 
.................... //// usb_rx_packet_size() - Returns the size of packet that was      //// 
.................... ////               received.  usb_kbhit() must return TRUE else      //// 
.................... ////               this is not valid.  Don't forget in USB there     //// 
.................... ////               are 0 len packets!                                //// 
.................... ////                                                                 //// 
.................... //// usb_get_packet() - Gets one packet that from the host.          //// 
.................... ////                    usb_kbhit() must return true before you call //// 
.................... ////                    this routine or your data may not be valid.  //// 
.................... ////                    Once usb_kbhit() returns true you want to    //// 
.................... ////                    call this as soon as possible to get data    //// 
.................... ////                    out of the endpoint buffer so the PC can     //// 
.................... ////                    start sending more data, if needed.          //// 
.................... ////                    This only receives one packet, if you are    //// 
.................... ////                    trying to receive a multi-packet message     //// 
.................... ////                    see usb_gets() in usb.c.                     //// 
.................... ////                                                                 //// 
.................... //// usb_detach() - De-attach USB from the system.                   //// 
.................... ////                                                                 //// 
.................... //// usb_attach() - Attach USB to the system.                        //// 
.................... ////                                                                 //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a    //// 
.................... ////                  USB cable.  A macro that looks at the defined  //// 
.................... ////                  connection sense pin.                          //// 
.................... ////                                                                 //// 
.................... //// usb_task() - Keeps track of connection sense, calling           //// 
.................... ////              usb_detach() and usb_attach() when needed.         //// 
.................... ////                                                                 //// 
.................... //// For more documentation on these functions read the comments at  //// 
.................... //// each function.                                                  //// 
.................... ////                                                                 //// 
.................... //// The other functions defined in this file are for use by the     //// 
.................... //// USB code, and is not meant to be used by the user.              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_HARDWARE__ 
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_BUFFER_SPACE  ((int16)getenv("RAM")-0x500) 
....................  #define USB_MAX_NUM_ENDPOINTS  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #if ((USB_EP3_TX_SIZE + USB_EP3_RX_SIZE + USB_EP4_TX_SIZE + USB_EP4_RX_SIZE + \ 
....................       USB_EP5_TX_SIZE + USB_EP5_RX_SIZE + USB_EP6_TX_SIZE + USB_EP6_RX_SIZE + \ 
....................       USB_EP7_TX_SIZE + USB_EP7_RX_SIZE + USB_EP8_TX_SIZE + USB_EP8_RX_SIZE + \ 
....................       USB_EP9_TX_SIZE + USB_EP9_RX_SIZE + USB_EP10_TX_SIZE + USB_EP10_RX_SIZE + \ 
....................       USB_EP11_TX_SIZE + USB_EP11_RX_SIZE + USB_EP12_TX_SIZE +USB_EP12_RX_SIZE + \ 
....................       USB_EP13_TX_SIZE + USB_EP13_RX_SIZE + USB_EP14_TX_SIZE + USB_EP14_RX_SIZE + \ 
....................       USB_EP15_TX_SIZE + USB_EP15_RX_SIZE) > 0) 
....................    #error This driver only supports endpoints 0, 1 and 2 for this chip. 
....................  #endif 
....................  #define USB_MAX_NUM_ENDPOINTS  3 
....................  #define USB_TOTAL_BUFFER_SPACE  (0x100 - USB_MAX_NUM_ENDPOINTS*8) 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550")) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_BUFFER_SPACE  ((int16)0x300) 
....................  #define USB_MAX_NUM_ENDPOINTS  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #if defined(__USB_4450__) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... ////                   **** DEFINITIONS *****                          //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (FALSE) - Set to TRUE if your device supports        //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            Only the 18Fxx5x USB peripheral can    //// 
.................... ////                            have a value larger than 8.            //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE  //set to false to opt for less RAM, true to opt for less ROM 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     0 
.................... #define USB_ENABLE_BULK         0x01 
.................... #define USB_ENABLE_ISOCHRONOUS  0x02 
.................... #define USB_ENABLE_INTERRUPT    0x03 
.................... #define USB_ENABLE_CONTROL      0x04 
....................  
.................... //// DO NOT CHANGE THE FOLLOWING VALUES: 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #else 
.................... struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #endif 
....................  
.................... int16 __usb_kbhit_status; 
....................  
.................... /// *** User function prototypes 
.................... void usb_wait_for_enumeration(void); 
.................... int1 usb_unermated(void); 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout); 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout); 
....................  
.................... /// *** Token and request hanlder function prototypes 
.................... void usb_token_reset(); 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_request_send_response(int len);   //always sends usb_ep0_rx_buffer[] to endpoint 0 with a toggle of DATA 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tok_in_dne(int8 endpoint); 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
....................  
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
....................  
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
....................  
.................... void usb_finish_set_address(void); 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #define USB_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if (USB_BUFFER_NEEDED > USB_TOTAL_BUFFER_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if defined(__USB_4450__) 
....................  #reserve 0x400:0x4FF 
.................... #else 
....................  #reserve 0x400:0x4FF+USB_BUFFER_NEEDED 
.................... #endif 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #ifndef USB_USE_ERROR_COUNTER 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #ifndef USB_PING_PONG_MODE 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte USTAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte USTAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... #byte UEP0    =  UEP0_LOC 
....................  
.................... #if defined(__USB_4450__) 
....................  //#define USB_BUFFER (0x400 + (USB_MAX_NUM_ENDPOINTS*8)) //compiler doesnt support this 
....................  #if USB_MAX_NUM_ENDPOINTS==3 
....................   #define USB_BUFFER 0x418   //if you have an old compiler you will need to use this 
....................  #else 
....................   #error Define USB_BUFFER for the number of endpoints you have (0x400 + NUM*0x08) 
....................  #endif 
.................... #else 
....................  #define USB_BUFFER 0x500 
.................... #endif 
....................  
.................... #byte BD0STAT  =  0x400 
.................... #byte BD0CNT  =  0x401 
.................... #byte BD0ADRL  =  0x402 
.................... #byte BD0ADRJ  =  0x403 
....................  
.................... #define BD0STAT_LOC 0x400 
.................... #define BD0CNT_LOC  0x401 
.................... #define BD0ADRL_LOC 0x402 
.................... #define BD0ADRH_LOC 0x403 
....................  
.................... #define UEP(x) *(UEP0_LOC+x) 
....................  
.................... #BIT UIR_SOF = UIR.6 
.................... #BIT UIR_STALL = UIR.5 
.................... #BIT UIR_IDLE = UIR.4 
.................... #BIT UIR_TRN = UIR.3 
.................... #BIT UIR_ACTV = UIR.2 
.................... #BIT UIR_UERR = UIR.1 
.................... #BIT UIR_URST = UIR.0 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    *(BD0STAT_LOC + x*8) 
....................  #define EP_BDxCNT_O(x)    *(BD0CNT_LOC + x*8) 
....................  #define EP_BDxADR_O(x)   *(int16 *)(BD0ADRL_LOC + x*8) 
....................  #define EP_BDxST_I(x)    *(BD0STAT_LOC + 4 + x*8) 
....................  #define EP_BDxCNT_I(x)    *(BD0CNT_LOC + 4 + x*8) 
....................  #define EP_BDxADR_I(x)   *(int16 *)(BD0ADRL_LOC + 4 + x*8) 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS 0x3F 
.................... #else 
....................  #define STANDARD_INTS 0x3D 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #define __USB_UCFG_UTRDIS  0x08 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #define __UCFG_VAL_DISABLED__ 0x08 
....................  
.................... char usb_ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
.................... #locate usb_ep0_rx_buffer=USB_BUFFER 
....................  
.................... char usb_ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
.................... #locate usb_ep0_tx_buffer=USB_BUFFER+USB_MAX_EP0_PACKET_LENGTH 
....................  
.................... char usb_data_buffer[USB_TOTAL_BUFFER_SPACE-USB_MAX_EP0_PACKET_LENGTH-USB_MAX_EP0_PACKET_LENGTH]; 
.................... #locate usb_data_buffer=USB_BUFFER+USB_MAX_EP0_PACKET_LENGTH+USB_MAX_EP0_PACKET_LENGTH 
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //following functions standard part of CCS PIC USB driver, and used by usb.c 
.................... void usb_init(); 
.................... void usb_detach(); 
.................... int1 usb_put_packet(int endpoint, int * ptr, int16 len, USB_DTS_BIT tgl); 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); //marks the transmit buffer as ready for transmission 
.................... int16 usb_get_packet(int8 endpoint, int8 * ptr, int16 max); 
.................... int16 usb_rx_packet_size(int8 endpoint); 
.................... int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max); 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
.................... void usb_stall_ep(int8 endpoint); 
.................... void usb_unstall_ep(int8 endpoint); 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
.................... void usb_set_address(int8 address); 
.................... void usb_set_configured(int config); 
.................... void usb_disable_endpoints(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void) {  //done 
....................    UCON=0;  //disable USB hardware 
....................    UIE=0;   //disable USB interrupts 
....................    UCFG = __UCFG_VAL_DISABLED__; 
....................    set_tris_c(*0xF94 | 0x30); 
....................    usb_state=USB_STATE_DETACHED; 
....................    usb_token_reset();              //clear the chapter9 stack 
....................    __usb_kbhit_status=0; 
.................... } 
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void) { 
*
2E90:  CLRF   18
2E92:  BTFSC  FF2.7
2E94:  BSF    18.7
2E96:  BCF    FF2.7
....................    usb_token_reset(); 
2E98:  CALL   1F96
2E9C:  BTFSC  18.7
2E9E:  BSF    FF2.7
....................     UCON = 0; 
2EA0:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
2EA2:  MOVLW  14
2EA4:  MOVWF  F6F
....................     UIE = 0;                                // Mask all USB interrupts 
2EA6:  CLRF   F69
....................     UCON_USBEN = 1;                     // Enable module & attach to bus 
2EA8:  BSF    F6D.3
....................     usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
2EAA:  MOVLW  01
2EAC:  MOVWF  1F
.................... } 
2EAE:  GOTO   2EB8 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: Resets and initalizes USB peripheral.  Does not attach the peripheral 
.................... /*          to the USB bus.  See usb_attach() and usb_task() on how to 
.................... /*          attach to the USB bus. 
.................... /* 
.................... /*          You must call this before any other USB code. 
.................... /* 
.................... /*          NOTE: an alternative function, usb_init(), is provided that 
.................... /*                initializes the USB and then connects. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #define usb_init_cs usb_detach 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: Keeps an eye on the connection sense pin to determine if we are 
.................... /*          attached to a USB cable or not.  If we are attached to a USB cable, 
.................... /*          initialize the USB peripheral if needed.  If we are disconnected 
.................... /*          from the USB cable, disable the USB peripheral. 
.................... /* 
.................... /*          NOTE: If you are not using a connection sense pin, will automatically 
.................... /*                enable the USB peripheral. 
.................... /* 
.................... /*          NOTE: this enables interrupts once the USB peripheral is ready 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void) { 
....................    if (usb_attached()) { 
....................       if (UCON_USBEN==0) { 
2EB2:  BTFSC  F6D.3
2EB4:  BRA    2EB8
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
2EB6:  BRA    2E90
....................       } 
....................    } 
....................    else { 
....................       if (UCON_USBEN==1)  { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0)) { 
2EB8:  DECFSZ 1F,W
2EBA:  BRA    2ED2
2EBC:  BTFSC  F6D.5
2EBE:  BRA    2ED2
....................       UIR=0; 
2EC0:  CLRF   F68
....................       UIE=0; 
2EC2:  CLRF   F69
....................       enable_interrupts(INT_USB); 
2EC4:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
2EC6:  MOVLW  C0
2EC8:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB interrupt 
2ECA:  MOVLW  11
2ECC:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
2ECE:  MOVLW  02
2ED0:  MOVWF  1F
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
2ED2:  GOTO   366C (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: Resets and initalizes USB hardware.  You must call this first before 
.................... /*          using code.  Will attach the USB periperhal to the USB bus. 
.................... /* 
.................... /*          NOTE: If you are using a connection sense pin, this will wait in 
.................... /*                an infinite loop until the device is connected to a USB cable. 
.................... /* 
.................... /*          NOTE: If you are not using a connection sense pin, this will wait 
.................... /*                in an infinte loop until the SE0 condition clears, which usually 
.................... /*                doesn't take long 
.................... /* 
.................... /*          NOTE: this enables interrupts. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void) { 
....................    usb_init_cs(); 
....................  
....................    do { 
....................       usb_task(); 
....................    } while (usb_state != USB_STATE_POWERED); 
.................... } 
....................  
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC) 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl) { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    i=EP_BDxST_I(endpoint); 
*
2772:  MOVF   xB5,W
2774:  MULLW  08
2776:  MOVF   FF3,W
2778:  ADDLW  04
277A:  MOVWF  01
277C:  MOVLW  04
277E:  MOVWF  03
2780:  BTFSC  FD8.0
2782:  INCF   03,F
2784:  MOVFF  01,FE9
2788:  MOVFF  03,FEA
278C:  MOVFF  FEF,B9
....................    if (!bit_test(i,7)) { 
2790:  BTFSC  xB9.7
2792:  BRA    284A
....................  
....................       EP_BDxCNT_I(endpoint)=len; 
2794:  MOVF   xB5,W
2796:  MULLW  08
2798:  MOVF   FF3,W
279A:  ADDLW  05
279C:  MOVWF  01
279E:  MOVLW  04
27A0:  MOVWF  03
27A2:  BTFSC  FD8.0
27A4:  INCF   03,F
27A6:  MOVFF  01,FE9
27AA:  MOVFF  03,FEA
27AE:  MOVFF  B6,FEF
....................  
....................      debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE) { 
27B2:  MOVF   xB8,W
27B4:  SUBLW  02
27B6:  BNZ   27E4
....................          i=EP_BDxST_I(endpoint); 
27B8:  MOVF   xB5,W
27BA:  MULLW  08
27BC:  MOVF   FF3,W
27BE:  ADDLW  04
27C0:  MOVWF  01
27C2:  MOVLW  04
27C4:  MOVWF  03
27C6:  BTFSC  FD8.0
27C8:  INCF   03,F
27CA:  MOVFF  01,FE9
27CE:  MOVFF  03,FEA
27D2:  MOVFF  FEF,B9
....................          if (bit_test(i,6)) 
27D6:  BTFSS  xB9.6
27D8:  BRA    27DE
....................             tgl=USB_DTS_DATA0;  //was DATA1, goto DATA0 
27DA:  CLRF   xB8
....................          else 
27DC:  BRA    27E2
....................             tgl=USB_DTS_DATA1;  //was DATA0, goto DATA1 
27DE:  MOVLW  01
27E0:  MOVWF  xB8
....................       } 
....................       else if (tgl == USB_DTS_USERX) { 
27E2:  BRA    280A
27E4:  MOVF   xB8,W
27E6:  SUBLW  04
27E8:  BNZ   280A
....................          i=EP_BDxST_O(endpoint); 
27EA:  MOVF   xB5,W
27EC:  MULLW  08
27EE:  MOVFF  FF3,01
27F2:  MOVLW  04
27F4:  MOVFF  01,FE9
27F8:  MOVWF  FEA
27FA:  MOVFF  FEF,B9
....................          if (bit_test(i,6)) 
27FE:  BTFSS  xB9.6
2800:  BRA    2808
....................             tgl=USB_DTS_DATA1; 
2802:  MOVLW  01
2804:  MOVWF  xB8
....................          else 
2806:  BRA    280A
....................             tgl=USB_DTS_DATA0; 
2808:  CLRF   xB8
....................       } 
....................       if (tgl == USB_DTS_DATA1) { 
280A:  DECFSZ xB8,W
280C:  BRA    2814
....................          i=0xC8;  //DATA1, UOWN 
280E:  MOVLW  C8
2810:  MOVWF  xB9
....................       } 
....................       else if (tgl == USB_DTS_DATA0) { 
2812:  BRA    281C
2814:  MOVF   xB8,F
2816:  BNZ   281C
....................          i=0x88; //DATA0, UOWN 
2818:  MOVLW  88
281A:  MOVWF  xB9
....................       } 
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
281C:  BTFSC  xB7.0
281E:  BSF    xB9.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
2820:  BTFSC  xB7.1
2822:  BSF    xB9.1
....................  
....................       debug_usb(debug_putc," %X",i); 
....................  
....................       EP_BDxST_I(endpoint)=i;//save changes 
2824:  MOVF   xB5,W
2826:  MULLW  08
2828:  MOVF   FF3,W
282A:  ADDLW  04
282C:  MOVWF  01
282E:  MOVLW  04
2830:  MOVWF  03
2832:  BTFSC  FD8.0
2834:  INCF   03,F
2836:  MOVFF  01,FE9
283A:  MOVFF  03,FEA
283E:  MOVFF  B9,FEF
....................  
....................       return(1); 
2842:  MOVLW  01
2844:  MOVWF  01
2846:  BRA    284E
....................    } 
....................     else { 
2848:  BRA    284A
....................          debug_usb(debug_putc,"\r\nPUT ERR"); 
....................     } 
....................    return(0); 
284A:  MOVLW  00
284C:  MOVWF  01
.................... } 
284E:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_put_packet(endpoint,*ptr,len,toggle) 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to 
.................... /*        ptr - points to data to send 
.................... /*        len - amount of data to send 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid, or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only reason it will 
.................... /*         return FALSE is if because the TX buffer is still full from the last time you 
.................... /*         tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a difference 
.................... /*          between a packet and a message.  If you wanted to send a 512 byte message you 
.................... /*          would accomplish this by sending 8 64-byte packets, followed by a 0 length packet. 
.................... /*          If the last (or only packet) being sent is less than the max packet size defined 
.................... /*          in your descriptor then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message correctly. 
.................... /* 
.................... /********************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl) { //done 
....................    int16 j; 
....................    int8 i; 
....................    int8 * buff_add;     
....................  
....................    i=EP_BDxST_I(endpoint); 
*
293C:  MOVF   xAA,W
293E:  MULLW  08
2940:  MOVF   FF3,W
2942:  ADDLW  04
2944:  MOVWF  01
2946:  MOVLW  04
2948:  MOVWF  03
294A:  BTFSC  FD8.0
294C:  INCF   03,F
294E:  MOVFF  01,FE9
2952:  MOVFF  03,FEA
2956:  MOVFF  FEF,B2
....................    if (!bit_test(i,7)) { 
295A:  BTFSC  xB2.7
295C:  BRA    29DC
....................  
....................       buff_add=EP_BDxADR_I(endpoint); 
295E:  MOVF   xAA,W
2960:  MULLW  08
2962:  MOVF   FF3,W
2964:  ADDLW  06
2966:  MOVWF  01
2968:  MOVLW  04
296A:  MOVWF  03
296C:  BTFSC  FD8.0
296E:  INCF   03,F
2970:  MOVFF  01,FE9
2974:  MOVFF  03,FEA
2978:  MOVFF  FEC,03
297C:  MOVF   FED,F
297E:  MOVFF  FEF,B3
2982:  MOVFF  03,B4
....................  
....................       for (j=0;j<len;j++) { 
2986:  CLRF   xB1
2988:  CLRF   xB0
298A:  MOVF   xB1,W
298C:  SUBWF  xAE,W
298E:  BNC   29C4
2990:  BNZ   2998
2992:  MOVF   xAD,W
2994:  SUBWF  xB0,W
2996:  BC    29C4
....................          *buff_add=*ptr; 
2998:  MOVFF  AB,FE9
299C:  MOVFF  AC,FEA
29A0:  MOVFF  FEF,B7
29A4:  MOVFF  B4,FEA
29A8:  MOVFF  B3,FE9
29AC:  MOVFF  B7,FEF
....................          buff_add++; 
29B0:  INCF   xB3,F
29B2:  BTFSC  FD8.2
29B4:  INCF   xB4,F
....................          ptr++; 
29B6:  INCF   xAB,F
29B8:  BTFSC  FD8.2
29BA:  INCF   xAC,F
....................       } 
29BC:  INCF   xB0,F
29BE:  BTFSC  FD8.2
29C0:  INCF   xB1,F
29C2:  BRA    298A
....................  
....................       return(usb_flush_in(endpoint, len, tgl)); 
29C4:  MOVFF  AA,B5
29C8:  MOVFF  AE,B7
29CC:  MOVFF  AD,B6
29D0:  MOVFF  AF,B8
29D4:  RCALL  2772
29D6:  MOVF   01,W
29D8:  BRA    29E0
....................     } 
....................     else { 
29DA:  BRA    29DC
....................         debug_usb(debug_putc,"\r\nPUT ERR"); 
....................     } 
....................     return(0); 
29DC:  MOVLW  00
29DE:  MOVWF  01
.................... } 
29E0:  RETLW  00
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB.C 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC) 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl) { 
....................    int8 i; 
....................    int16 len; 
....................  
....................      #if USB_IGNORE_RX_DTS 
....................       if (tgl == USB_DTS_STALL) { 
....................          debug_usb(debug_putc, '*'); 
....................          i=0x84; 
....................          EP_BDxST_I(endpoint)=0x84; 
....................          return; 
....................       } 
....................       else 
....................          i=0x80; 
....................      #else 
....................       i=EP_BDxST_O(endpoint); 
*
268C:  MOVF   xA9,W
268E:  MULLW  08
2690:  MOVFF  FF3,01
2694:  MOVLW  04
2696:  MOVFF  01,FE9
269A:  MOVWF  FEA
269C:  MOVFF  FEF,AB
....................       if (tgl == USB_DTS_TOGGLE) { 
26A0:  MOVF   xAA,W
26A2:  SUBLW  02
26A4:  BNZ   26B2
....................          if (bit_test(i,6)) 
26A6:  BTFSS  xAB.6
26A8:  BRA    26AE
....................             tgl=USB_DTS_DATA0;  //was DATA1, goto DATA0 
26AA:  CLRF   xAA
....................          else 
26AC:  BRA    26B2
....................             tgl=USB_DTS_DATA1;  //was DATA0, goto DATA1 
26AE:  MOVLW  01
26B0:  MOVWF  xAA
....................       } 
....................       if (tgl == USB_DTS_STALL) { 
26B2:  MOVF   xAA,W
26B4:  SUBLW  03
26B6:  BNZ   26DC
....................          i=0x84; 
26B8:  MOVLW  84
26BA:  MOVWF  xAB
....................          EP_BDxST_I(endpoint)=0x84; //stall both in and out endpoints 
26BC:  MOVF   xA9,W
26BE:  MULLW  08
26C0:  MOVF   FF3,W
26C2:  ADDLW  04
26C4:  MOVWF  01
26C6:  MOVLW  04
26C8:  MOVWF  03
26CA:  BTFSC  FD8.0
26CC:  INCF   03,F
26CE:  MOVFF  01,FE9
26D2:  MOVFF  03,FEA
26D6:  MOVLW  84
26D8:  MOVWF  FEF
....................       } 
....................       else if (tgl == USB_DTS_DATA1) { 
26DA:  BRA    26EE
26DC:  DECFSZ xAA,W
26DE:  BRA    26E6
....................          i=0xC8;  //DATA1, UOWN 
26E0:  MOVLW  C8
26E2:  MOVWF  xAB
....................       } 
....................       else if (tgl == USB_DTS_DATA0) { 
26E4:  BRA    26EE
26E6:  MOVF   xAA,F
26E8:  BNZ   26EE
....................          i=0x88; //DATA0, UOWN 
26EA:  MOVLW  88
26EC:  MOVWF  xAB
....................       } 
....................      #endif 
....................  
....................    bit_clear(__usb_kbhit_status,endpoint); 
26EE:  CLRF   03
26F0:  MOVLW  01
26F2:  MOVWF  02
26F4:  MOVF   xA9,W
26F6:  MOVWF  00
26F8:  BZ    2704
26FA:  BCF    FD8.0
26FC:  RLCF   02,F
26FE:  RLCF   03,F
2700:  DECFSZ 00,F
2702:  BRA    26FA
2704:  MOVF   02,W
2706:  XORLW  FF
2708:  MOVWF  00
270A:  MOVLW  FF
270C:  XORWF  03,F
270E:  MOVF   00,W
2710:  ANDWF  1D,F
2712:  MOVF   03,W
2714:  ANDWF  1E,F
....................  
....................    len=usb_ep_rx_size[endpoint]; 
2716:  BCF    FD8.0
2718:  RLCF   xA9,W
271A:  CLRF   03
271C:  MOVFF  FF2,AE
2720:  BCF    FF2.7
2722:  CALL   191A
2726:  TBLRD*+
2728:  MOVFF  FF5,03
272C:  BTFSC  xAE.7
272E:  BSF    FF2.7
2730:  MOVWF  xAC
2732:  MOVFF  03,AD
....................    EP_BDxCNT_O(endpoint)=len; 
2736:  MOVF   xA9,W
2738:  MULLW  08
273A:  MOVF   FF3,W
273C:  ADDLW  01
273E:  MOVWF  01
2740:  MOVLW  04
2742:  MOVWF  03
2744:  BTFSC  FD8.0
2746:  INCF   03,F
2748:  MOVFF  01,FE9
274C:  MOVFF  03,FEA
2750:  MOVFF  AC,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
2754:  BTFSC  xAD.0
2756:  BSF    xAB.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
2758:  BTFSC  xAD.1
275A:  BSF    xAB.1
....................  
....................  
....................    EP_BDxST_O(endpoint)=i; 
275C:  MOVF   xA9,W
275E:  MULLW  08
2760:  MOVFF  FF3,01
2764:  MOVLW  04
2766:  MOVFF  01,FE9
276A:  MOVWF  FEA
276C:  MOVFF  AB,FEF
.................... } 
2770:  RETLW  00
....................  
.................... int16 usb_rx_packet_size(int8 endpoint) { 
....................    return(EP_BDxCNT_O(endpoint)); 
*
28AC:  MOVF   xAA,W
28AE:  MULLW  08
28B0:  MOVF   FF3,W
28B2:  ADDLW  01
28B4:  MOVWF  01
28B6:  MOVLW  04
28B8:  MOVWF  03
28BA:  BTFSC  FD8.0
28BC:  INCF   03,F
28BE:  MOVFF  01,FE9
28C2:  MOVFF  03,FEA
28C6:  CLRF   03
28C8:  MOVFF  FEF,01
28CC:  MOVFF  03,02
.................... } 
28D0:  GOTO   28DE (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /********************************************************************************/ 
.................... int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max) { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al=EP_BDxADR_O(endpoint); 
....................    i=EP_BDxCNT_O(endpoint); 
....................    st=EP_BDxST_O(endpoint); 
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
....................    if (bit_test(st,1)) {bit_set(i,9);} 
....................  
....................    if (i<max) {max=i;} 
....................  
....................    i=0; 
....................  
....................    while (i<max) { 
....................        *ptr=*al; 
....................        ptr++; 
....................        al++; 
....................        i++; 
....................    } 
....................  
....................    return(max); 
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC RAM. 
.................... /*          Until you call usb_get_packet() the data will sit in the endpoint 
.................... /*          buffer and the PC will get NAKs when it tries to write more data 
.................... /*          to the endpoint. 
.................... /* 
.................... /********************************************************************************/ 
.................... int16 usb_get_packet(int8 endpoint, int8 * ptr, int16 max) { 
....................  
....................    max=usb_get_packet_buffer(endpoint,ptr,max); 
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
....................  
....................    return(max); 
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /********************************************************************************/ 
.................... int8 usb_tbe(int8 endpoint) { 
....................    int8 st; 
....................    st=EP_BDxST_I(endpoint); 
....................    if (!bit_test(st,7)) 
....................       return(TRUE); 
....................    return(FALSE); 
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_stall_ep(endpoint,direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will send STALL packet 
.................... /*          if the host tries to access this endpoint's buffer. 
.................... /* 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK THIS 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint) {  //done 
....................    int1 direction; 
....................    direction=bit_test(endpoint,7); 
*
24C2:  BCF    xAA.0
24C4:  BTFSC  xA9.7
24C6:  BSF    xAA.0
....................    endpoint&=0x7F; 
24C8:  BCF    xA9.7
....................    if (direction) { 
24CA:  BTFSS  xAA.0
24CC:  BRA    24EE
....................       EP_BDxST_I(endpoint)=0x84; 
24CE:  MOVF   xA9,W
24D0:  MULLW  08
24D2:  MOVF   FF3,W
24D4:  ADDLW  04
24D6:  MOVWF  01
24D8:  MOVLW  04
24DA:  MOVWF  03
24DC:  BTFSC  FD8.0
24DE:  INCF   03,F
24E0:  MOVFF  01,FE9
24E4:  MOVFF  03,FEA
24E8:  MOVLW  84
24EA:  MOVWF  FEF
....................    } 
....................    else { 
24EC:  BRA    2502
....................       EP_BDxST_O(endpoint)=0x84; 
24EE:  MOVF   xA9,W
24F0:  MULLW  08
24F2:  MOVFF  FF3,01
24F6:  MOVLW  04
24F8:  MOVFF  01,FE9
24FC:  MOVWF  FEA
24FE:  MOVLW  84
2500:  MOVWF  FEF
....................    } 
.................... } 
2502:  GOTO   258A (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK THIS 
.................... /********************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint) {   //done 
....................    int1 direction; 
....................    direction=bit_test(endpoint,7); 
*
2480:  BCF    xAA.0
2482:  BTFSC  xA9.7
2484:  BSF    xAA.0
....................    endpoint&=0x7F; 
2486:  BCF    xA9.7
....................    if (direction) { 
2488:  BTFSS  xAA.0
248A:  BRA    24AC
....................       #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint)=0x80; 
....................       #else 
....................       EP_BDxST_I(endpoint)=0x88; 
248C:  MOVF   xA9,W
248E:  MULLW  08
2490:  MOVF   FF3,W
2492:  ADDLW  04
2494:  MOVWF  01
2496:  MOVLW  04
2498:  MOVWF  03
249A:  BTFSC  FD8.0
249C:  INCF   03,F
249E:  MOVFF  01,FE9
24A2:  MOVFF  03,FEA
24A6:  MOVLW  88
24A8:  MOVWF  FEF
....................       #endif 
....................    } 
....................    else { 
24AA:  BRA    24BE
....................       EP_BDxST_O(endpoint)=0x00; 
24AC:  MOVF   xA9,W
24AE:  MULLW  08
24B0:  MOVFF  FF3,01
24B4:  MOVLW  04
24B6:  MOVFF  01,FE9
24BA:  MOVWF  FEA
24BC:  CLRF   FEF
....................    } 
.................... } 
24BE:  GOTO   257E (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_endpoint_stalled(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and Clear_Feature 
.................... /*          Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK THIS 
.................... /********************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint) {   //done 
....................    int1 direction; 
....................    int8 st; 
....................    direction=bit_test(endpoint,7); 
*
2506:  BCF    xAA.0
2508:  BTFSC  xA9.7
250A:  BSF    xAA.0
....................    endpoint&=0x7F; 
250C:  BCF    xA9.7
....................    if (direction) { 
250E:  BTFSS  xAA.0
2510:  BRA    2532
....................       st=EP_BDxST_I(endpoint); 
2512:  MOVF   xA9,W
2514:  MULLW  08
2516:  MOVF   FF3,W
2518:  ADDLW  04
251A:  MOVWF  01
251C:  MOVLW  04
251E:  MOVWF  03
2520:  BTFSC  FD8.0
2522:  INCF   03,F
2524:  MOVFF  01,FE9
2528:  MOVFF  03,FEA
252C:  MOVFF  FEF,AB
....................    } 
....................    else { 
2530:  BRA    2546
....................       st=EP_BDxST_O(endpoint); 
2532:  MOVF   xA9,W
2534:  MULLW  08
2536:  MOVFF  FF3,01
253A:  MOVLW  04
253C:  MOVFF  01,FE9
2540:  MOVWF  FEA
2542:  MOVFF  FEF,AB
....................    } 
....................    return(bit_test(st,7) && bit_test(st,2)); 
2546:  BTFSS  xAB.7
2548:  BRA    254E
254A:  BTFSC  xAB.2
254C:  BRA    2552
254E:  MOVLW  00
2550:  BRA    2554
2552:  MOVLW  01
2554:  MOVWF  01
.................... } 
2556:  GOTO   259E (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.  The host 
.................... /*          will now talk to use with the following address. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_set_address(int8 address) {   //done 
....................    UADDR=address; 
*
2918:  MOVFF  AA,F6E
....................    if (address) { 
291C:  MOVF   xAA,F
291E:  BZ    2926
....................       usb_state=USB_STATE_ADDRESS; 
2920:  MOVLW  04
2922:  MOVWF  1F
....................    } 
....................    else { 
2924:  BRA    292A
....................       usb_state=USB_STATE_POWERED; 
2926:  MOVLW  02
2928:  MOVWF  1F
....................    } 
.................... } 
292A:  GOTO   2938 (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_set_configured(config) 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_set_configured(int config) { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................       if (config==0) { 
*
2156:  MOVF   xA9,F
2158:  BNZ   2162
....................          //if config=0 then set addressed state 
....................          usb_state=USB_STATE_ADDRESS; 
215A:  MOVLW  04
215C:  MOVWF  1F
....................          usb_disable_endpoints(); 
215E:  RCALL  1FBE
....................       } 
....................       else { 
2160:  BRA    22F0
....................          usb_state=USB_STATE_CONFIGURED; //else set configed state 
2162:  MOVLW  05
2164:  MOVWF  1F
....................          addy=(int16)USB_BUFFER+(2*USB_MAX_EP0_PACKET_LENGTH); 
2166:  MOVWF  xAC
2168:  MOVLW  80
216A:  MOVWF  xAB
....................          for (en=1;en<16;en++) { 
216C:  MOVLW  01
216E:  MOVWF  xAA
2170:  MOVF   xAA,W
2172:  SUBLW  0F
2174:  BTFSS  FD8.0
2176:  BRA    22F0
....................             new_uep=0; 
2178:  CLRF   xAD
....................             if (usb_ep_rx_type[en]!=USB_ENABLE_DISABLED) { 
217A:  CLRF   03
217C:  MOVF   xAA,W
217E:  MOVFF  FF2,B1
2182:  BCF    FF2.7
2184:  CALL   18CA
2188:  BTFSC  xB1.7
218A:  BSF    FF2.7
218C:  XORLW  00
218E:  BZ    2236
....................                new_uep=0x04; 
2190:  MOVLW  04
2192:  MOVWF  xAD
....................                len=usb_ep_rx_size[en]; 
2194:  BCF    FD8.0
2196:  RLCF   xAA,W
2198:  CLRF   03
219A:  MOVFF  FF2,B1
219E:  BCF    FF2.7
21A0:  CALL   191A
21A4:  TBLRD*+
21A6:  MOVFF  FF5,03
21AA:  BTFSC  xB1.7
21AC:  BSF    FF2.7
21AE:  MOVWF  xAE
21B0:  MOVFF  03,AF
....................                EP_BDxCNT_O(en)=len; 
21B4:  MOVF   xAA,W
21B6:  MULLW  08
21B8:  MOVF   FF3,W
21BA:  ADDLW  01
21BC:  MOVWF  01
21BE:  MOVLW  04
21C0:  MOVWF  03
21C2:  BTFSC  FD8.0
21C4:  INCF   03,F
21C6:  MOVFF  01,FE9
21CA:  MOVFF  03,FEA
21CE:  MOVFF  AE,FEF
....................                EP_BDxADR_O(en)=addy; 
21D2:  MOVF   xAA,W
21D4:  MULLW  08
21D6:  MOVF   FF3,W
21D8:  ADDLW  02
21DA:  MOVWF  01
21DC:  MOVLW  04
21DE:  MOVWF  03
21E0:  BTFSC  FD8.0
21E2:  INCF   03,F
21E4:  MOVFF  01,FE9
21E8:  MOVFF  03,FEA
21EC:  MOVFF  AC,FEC
21F0:  MOVF   FED,F
21F2:  MOVFF  AB,FEF
....................                addy+=usb_ep_rx_size[en]; 
21F6:  BCF    FD8.0
21F8:  RLCF   xAA,W
21FA:  CLRF   03
21FC:  MOVFF  FF2,B1
2200:  BCF    FF2.7
2202:  CALL   191A
2206:  TBLRD*+
2208:  MOVFF  FF5,03
220C:  BTFSC  xB1.7
220E:  BSF    FF2.7
2210:  ADDWF  xAB,F
2212:  MOVF   03,W
2214:  ADDWFC xAC,F
....................                #if USB_IGNORE_RX_DTS 
....................                   i=0x80; 
....................                #else 
....................                   i=0x88; 
2216:  MOVLW  88
2218:  MOVWF  xB0
....................                #endif 
....................                if (bit_test(len,8)) {bit_set(i,0);} 
221A:  BTFSC  xAF.0
221C:  BSF    xB0.0
....................                if (bit_test(len,9)) {bit_set(i,1);} 
221E:  BTFSC  xAF.1
2220:  BSF    xB0.1
....................                EP_BDxST_O(en)=i; 
2222:  MOVF   xAA,W
2224:  MULLW  08
2226:  MOVFF  FF3,01
222A:  MOVLW  04
222C:  MOVFF  01,FE9
2230:  MOVWF  FEA
2232:  MOVFF  B0,FEF
....................             } 
....................             if (usb_ep_tx_type[en]!=USB_ENABLE_DISABLED) { 
2236:  CLRF   03
2238:  MOVF   xAA,W
223A:  MOVFF  FF2,B1
223E:  BCF    FF2.7
2240:  CALL   18AA
2244:  BTFSC  xB1.7
2246:  BSF    FF2.7
2248:  XORLW  00
224A:  BZ    22B0
....................                new_uep|=0x02; 
224C:  BSF    xAD.1
....................                EP_BDxADR_I(en)=addy; 
224E:  MOVF   xAA,W
2250:  MULLW  08
2252:  MOVF   FF3,W
2254:  ADDLW  06
2256:  MOVWF  01
2258:  MOVLW  04
225A:  MOVWF  03
225C:  BTFSC  FD8.0
225E:  INCF   03,F
2260:  MOVFF  01,FE9
2264:  MOVFF  03,FEA
2268:  MOVFF  AC,FEC
226C:  MOVF   FED,F
226E:  MOVFF  AB,FEF
....................                addy+=usb_ep_tx_size[en]; 
2272:  BCF    FD8.0
2274:  RLCF   xAA,W
2276:  CLRF   03
2278:  MOVFF  FF2,B1
227C:  BCF    FF2.7
227E:  CALL   18EA
2282:  TBLRD*+
2284:  MOVFF  FF5,03
2288:  BTFSC  xB1.7
228A:  BSF    FF2.7
228C:  ADDWF  xAB,F
228E:  MOVF   03,W
2290:  ADDWFC xAC,F
....................                EP_BDxST_I(en)=0x40; 
2292:  MOVF   xAA,W
2294:  MULLW  08
2296:  MOVF   FF3,W
2298:  ADDLW  04
229A:  MOVWF  01
229C:  MOVLW  04
229E:  MOVWF  03
22A0:  BTFSC  FD8.0
22A2:  INCF   03,F
22A4:  MOVFF  01,FE9
22A8:  MOVFF  03,FEA
22AC:  MOVLW  40
22AE:  MOVWF  FEF
....................             } 
....................             if (new_uep==0x06) {new_uep=0x0E;} 
22B0:  MOVF   xAD,W
22B2:  SUBLW  06
22B4:  BNZ   22BA
22B6:  MOVLW  0E
22B8:  MOVWF  xAD
....................             if (usb_ep_tx_type[en]!=USB_ENABLE_ISOCHRONOUS) { 
22BA:  CLRF   03
22BC:  MOVF   xAA,W
22BE:  MOVFF  FF2,B1
22C2:  BCF    FF2.7
22C4:  CALL   18AA
22C8:  BTFSC  xB1.7
22CA:  BSF    FF2.7
22CC:  SUBLW  02
22CE:  BZ    22D2
....................                new_uep|=0x10; 
22D0:  BSF    xAD.4
....................             } 
....................             UEP(en)=new_uep; 
22D2:  MOVLW  70
22D4:  ADDWF  xAA,W
22D6:  MOVWF  01
22D8:  MOVLW  0F
22DA:  MOVWF  03
22DC:  BTFSC  FD8.0
22DE:  INCF   03,F
22E0:  MOVFF  01,FE9
22E4:  MOVFF  03,FEA
22E8:  MOVFF  AD,FEF
....................          } 
22EC:  INCF   xAA,F
22EE:  BRA    2170
....................       } 
.................... } 
22F0:  GOTO   2386 (RETURN)
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... /******************************************************************************* 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt method), 
.................... /*       then you must call this function rapidly.  If there is more than 10ms 
.................... /*       latency the PC may think the USB device is stalled and disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this fuction. 
.................... /*       Also, goto usb_init() and remove the code that enables the USB interrupt. 
.................... /********************************************************************************/ 
.................... #int_usb 
.................... void usb_isr() { 
....................    if (usb_state==USB_STATE_DETACHED) return;   //should never happen, though 
*
2AFC:  MOVF   1F,F
2AFE:  BNZ   2B02
2B00:  BRA    2B60
....................    if (UIR) { 
2B02:  MOVF   F68,F
2B04:  BZ    2B60
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();}  //activity detected.  (only enable after sleep) 
2B06:  BTFSS  F68.2
2B08:  BRA    2B12
2B0A:  BTFSS  F69.2
2B0C:  BRA    2B12
2B0E:  GOTO   1F60
....................  
....................       if (UCON_SUSPND) return; 
2B12:  BTFSS  F6D.1
2B14:  BRA    2B18
2B16:  BRA    2B60
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
2B18:  BTFSS  F68.1
2B1A:  BRA    2B24
2B1C:  BTFSS  F69.1
2B1E:  BRA    2B24
2B20:  GOTO   1F6A
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
2B24:  BTFSS  F68.0
2B26:  BRA    2B30
2B28:  BTFSS  F69.0
2B2A:  BRA    2B30
2B2C:  GOTO   2008
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
2B30:  BTFSS  F68.4
2B32:  BRA    2B3C
2B34:  BTFSS  F69.4
2B36:  BRA    2B3C
2B38:  GOTO   2032
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
2B3C:  BTFSS  F68.6
2B3E:  BRA    2B48
2B40:  BTFSS  F69.6
2B42:  BRA    2B48
2B44:  GOTO   203C
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
2B48:  BTFSS  F68.5
2B4A:  BRA    2B54
2B4C:  BTFSS  F69.5
2B4E:  BRA    2B54
2B50:  GOTO   2042
....................  
....................       if (UIR_TRN && UIE_TRN) { 
2B54:  BTFSS  F68.3
2B56:  BRA    2B60
2B58:  BTFSS  F69.3
2B5A:  BRA    2B60
....................          usb_isr_tok_dne(); 
2B5C:  BRA    2A32
....................          UIR_TRN=0;    // clear the token done interrupt., 0x190.3 
2B5E:  BCF    F68.3
....................       }    //a token has been detected (majority of isrs) 
....................    } 
.................... } 
....................  
.................... //SOF interrupt not handled.  user must add this depending on application 
2B60:  BCF    FA1.5
2B62:  GOTO   1864
.................... void usb_isr_sof(void) { 
....................    debug_usb(debug_putc,"\r\nSOF"); 
....................    UIR_SOF=0; 
*
203C:  BCF    F68.6
.................... } 
203E:  GOTO   2B48 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints 1 thru 15 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoints(void) { 
....................    int8 i; 
....................    for (i=1;i<16;i++) { 
*
1FBE:  MOVLW  01
1FC0:  MOVWF  xB1
1FC2:  MOVF   xB1,W
1FC4:  SUBLW  0F
1FC6:  BNC   1FE4
....................       UEP(i)=ENDPT_DISABLED; 
1FC8:  MOVLW  70
1FCA:  ADDWF  xB1,W
1FCC:  MOVWF  01
1FCE:  MOVLW  0F
1FD0:  MOVWF  03
1FD2:  BTFSC  FD8.0
1FD4:  INCF   03,F
1FD6:  MOVFF  01,FE9
1FDA:  MOVFF  03,FEA
1FDE:  CLRF   FEF
....................    } 
1FE0:  INCF   xB1,F
1FE2:  BRA    1FC2
....................    __usb_kbhit_status=0; 
1FE4:  CLRF   1E
1FE6:  CLRF   1D
.................... } 
1FE8:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_rst() { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR=0; 
*
2008:  CLRF   F6A
....................    UIR=0; 
200A:  CLRF   F68
....................    UEIE=0x9F; 
200C:  MOVLW  9F
200E:  MOVWF  F6B
....................    UIE=STANDARD_INTS & ~__USB_UIF_ACTIVE; 
2010:  MOVLW  39
2012:  MOVWF  F69
....................  
....................    UADDR=0; 
2014:  CLRF   F6E
....................  
....................    usb_token_reset(); 
2016:  RCALL  1F96
....................  
....................    usb_disable_endpoints(); 
2018:  RCALL  1FBE
....................  
....................    UEP(0)=ENDPT_CONTROL | 0x10; 
201A:  MOVLW  16
201C:  MOVWF  F70
....................  
....................    while (UIR_TRN) { 
201E:  BTFSS  F68.3
2020:  BRA    2026
....................       UIR_TRN=0;    //do this to clear out the ustat fifo 
2022:  BCF    F68.3
....................    } 
2024:  BRA    201E
....................  
....................    UCON_PKTDIS=0; //SIE token and packet processing enabled 
2026:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
2028:  RCALL  1FEA
....................  
....................    usb_state=USB_STATE_DEFAULT; //put usb mcu into default state 
202A:  MOVLW  03
202C:  MOVWF  1F
.................... } 
202E:  GOTO   2B30 (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void) { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
1FEA:  MOVLW  40
1FEC:  MOVLB  4
1FEE:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_BUFFER; 
1FF0:  MOVLW  05
1FF2:  MOVWF  x03
1FF4:  CLRF   x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
1FF6:  MOVLW  88
1FF8:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
1FFA:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_BUFFER + (int16)USB_MAX_EP0_PACKET_LENGTH; 
1FFC:  MOVLW  05
1FFE:  MOVWF  x07
2000:  MOVLW  40
2002:  MOVWF  x06
.................... } 
2004:  MOVLB  0
2006:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr() { 
.................... #if USB_USE_ERROR_COUNTER 
....................    int ints; 
.................... #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) ) { //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) ) {  //increment crc5 error counter 
....................       debug_usbdebug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) ) {  //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) ) {  //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) ) {  //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) ) { //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
.................... #endif 
....................  
....................    UEIR=0; 
*
1F6A:  CLRF   F6A
....................    UIR_UERR=0; 
1F6C:  BCF    F68.1
.................... } 
1F6E:  GOTO   2B24 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_uidle() { 
....................    debug_usb(debug_putc,"I"); 
....................  
....................    UIE_ACTV=1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
2032:  BSF    F69.2
....................    UIR_IDLE=0; //clear idle interrupt flag 
2034:  BCF    F68.4
....................    UCON_SUSPND=1; //set suspend. we are now suspended 
2036:  BSF    F6D.1
.................... } 
2038:  GOTO   2B3C (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_activity() { 
....................    debug_usb(debug_putc,"A"); 
....................  
....................    UCON_SUSPND=0; //turn off low power suspending 
*
1F60:  BCF    F6D.1
....................    UIE_ACTV=0; //clear activity interupt enabling 
1F62:  BCF    F69.2
....................    UIR_ACTV=0; 
1F64:  BCF    F68.2
.................... } 
1F66:  GOTO   2B12 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_stall(void) { 
....................    debug_usb(debug_putc,"S"); 
....................  
....................    if (bit_test(UEP(0),0)) { 
*
2042:  BTFSS  F70.0
2044:  BRA    204A
....................       usb_init_ep0_setup(); 
2046:  RCALL  1FEA
....................       bit_clear(UEP(0),0); 
2048:  BCF    F70.0
....................    } 
....................    UIR_STALL=0; 
204A:  BCF    F68.5
.................... } 
204C:  GOTO   2B54 (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_tok_dne() { 
....................    int8 en; 
....................  
....................    en=USTAT>>3; 
*
2A32:  RRCF   F6C,W
2A34:  MOVWF  xA8
2A36:  RRCF   xA8,F
2A38:  RRCF   xA8,F
2A3A:  MOVLW  1F
2A3C:  ANDWF  xA8,F
....................  
....................          debug_usb(debug_putc,"T "); 
....................          debug_usb(debug_putc,"%X ", USTAT); 
....................  
....................       if (USTAT==USTAT_OUT_SETUP_E0) {   //new out or setup token in the buffer 
2A3E:  MOVF   F6C,F
2A40:  BNZ   2AB8
....................          debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................          if ((EP_BDxST_O(0) & 0x3C)==USB_PIC_PID_SETUP) { 
2A42:  MOVLB  4
2A44:  MOVF   x00,W
2A46:  ANDLW  3C
2A48:  SUBLW  34
2A4A:  BNZ   2A82
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
2A4C:  CLRF   x04
....................  
....................             debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................             debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................             usb_isr_tok_setup_dne(); 
2A4E:  MOVLB  0
2A50:  BRA    2662
....................  
....................             //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) 
....................             //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone 
....................             //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit 
....................             if (__setup_0_tx_size==0xFF) 
2A52:  INCFSZ 20,W
2A54:  BRA    2A60
....................                usb_flush_out(0,USB_DTS_STALL); 
2A56:  CLRF   xA9
2A58:  MOVLW  03
2A5A:  MOVWF  xAA
2A5C:  RCALL  268C
....................             else { 
2A5E:  BRA    2A7C
....................                usb_flush_out(0,USB_DTS_TOGGLE); 
2A60:  CLRF   xA9
2A62:  MOVLW  02
2A64:  MOVWF  xAA
2A66:  RCALL  268C
....................                if (__setup_0_tx_size!=0xFE) { 
2A68:  MOVF   20,W
2A6A:  SUBLW  FE
2A6C:  BZ    2A7C
....................                   usb_flush_in(0,__setup_0_tx_size,USB_DTS_USERX); 
2A6E:  CLRF   xB5
2A70:  CLRF   xB7
2A72:  MOVFF  20,B6
2A76:  MOVLW  04
2A78:  MOVWF  xB8
2A7A:  RCALL  2772
....................                } 
....................             } 
....................             UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
2A7C:  BCF    F6D.4
....................          } 
....................          else if ((EP_BDxST_O(0) & 0x3C)==USB_PIC_PID_OUT) { 
2A7E:  BRA    2AB2
2A80:  MOVLB  4
2A82:  MOVF   x00,W
2A84:  ANDLW  3C
2A86:  SUBLW  04
2A88:  BNZ   2AB4
....................             usb_isr_tok_out_dne(0); 
2A8A:  MOVLB  0
2A8C:  CLRF   xA9
2A8E:  RCALL  28E6
....................             usb_flush_out(0,USB_DTS_TOGGLE); 
2A90:  CLRF   xA9
2A92:  MOVLW  02
2A94:  MOVWF  xAA
2A96:  RCALL  268C
....................             if ((__setup_0_tx_size!=0xFE)&&(__setup_0_tx_size!=0xFF)) { 
2A98:  MOVF   20,W
2A9A:  SUBLW  FE
2A9C:  BZ    2AB2
2A9E:  INCFSZ 20,W
2AA0:  BRA    2AA4
2AA2:  BRA    2AB2
....................                usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
2AA4:  CLRF   xB5
2AA6:  CLRF   xB7
2AA8:  MOVFF  20,B6
2AAC:  MOVLW  01
2AAE:  MOVWF  xB8
2AB0:  RCALL  2772
2AB2:  MOVLB  4
....................             } 
....................          } 
....................       } 
....................  
....................       else if (USTAT==USTAT_IN_E0) {   //pic -> host transfer completed 
2AB4:  BRA    2AF6
2AB6:  MOVLB  0
2AB8:  MOVF   F6C,W
2ABA:  SUBLW  04
2ABC:  BNZ   2AE2
....................          __setup_0_tx_size=0xFF; 
2ABE:  MOVLW  FF
2AC0:  MOVWF  20
....................          usb_isr_tok_in_dne(0); 
2AC2:  CLRF   xA9
2AC4:  RCALL  2A10
....................          if (__setup_0_tx_size!=0xFF) 
2AC6:  INCFSZ 20,W
2AC8:  BRA    2ACC
2ACA:  BRA    2ADC
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_TOGGLE); 
2ACC:  CLRF   xB5
2ACE:  CLRF   xB7
2AD0:  MOVFF  20,B6
2AD4:  MOVLW  02
2AD6:  MOVWF  xB8
2AD8:  RCALL  2772
....................          else 
2ADA:  BRA    2AE0
....................             usb_init_ep0_setup(); 
2ADC:  CALL   1FEA
....................       } 
....................  
....................       else { 
2AE0:  BRA    2AF4
....................          if (!bit_test(USTAT,2)) { 
2AE2:  BTFSC  F6C.2
2AE4:  BRA    2AEE
....................             usb_isr_tok_out_dne(en); 
2AE6:  MOVFF  A8,A9
2AEA:  RCALL  28E6
....................          } 
....................          else { 
2AEC:  BRA    2AF4
....................             usb_isr_tok_in_dne(en); 
2AEE:  MOVFF  A8,A9
2AF2:  RCALL  2A10
2AF4:  MOVLB  4
....................          } 
....................       } 
.................... } 
2AF6:  MOVLB  0
2AF8:  GOTO   2B5E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(int len) { 
....................    __setup_0_tx_size=len; 
*
2050:  MOVFF  AC,20
.................... } 
2054:  RETLW  00
....................  
.................... void usb_request_get_data(void) { 
....................    __setup_0_tx_size=0xFE; 
*
25BA:  MOVLW  FE
25BC:  MOVWF  20
.................... } 
25BE:  RETLW  00
....................  
.................... void usb_request_stall(void) { 
....................    __setup_0_tx_size=0xFF; 
*
2056:  MOVLW  FF
2058:  MOVWF  20
.................... } 
205A:  RETLW  00
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
....................  #endif 
.................... #else 
....................  #include <usbn960x.c>   //National 960x hardware layer for usb.c 
.................... #endif 
.................... #include "..\lib\bootloader\usb_desc_cdc.h"   //USB Configuration and Device descriptors for this UBS device 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_desc_cdc.h                            //// 
.................... ////                                                                   //// 
.................... //// An example set of device / configuration descriptors for use with //// 
.................... //// CCS's CDC Virtual COM Port driver (see usb_cdc.h)                 //// 
.................... ////                                                                   //// 
.................... //// Two examples are provided:                                        //// 
.................... ////      ex_usb_serial.c                                              //// 
.................... ////      ex_usb_serial2.c                                             //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// 10/28/05:                                                         //// 
.................... ////    Bulk endpoint sizes updated to allow more than 255 byte        //// 
.................... ////    packets.                                                       //// 
.................... ////    Changed device to USB 1.10                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... ////                   **** DEFINITIONS *****                          //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (FALSE) - Set to TRUE if your device supports        //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            Only the 18Fxx5x USB peripheral can    //// 
.................... ////                            have a value larger than 8.            //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE  //set to false to opt for less RAM, true to opt for less ROM 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     0 
.................... #define USB_ENABLE_BULK         0x01 
.................... #define USB_ENABLE_ISOCHRONOUS  0x02 
.................... #define USB_ENABLE_INTERRUPT    0x03 
.................... #define USB_ENABLE_CONTROL      0x04 
....................  
.................... //// DO NOT CHANGE THE FOLLOWING VALUES: 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #else 
.................... struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #endif 
....................  
.................... int16 __usb_kbhit_status; 
....................  
.................... /// *** User function prototypes 
.................... void usb_wait_for_enumeration(void); 
.................... int1 usb_unermated(void); 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout); 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout); 
....................  
.................... /// *** Token and request hanlder function prototypes 
.................... void usb_token_reset(); 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_request_send_response(int len);   //always sends usb_ep0_rx_buffer[] to endpoint 0 with a toggle of DATA 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tok_in_dne(int8 endpoint); 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
....................  
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
....................  
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
....................  
.................... void usb_finish_set_address(void); 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start config descriptor 
.................... ///   right now we only support one configuration descriptor. 
.................... ///   the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
....................    #DEFINE USB_TOTAL_CONFIG_LEN      67  //config+interface+class+endpoint+endpoint (2 endpoints) 
....................  
....................    const char USB_CONFIG_DESC[] = { 
....................    //IN ORDER TO COMPLY WITH WINDOWS HOSTS, THE ORDER OF THIS ARRAY MUST BE: 
....................       //    config(s) 
....................       //    interface(s) 
....................       //    class(es) 
....................       //    endpoint(s) 
....................  
....................    //config_descriptor for config index 1 
....................          USB_DESC_CONFIG_LEN, //length of descriptor size          ==0 
....................          USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (CONFIGURATION 0x02)     ==1 
....................          USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config      ==2,3 
....................          2, //number of interfaces this device supports       ==4 
....................          0x01, //identifier for this configuration.  (IF we had more than one configurations)      ==5 
....................          0x00, //index of string descriptor for this configuration      ==6 
....................          0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 unused and bit7=1         ==7 
....................          0x32, //maximum bus power required (maximum milliamperes/2)  (0x32 = 100mA)  ==8 
....................  
....................    //interface descriptor 0 (comm class interface) 
....................          USB_DESC_INTERFACE_LEN, //length of descriptor      =9 
....................          USB_DESC_INTERFACE_TYPE, //constant INTERFACE (INTERFACE 0x04)       =10 
....................          0x00, //number defining this interface (IF we had more than one interface)    ==11 
....................          0x00, //alternate setting     ==12 
....................          1, //number of endpoints   ==13 
....................          0x02, //class code, 02 = Comm Interface Class     ==14 
....................          0x02, //subclass code, 2 = Abstract     ==15 
....................          0x01, //protocol code, 1 = v.25ter      ==16 
....................          0x00, //index of string descriptor for interface      ==17 
....................  
....................    //class descriptor [functional header] 
....................          5, //length of descriptor    ==18 
....................          0x24, //dscriptor type (0x24 == )      ==19 
....................          0, //sub type (0=functional header) ==20 
....................          0x10,0x01, //      ==21,22 //cdc version 
....................  
....................    //class descriptor [acm header] 
....................          4, //length of descriptor    ==23 
....................          0x24, //dscriptor type (0x24 == )      ==24 
....................          2, //sub type (2=ACM)   ==25 
....................          2, //capabilities    ==26  //we support Set_Line_Coding, Set_Control_Line_State, Get_Line_Coding, and the notification Serial_State. 
....................  
....................    //class descriptor [union header] 
....................          5, //length of descriptor    ==27 
....................          0x24, //dscriptor type (0x24 == )      ==28 
....................          6, //sub type (6=union)    ==29 
....................          0, //master intf     ==30  //The interface number of the Communication or Dat a Cl ass interface, designated as the masteror controlling interface for the union. 
....................          1, //save intf0      ==31  //Interface number of first slave or associated interface in the union. * 
....................  
....................    //class descriptor [call mgmt header] 
....................          5, //length of descriptor    ==32 
....................          0x24, //dscriptor type (0x24 == )      ==33 
....................          1, //sub type (1=call mgmt)   ==34 
....................          0, //capabilities          ==35  //device does not handle call management itself 
....................          1, //data interface        ==36  //interface number of data class interface 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==37 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==38 
....................          USB_CDC_COMM_IN_ENDPOINT | 0x80, //endpoint number and direction 
....................          0x03, //transfer type supported (0x03 is interrupt)         ==40 
....................          USB_CDC_COMM_IN_SIZE,0x00, //maximum packet size supported                  ==41,42 
....................          250,  //polling interval, in ms.  (cant be smaller than 10)      ==43 
....................  
....................    //interface descriptor 1 (data class interface) 
....................          USB_DESC_INTERFACE_LEN, //length of descriptor      =44 
....................          USB_DESC_INTERFACE_TYPE, //constant INTERFACE (INTERFACE 0x04)       =45 
....................          0x01, //number defining this interface (IF we had more than one interface)    ==46 
....................          0x00, //alternate setting     ==47 
....................          2, //number of endpoints   ==48 
....................          0x0A, //class code, 0A = Data Interface Class     ==49 
....................          0x00, //subclass code      ==50 
....................          0x00, //protocol code      ==51 
....................          0x00, //index of string descriptor for interface      ==52 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==60 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==61 
....................          USB_CDC_DATA_OUT_ENDPOINT, //endpoint number and direction (0x02 = EP2 OUT)       ==62 
....................          0x02, //transfer type supported (0x02 is bulk)         ==63 
.................... //         make8(USB_CDC_DATA_OUT_SIZE,0),make8(USB_CDC_DATA_OUT_SIZE,1), //maximum packet size supported                  ==64, 65 
....................          USB_CDC_DATA_OUT_SIZE & 0xFF, (USB_CDC_DATA_OUT_SIZE >> 8) & 0xFF, //maximum packet size supported                  ==64, 65 
....................          250,  //polling interval, in ms.  (cant be smaller than 10)      ==66 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==53 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==54 
....................          USB_CDC_DATA_IN_ENDPOINT | 0x80, //endpoint number and direction (0x82 = EP2 IN)       ==55 
....................          0x02, //transfer type supported (0x02 is bulk)         ==56 
.................... //         make8(USB_CDC_DATA_IN_SIZE,0),make8(USB_CDC_DATA_IN_SIZE,1), //maximum packet size supported                  ==57, 58 
....................          USB_CDC_DATA_IN_SIZE & 0xFF, (USB_CDC_DATA_IN_SIZE >> 8) & 0xFF, //maximum packet size supported                  ==64, 65 
....................          250,  //polling interval, in ms.  (cant be smaller than 10)      ==59 
....................    }; 
....................  
....................    //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
....................    //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
....................    //  a specific descriptor in the above table. 
....................  
....................    //the maximum number of interfaces seen on any config 
....................    //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
....................    #define USB_MAX_NUM_INTERFACES   2 
....................  
....................    //define how many interfaces there are per config.  [0] is the first config, etc. 
....................    const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={2}; 
....................  
....................    //define where to find class descriptors 
....................    //first dimension is the config number 
....................    //second dimension specifies which interface 
....................    //last dimension specifies which class in this interface to get, but most will only have 1 class per interface 
....................    //if a class descriptor is not valid, set the value to 0xFFFF 
....................    const int16 USB_CLASS_DESCRIPTORS[USB_NUM_CONFIGURATIONS][USB_MAX_NUM_INTERFACES][4]= 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          //class 1-4 
....................          18,23,27,32, 
....................       //interface 1 
....................          //no classes for this interface 
....................          0xFFFF,0xFFFF,0xFFFF,0xFFFF 
....................    }; 
....................  
....................    #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
....................       #error USB_TOTAL_CONFIG_LEN not defined correctly 
....................    #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
....................    const char USB_DEVICE_DESC[USB_DESC_DEVICE_LEN] ={ 
....................       //starts of with device configuration. only one possible 
....................          USB_DESC_DEVICE_LEN, //the length of this report   ==0 
....................          0x01, //the constant DEVICE (DEVICE 0x01)  ==1 
....................          0x10,0x01, //usb version in bcd  ==2,3 
....................          0x02, //class code. 0x02=Communication Device Class ==4 
....................          0x00, //subclass code ==5 
....................          0x00, //protocol code ==6 
....................          USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) ==7 
....................          0xD8,0x04, //vendor id (0x04D8 is Microchip, or is it 0x0461 ??) ==8,9 
....................          0x01,0x00, //product id ==10,11 
....................          0x00,0x01, //device release number  ==12,13 
....................          0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below)  ==14 
....................          0x02, //index of string descriptor of the product  ==15 
....................          0x00, //index of string descriptor of serial number  ==16 
....................          USB_NUM_CONFIGURATIONS  //number of possible configurations  ==17 
....................    }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start string descriptors 
.................... ///   String 0 is a special language string, and must be defined.  People in U.S.A. can leave this alone. 
.................... /// 
.................... ///   You must define the length else get_next_string_character() will not see the string 
.................... ///   Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string.  offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... char USB_STRING_DESC_OFFSET[]={0,4,14}; 
....................  
.................... char const USB_STRING_DESC[]={ 
....................    //string 0 
....................          4, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          0x09,0x04,   //Microsoft Defined for US-English 
....................    //string 1 
....................          10, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          'A',0, 
....................          'U',0, 
....................          'R',0, 
....................          'E',0, 
....................    //string 2 
....................          40, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          'A',0, 
....................          'u',0, 
....................          'r',0, 
....................          'e',0, 
....................          'B',0, 
....................          'o',0, 
....................          'a',0, 
....................          'r',0, 
....................          'd',0, 
....................          ' ',0, 
....................          'U',0, 
....................          's',0, 
....................          'b',0, 
....................          '-',0, 
....................          'S',0, 
....................          'e',0, 
....................          'r',0, 
....................          'i',0, 
....................          'e',0,         
.................... }; 
....................  
.................... #ENDIF 
....................  
.................... #include <usb.c>        //handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... //// Many settings important to the USB API are defined in usb.h.      //// 
.................... //// See the documentation in usb.h about these settings.              //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The following functions are of use to  //// 
.................... //// the user (for more docs on the functions, read the comments at    //// 
.................... //// each function):                                                   //// 
.................... ////                                                                   //// 
.................... ////    **********************  FUNCTIONS  ***********************     //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral until you //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit() - Returns true if OUT endpoint contains data from     //// 
.................... ////               host.                                               //// 
.................... ////                                                                   //// 
.................... //// usb_puts() - Sends a multiple packet message to the host          //// 
.................... ////                                                                   //// 
.................... //// usb_gets() - Gets multiple packets from the host                  //// 
.................... ////                                                                   //// 
.................... //// The rest of the functions in this file are part of the USB        //// 
.................... //// interrupt service routine and are not meant to be called by the   //// 
.................... //// user.                                                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must include the following functions:                             //// 
.................... ////                                                                   //// 
.................... //// void usb_stall_ep(int8 endpoint);                                 //// 
.................... //// void usb_unstall_ep(int8 endpoint);                               //// 
.................... //// int1 usb_endpoint_stalled(int8 endpoint);                         //// 
.................... //// void usb_set_address(int8 address);                               //// 
.................... //// void usb_set_configured(int config);                              //// 
.................... //// int8 usb_get_packet(int8 endpoint, int8 * ptr, int8 max);         //// 
.................... //// int1 usb_put_packet(int endpoint, int * ptr, int len, USB_DTS_BIT toggle); //// 
.................... //// void usb_request_send_response(int8 len);                                //// 
.................... //// int1 usb_kbhit(int8 endpoint);                                    //// 
.................... ////                                                                   //// 
.................... //// CCS provides a USB peripheral hardware layer for PIC16C7x5        //// 
.................... //// (pic_usb.h), 18Fxx5x (pic18_usb.h) and National's USBN960x        //// 
.................... //// (usbn960x.c).  See these files for more documentation.            //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... ////                   **** DEFINITIONS *****                          //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (FALSE) - Set to TRUE if your device supports        //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            Only the 18Fxx5x USB peripheral can    //// 
.................... ////                            have a value larger than 8.            //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE  //set to false to opt for less RAM, true to opt for less ROM 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     0 
.................... #define USB_ENABLE_BULK         0x01 
.................... #define USB_ENABLE_ISOCHRONOUS  0x02 
.................... #define USB_ENABLE_INTERRUPT    0x03 
.................... #define USB_ENABLE_CONTROL      0x04 
....................  
.................... //// DO NOT CHANGE THE FOLLOWING VALUES: 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #else 
.................... struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #endif 
....................  
.................... int16 __usb_kbhit_status; 
....................  
.................... /// *** User function prototypes 
.................... void usb_wait_for_enumeration(void); 
.................... int1 usb_unermated(void); 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout); 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout); 
....................  
.................... /// *** Token and request hanlder function prototypes 
.................... void usb_token_reset(); 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_request_send_response(int len);   //always sends usb_ep0_rx_buffer[] to endpoint 0 with a toggle of DATA 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tok_in_dne(int8 endpoint); 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
....................  
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
....................  
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
....................  
.................... void usb_finish_set_address(void); 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #define usb_kbhit(x) bit_test(__usb_kbhit_status,x) 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: Use this to see if device is configured / enumerated. 
.................... /***************************************************************/ 
.................... #define usb_enumerated() (USB_stack_status.curr_config) 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void) { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts(endpoint, *ptr, len, timeout) 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before timeout. 
.................... /*                   set to 0 for no timeout. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  If sending 
.................... /*          only one packet it is more effecient to use only usb_put_packet() 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout) { 
....................    int16 i=0; 
....................    int1 res; 
....................    int16 this_packet_len; 
....................    int16 packet_size; 
....................    int32 timeout_1us; 
....................  
....................    packet_size=usb_ep_tx_size[endpoint]; 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len=packet_size;} 
....................       else {this_packet_len=len-i;} 
....................       do { 
....................          res=usb_put_packet(endpoint,ptr + i,this_packet_len,USB_DTS_TOGGLE);   //send 64 byte packets 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i+=packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res=usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before timeout. 
.................... /*                   set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /* NOTE: NOT THOUROUGHLY TESTED.  I AM NOT EVEN SURE IF THIS IS A GOOD IDEA 
.................... /* 
.................... /*****************************************************************************/ 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout) { 
....................    int16 ret=0; 
....................    int16 to; 
....................    int16 len; 
....................    int16 packet_size; 
....................    int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output: modifies global variables USB_Interface[], in[], usb_getdesc_ptr, 
.................... /*         usb_getdesc_len, USB_status_device, USB_dev_req 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset() { 
....................    int i; 
....................  
....................  
....................  
....................       for (i=0;i<USB_MAX_NUM_INTERFACES;i++) { 
*
1F96:  CLRF   xA8
1F98:  MOVF   xA8,W
1F9A:  SUBLW  01
1F9C:  BNC   1FB2
....................          USB_Interface[i]=0;   //reset each interface to default 
1F9E:  CLRF   03
1FA0:  MOVF   xA8,W
1FA2:  ADDLW  28
1FA4:  MOVWF  FE9
1FA6:  MOVLW  00
1FA8:  ADDWFC 03,W
1FAA:  MOVWF  FEA
1FAC:  CLRF   FEF
....................       } 
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) { 
....................        hid_protocol[i]=1; 
....................    } 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
1FAE:  INCF   xA8,F
1FB0:  BRA    1F98
....................    usb_cdc_init(); 
1FB2:  RCALL  1F72
....................   #endif 
....................  
....................     USB_stack_status.curr_config=0;      //unconfigured device 
1FB4:  CLRF   1A
....................  
....................     USB_stack_status.status_device=1;    //previous state.  init at none 
1FB6:  MOVLW  01
1FB8:  MOVWF  1B
....................     USB_stack_status.dev_req=NONE;       //previous token request state.  init at none 
1FBA:  CLRF   19
.................... } 
1FBC:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... // 
.................... int1 usb_endpoint_is_valid(int8 endpoint) { 
....................    int1 direction; 
....................    direction = bit_test(endpoint,7); 
*
242E:  BCF    xAA.0
2430:  BTFSC  xA9.7
2432:  BSF    xAA.0
....................    endpoint &= 0x7F; 
2434:  BCF    xA9.7
....................    if (direction) { //IN 
2436:  BTFSS  xAA.0
2438:  BRA    245C
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
243A:  CLRF   03
243C:  MOVF   xA9,W
243E:  MOVFF  FF2,AB
2442:  BCF    FF2.7
2444:  CALL   18AA
2448:  BTFSC  xAB.7
244A:  BSF    FF2.7
244C:  XORLW  00
244E:  BNZ   2454
2450:  MOVLW  00
2452:  BRA    2456
2454:  MOVLW  01
2456:  MOVWF  01
2458:  BRA    247C
....................    } 
....................    else {   //OUT 
245A:  BRA    247C
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
245C:  CLRF   03
245E:  MOVF   xA9,W
2460:  MOVFF  FF2,AB
2464:  BCF    FF2.7
2466:  CALL   18CA
246A:  BTFSC  xAB.7
246C:  BSF    FF2.7
246E:  XORLW  00
2470:  BNZ   2476
2472:  MOVLW  00
2474:  BRA    2478
2476:  MOVLW  01
2478:  MOVWF  01
247A:  BRA    247C
....................    } 
.................... } 
247C:  GOTO   2560 (RETURN)
....................  
.................... ///---------------------------------------------------------------/// 
.................... /// Processing Message stages is the biggest portion of the ISR   /// 
.................... ///---------------------------------------------------------------/// 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token.  Should be 0. 
.................... /* 
.................... /* Summary: When receiving an IN token from the PC on endpoint 0 that means the 
.................... /*          host is asking for a response from a setup token, or the next packet 
.................... /*          from a currently processing token.  (For example, a 24 byte descriptor 
.................... /*          would require 3 IN tokens if the packet size is 8 bytes.)  USB_dev_req 
.................... /*          is a global variable that defines what setup token we are currently processing. 
.................... /* 
.................... /* Part of USB interrupt service routine. 
.................... /* Only checks endpoint 0. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
2A10:  MOVF   xA9,F
2A12:  BNZ   2A28
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
2A14:  DECFSZ 19,W
2A16:  BRA    2A1E
2A18:  CALL   205C
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
2A1C:  BRA    2A26
2A1E:  MOVF   19,W
2A20:  SUBLW  02
2A22:  BNZ   2A26
2A24:  BRA    292E
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
2A26:  BRA    2A30
2A28:  MOVF   xA9,W
2A2A:  SUBLW  02
2A2C:  BNZ   2A30
....................       usb_isr_tok_in_cdc_data_dne(); 
2A2E:  BRA    2A02
....................   } 
....................   #endif 
.................... } 
2A30:  RETLW  00
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data. 
.................... /*        This code doesn't allow reception of data from EP0. (Add later) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy incoming 
.................... /*          to the pic), but not out setup tokens.  Data is placed into a 
.................... /*          a buffer if it is empty, and the rx flag is set.  If the buffer 
.................... /*          is not empty then the overrun bit of that EP status byte is set it. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint) { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
28E6:  MOVF   xA9,F
28E8:  BNZ   28EE
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
28EA:  BRA    2850
....................      #else 
....................       usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
28EC:  BRA    2916
28EE:  MOVF   xA9,W
28F0:  SUBLW  02
28F2:  BNZ   28F8
....................       usb_isr_tok_out_cdc_data_dne(); 
28F4:  BRA    28D4
....................    } 
....................   #endif 
....................    else { 
28F6:  BRA    2916
....................       bit_set(__usb_kbhit_status,endpoint); 
28F8:  CLRF   03
28FA:  MOVLW  01
28FC:  MOVWF  02
28FE:  MOVF   xA9,W
2900:  MOVWF  00
2902:  BZ    290E
2904:  BCF    FD8.0
2906:  RLCF   02,F
2908:  RLCF   03,F
290A:  DECFSZ 00,F
290C:  BRA    2904
290E:  MOVF   02,W
2910:  IORWF  1D,F
2912:  MOVF   03,W
2914:  IORWF  1E,F
....................    } 
.................... } 
2916:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
.................... ////// HUGE - most of our code is to read setup messages //// 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the 8 bytes of the setup packet. 
.................... /* 
.................... /* Output: The DTS we expect for the next packet on OUT 0. 
.................... /* 
.................... /* Summary: This function is the start of code that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration, Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[8] now contains setup data packet, which has the following records 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
....................                                        (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet 
.................... /*                        for host-to-device, this exactly how many bytes in data packet 
.................... /*                        for device-to-host, this is the maximum bytes that can fit one packet 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void) { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
2662:  CLRF   19
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
2664:  MOVLB  5
2666:  MOVF   x00,W
2668:  ANDLW  7F
266A:  MOVLB  0
266C:  BZ    267C
266E:  XORLW  01
2670:  BZ    267E
2672:  XORLW  03
2674:  BZ    2680
2676:  XORLW  23
2678:  BZ    2682
267A:  BRA    2684
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
267C:  BRA    22F4
....................          break; 
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
267E:  BRA    2396
....................          break; 
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
2680:  BRA    255A
....................          break; 
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
2682:  BRA    25C0
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
2684:  RCALL  2056
....................          break; 
2686:  BRA    2688
....................    } 
.................... } 
2688:  GOTO   2A52 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
22F4:  MOVLB  5
22F6:  MOVF   x01,W
22F8:  MOVLB  0
22FA:  BZ    2316
22FC:  XORLW  01
22FE:  BZ    2328
2300:  XORLW  02
2302:  BZ    2340
2304:  XORLW  06
2306:  BZ    2356
2308:  XORLW  03
230A:  BZ    2364
230C:  XORLW  0E
230E:  BZ    2366
2310:  XORLW  01
2312:  BZ    2372
2314:  BRA    238E
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
2316:  MOVFF  1B,540
....................             usb_ep0_tx_buffer[1]=0; 
231A:  MOVLB  5
231C:  CLRF   x41
....................             usb_request_send_response(2); 
231E:  MOVLW  02
2320:  MOVLB  0
2322:  MOVWF  xAC
2324:  RCALL  2050
....................             break; 
2326:  BRA    2392
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
2328:  MOVLB  5
232A:  DECFSZ x02,W
232C:  BRA    233A
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
232E:  MOVLW  01
2330:  ANDWF  1B,F
....................                usb_put_0len_0(); 
2332:  MOVLB  0
2334:  CLRF   xAC
2336:  RCALL  2050
....................             } 
....................             else 
2338:  BRA    233E
....................                usb_request_stall(); 
233A:  MOVLB  0
233C:  RCALL  2056
....................             break; 
233E:  BRA    2392
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
2340:  MOVLB  5
2342:  DECFSZ x02,W
2344:  BRA    2350
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
2346:  BSF    1B.1
....................                usb_put_0len_0(); 
2348:  MOVLB  0
234A:  CLRF   xAC
234C:  RCALL  2050
....................             } 
....................             else 
234E:  BRA    2354
....................                usb_request_stall(); 
2350:  MOVLB  0
2352:  RCALL  2056
....................             break; 
2354:  BRA    2392
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
2356:  MOVLW  02
2358:  MOVWF  19
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
235A:  MOVFF  502,24
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................          	USB_stack_status.curr_config=0;	// make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
235E:  CLRF   xAC
2360:  RCALL  2050
....................             break; 
2362:  BRA    2392
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
2364:  BRA    20E0
....................             break; 
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
2366:  MOVFF  1A,540
....................             usb_request_send_response(1); 
236A:  MOVLW  01
236C:  MOVWF  xAC
236E:  RCALL  2050
....................             break; 
2370:  BRA    2392
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
2372:  MOVLB  5
2374:  MOVF   x02,W
2376:  SUBLW  01
2378:  BNC   238A
....................                debug_usb(debug_putc,"SC"); 
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
237A:  MOVFF  502,1A
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
237E:  MOVFF  502,A9
2382:  MOVLB  0
2384:  BRA    2156
....................                usb_put_0len_0(); 
2386:  CLRF   xAC
2388:  RCALL  2050
....................             } 
....................             break; 
238A:  MOVLB  0
238C:  BRA    2392
....................  
....................       default: 
....................             usb_request_stall(); 
238E:  RCALL  2056
....................             break; 
2390:  BRA    2392
....................    } 
.................... } 
2392:  GOTO   2688 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
2396:  MOVFF  1A,A9
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
239A:  MOVLB  5
239C:  MOVF   x01,W
239E:  MOVLB  0
23A0:  BZ    23AC
23A2:  XORLW  0A
23A4:  BZ    23BC
23A6:  XORLW  01
23A8:  BZ    2402
23AA:  BRA    2426
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
23AC:  MOVLB  5
23AE:  CLRF   x40
....................             usb_ep0_tx_buffer[1]=0; 
23B0:  CLRF   x41
....................             usb_request_send_response(2); 
23B2:  MOVLW  02
23B4:  MOVLB  0
23B6:  MOVWF  xAC
23B8:  RCALL  2050
....................             break; 
23BA:  BRA    242A
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
23BC:  MOVF   xA9,F
23BE:  BZ    23FE
23C0:  MOVLW  01
23C2:  SUBWF  xA9,W
23C4:  CLRF   03
23C6:  MOVFF  FF2,AB
23CA:  BCF    FF2.7
23CC:  CALL   19B0
23D0:  BTFSC  xAB.7
23D2:  BSF    FF2.7
23D4:  MOVWF  01
23D6:  MOVLB  5
23D8:  SUBWF  x04,W
23DA:  BTFSS  FD8.0
23DC:  BRA    23E2
23DE:  MOVLB  0
23E0:  BRA    23FE
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
23E2:  CLRF   03
23E4:  MOVF   x04,W
23E6:  ADDLW  28
23E8:  MOVWF  FE9
23EA:  MOVLW  00
23EC:  ADDWFC 03,W
23EE:  MOVWF  FEA
23F0:  MOVFF  FEF,540
....................                usb_request_send_response(1);; //send byte back 
23F4:  MOVLW  01
23F6:  MOVLB  0
23F8:  MOVWF  xAC
23FA:  RCALL  2050
....................             } 
....................             else 
23FC:  BRA    2400
....................                usb_request_stall(); 
23FE:  RCALL  2056
....................             break; 
2400:  BRA    242A
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
2402:  MOVF   xA9,F
2404:  BZ    2422
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
2406:  CLRF   03
2408:  MOVLB  5
240A:  MOVF   x04,W
240C:  ADDLW  28
240E:  MOVWF  FE9
2410:  MOVLW  00
2412:  ADDWFC 03,W
2414:  MOVWF  FEA
2416:  MOVFF  502,FEF
....................                usb_put_0len_0(); 
241A:  MOVLB  0
241C:  CLRF   xAC
241E:  RCALL  2050
....................             } 
....................             else 
2420:  BRA    2424
....................                usb_request_stall(); 
2422:  RCALL  2056
....................             break; 
2424:  BRA    242A
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
2426:  RCALL  2056
....................             break; 
2428:  BRA    242A
....................    } 
.................... } 
242A:  GOTO   2688 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
255A:  MOVFF  504,A9
255E:  BRA    242E
2560:  MOVF   01,F
2562:  BZ    25B6
....................       switch(usb_ep0_rx_buffer[1]) { 
2564:  MOVLB  5
2566:  MOVF   x01,W
2568:  XORLW  01
256A:  MOVLB  0
256C:  BZ    2578
256E:  XORLW  02
2570:  BZ    2584
2572:  XORLW  03
2574:  BZ    2590
2576:  BRA    25B2
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
2578:  MOVFF  504,A9
257C:  BRA    2480
....................                usb_put_0len_0(); 
257E:  CLRF   xAC
2580:  RCALL  2050
....................                break; 
2582:  BRA    25B6
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
2584:  MOVFF  504,A9
2588:  BRA    24C2
....................                      usb_put_0len_0(); 
258A:  CLRF   xAC
258C:  RCALL  2050
....................                      break; 
258E:  BRA    25B6
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
2590:  MOVLB  5
2592:  CLRF   x40
....................                usb_ep0_tx_buffer[1]=0; 
2594:  CLRF   x41
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
2596:  MOVFF  504,A9
259A:  MOVLB  0
259C:  BRA    2506
259E:  MOVF   01,F
25A0:  BZ    25AA
....................                   usb_ep0_tx_buffer[0]=1; 
25A2:  MOVLW  01
25A4:  MOVLB  5
25A6:  MOVWF  x40
25A8:  MOVLB  0
....................                } 
....................                usb_request_send_response(2); 
25AA:  MOVLW  02
25AC:  MOVWF  xAC
25AE:  RCALL  2050
....................                break; 
25B0:  BRA    25B6
....................  
....................          default: 
....................             usb_request_stall(); 
25B2:  RCALL  2056
....................             break; 
25B4:  BRA    25B6
....................       } 
....................    } 
.................... } 
25B6:  GOTO   2688 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
20E0:  CLRF   26
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
20E2:  CLRF   1C
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
20E4:  MOVLB  5
20E6:  MOVF   x03,W
20E8:  XORLW  01
20EA:  MOVLB  0
20EC:  BZ    20F8
20EE:  XORLW  03
20F0:  BZ    2102
20F2:  XORLW  01
20F4:  BZ    2108
20F6:  BRA    2136
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
20F8:  MOVLW  12
20FA:  MOVWF  27
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
20FC:  MOVLW  03
20FE:  MOVWF  1C
....................             break; 
2100:  BRA    213A
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
2102:  MOVLW  43
2104:  MOVWF  27
....................             break; 
2106:  BRA    213A
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
2108:  MOVLW  02
210A:  MOVWF  1C
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
210C:  CLRF   03
210E:  MOVLB  5
2110:  MOVF   x02,W
2112:  ADDLW  21
2114:  MOVWF  FE9
2116:  MOVLW  00
2118:  ADDWFC 03,W
211A:  MOVWF  FEA
211C:  MOVFF  FEF,26
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
2120:  CLRF   03
2122:  MOVF   26,W
2124:  MOVFF  FF2,A9
2128:  BCF    FF2.7
212A:  MOVLB  0
212C:  RCALL  19E4
212E:  BTFSC  xA9.7
2130:  BSF    FF2.7
2132:  MOVWF  27
....................             break; 
2134:  BRA    213A
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][0]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
....................  
....................  
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
2136:  RCALL  2056
....................             return; 
2138:  BRA    2152
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
213A:  MOVLB  5
213C:  MOVF   x07,F
213E:  BNZ   214A
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
2140:  MOVF   27,W
2142:  SUBWF  x06,W
2144:  BC    214A
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
2146:  MOVFF  506,27
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
214A:  MOVLW  01
214C:  MOVWF  19
....................    usb_copy_desc_seg_to_ep(); 
214E:  MOVLB  0
2150:  RCALL  205C
.................... } 
2152:  GOTO   2392 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
.................... 	USB_stack_status.curr_config=0;	// make sure current configuration is 0 
*
292E:  CLRF   1A
....................  
....................    #ifdef __PIC__ 
.................... 	USB_stack_status.dev_req=NONE;  // no request pending 
2930:  CLRF   19
....................    usb_set_address(USB_address_pending); 
2932:  MOVFF  24,AA
2936:  BRA    2918
....................    #endif 
.................... } 
2938:  GOTO   2A26 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
....................    int i=0; 
*
205C:  CLRF   xAA
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
205E:  MOVF   27,F
2060:  BZ    20CC
2062:  MOVF   xAA,W
2064:  SUBLW  3F
2066:  BNC   20CC
....................       switch(USB_stack_status.getdesc_type) { 
2068:  MOVF   1C,W
206A:  BZ    2076
206C:  XORLW  02
206E:  BZ    208A
2070:  XORLW  01
2072:  BZ    209E
2074:  BRA    20B2
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
2076:  CLRF   03
2078:  MOVF   26,W
207A:  MOVFF  FF2,AC
207E:  BCF    FF2.7
2080:  RCALL  195C
2082:  BTFSC  xAC.7
2084:  BSF    FF2.7
2086:  MOVWF  xAB
....................             break; 
2088:  BRA    20B2
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
208A:  CLRF   03
208C:  MOVF   26,W
208E:  MOVFF  FF2,AC
2092:  BCF    FF2.7
2094:  RCALL  19E4
2096:  BTFSC  xAC.7
2098:  BSF    FF2.7
209A:  MOVWF  xAB
....................             break; 
209C:  BRA    20B2
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
209E:  CLRF   03
20A0:  MOVF   26,W
20A2:  MOVFF  FF2,AC
20A6:  BCF    FF2.7
20A8:  RCALL  19C2
20AA:  BTFSC  xAC.7
20AC:  BSF    FF2.7
20AE:  MOVWF  xAB
....................             break; 
20B0:  BRA    20B2
....................       } 
....................       usb_getdesc_ptr++; 
20B2:  INCF   26,F
....................       usb_getdesc_len--; 
20B4:  DECF   27,F
....................       usb_ep0_tx_buffer[i++]=c; 
20B6:  MOVF   xAA,W
20B8:  INCF   xAA,F
20BA:  CLRF   03
20BC:  ADDLW  40
20BE:  MOVWF  FE9
20C0:  MOVLW  05
20C2:  ADDWFC 03,W
20C4:  MOVWF  FEA
20C6:  MOVFF  AB,FEF
....................    } 
20CA:  BRA    205E
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
20CC:  MOVF   27,F
20CE:  BNZ   20D8
20D0:  MOVF   xAA,W
20D2:  SUBLW  40
20D4:  BZ    20D8
....................          USB_stack_status.dev_req = NONE; 
20D6:  CLRF   19
....................    } 
....................  
....................    usb_request_send_response(i); 
20D8:  MOVFF  AA,AC
20DC:  RCALL  2050
.................... } 
20DE:  RETLW  00
....................  
.................... #ENDIF 
....................  
....................  
.................... struct { 
....................         int32   dwDTERrate;   //data terminal rate, in bits per second 
....................         int8    bCharFormat;  //num of stop bits (0=1, 1=1.5, 2=2) 
....................         int8    bParityType;  //parity (0=none, 1=odd, 2=even, 3=mark, 4=space) 
....................         int8    bDataBits;    //data bits (5,6,7,8 or 16) 
.................... } usb_cdc_line_coding; 
....................  
.................... //length of time, in ms, of break signal as we received in a SendBreak message. 
.................... //if ==0xFFFF, send break signal until we receive a 0x0000. 
.................... int16 usb_cdc_break; 
....................  
.................... int8 usb_cdc_encapsulated_cmd[8]; 
....................  
.................... int8 usb_cdc_put_buffer[USB_CDC_DATA_IN_SIZE]; 
.................... int1 usb_cdc_put_buffer_free; 
.................... #if USB_CDC_DATA_IN_SIZE>=0x100 
....................  int16 usb_cdc_put_buffer_nextin=0; 
.................... // int16 usb_cdc_last_data_packet_size; 
.................... #else 
....................  int8 usb_cdc_put_buffer_nextin=0; 
.................... // int8 usb_cdc_last_data_packet_size; 
.................... #endif 
....................  
.................... struct { 
....................    int1 got; 
....................   #if USB_CDC_DATA_OUT_SIZE>=0x100 
....................    int16 len; 
....................    int16 index; 
....................   #else 
....................    int8 len; 
....................    int8 index; 
....................   #endif 
.................... } usb_cdc_get_buffer_status; 
....................  
.................... int8 usb_cdc_get_buffer_status_buffer[USB_CDC_DATA_OUT_SIZE]; 
.................... #if (defined(__PIC__)) 
....................  #if __PIC__ 
....................   //#locate usb_cdc_get_buffer_status_buffer=0x500+(2*USB_MAX_EP0_PACKET_LENGTH)+USB_CDC_COMM_IN_SIZE 
....................   #if USB_MAX_EP0_PACKET_LENGTH==8 
....................      #locate usb_cdc_get_buffer_status_buffer=0x500+24 
....................   #elif USB_MAX_EP0_PACKET_LENGTH==64 
....................      #locate usb_cdc_get_buffer_status_buffer=0x500+136 
....................   #else 
....................    #error CCS BUG WONT LET ME USE MATH IN LOCATE 
....................   #endif 
....................  #endif 
.................... #endif 
....................  
.................... int1 usb_cdc_got_set_line_coding; 
....................  
.................... struct  { 
....................    int1 dte_present; //1=DTE present, 0=DTE not present 
....................    int1 active;      //1=activate carrier, 0=deactivate carrier 
....................    int reserved:6; 
.................... } usb_cdc_carrier; 
....................  
.................... enum {USB_CDC_OUT_NOTHING=0, USB_CDC_OUT_COMMAND=1, USB_CDC_OUT_LINECODING=2, USB_CDC_WAIT_0LEN=3} __usb_cdc_state=0; 
....................  
.................... #byte INTCON=0xFF2 
.................... #bit INT_GIE=INTCON.7 
....................  
.................... //handle OUT token done interrupt on endpoint 0 [read encapsulated cmd and line coding data] 
.................... void usb_isr_tok_out_cdc_control_dne(void) { 
....................    debug_usb(debug_putc,"CDC %X ",__usb_cdc_state); 
....................  
....................    switch (__usb_cdc_state) { 
*
2850:  MOVF   x81,W
2852:  XORLW  01
2854:  BZ    285C
2856:  XORLW  03
2858:  BZ    287E
285A:  BRA    28A0
....................       //printf(putc_tbe,"@%X@\r\n", __usb_cdc_state); 
....................       case USB_CDC_OUT_COMMAND: 
....................          //usb_get_packet(0, usb_cdc_encapsulated_cmd, 8); 
....................          memcpy(usb_cdc_encapsulated_cmd, usb_ep0_rx_buffer,8); 
285C:  CLRF   FEA
285E:  MOVLW  33
2860:  MOVWF  FE9
2862:  MOVLW  05
2864:  MOVWF  FE2
2866:  CLRF   FE1
2868:  MOVLW  08
286A:  MOVWF  01
286C:  MOVFF  FE6,FEE
2870:  DECFSZ 01,F
2872:  BRA    286C
....................         #if USB_MAX_EP0_PACKET_LENGTH==8 
....................          __usb_cdc_state=USB_CDC_WAIT_0LEN; 
....................          usb_request_get_data(); 
....................         #else 
....................          usb_put_0len_0(); 
2874:  CLRF   xAC
2876:  CALL   2050
....................          __usb_cdc_state=0; 
287A:  CLRF   x81
....................         #endif 
....................          break; 
287C:  BRA    28A8
....................  
....................     #if USB_MAX_EP0_PACKET_LENGTH==8 
....................       case USB_CDC_WAIT_0LEN: 
....................          usb_put_0len_0(); 
....................          __usb_cdc_state=0; 
....................          break; 
....................     #endif 
....................  
....................       case USB_CDC_OUT_LINECODING: 
....................          //usb_get_packet(0, &usb_cdc_line_coding, 7); 
....................          //printf(putc_tbe,"\r\n!GSLC FIN!\r\n"); 
....................          memcpy(&usb_cdc_line_coding, usb_ep0_rx_buffer,7); 
287E:  CLRF   FEA
2880:  MOVLW  2A
2882:  MOVWF  FE9
2884:  MOVLW  05
2886:  MOVWF  FE2
2888:  CLRF   FE1
288A:  MOVLW  07
288C:  MOVWF  01
288E:  MOVFF  FE6,FEE
2892:  DECFSZ 01,F
2894:  BRA    288E
....................          __usb_cdc_state=0; 
2896:  CLRF   x81
....................          usb_put_0len_0(); 
2898:  CLRF   xAC
289A:  CALL   2050
....................          break; 
289E:  BRA    28A8
....................  
....................       default: 
....................          __usb_cdc_state=0; 
28A0:  CLRF   x81
....................          usb_init_ep0_setup(); 
28A2:  CALL   1FEA
....................          break; 
28A6:  BRA    28A8
....................    } 
.................... } 
28A8:  GOTO   28EC (RETURN)
....................  
.................... //handle IN token on 0 (setup packet) 
.................... void usb_isr_tkn_cdc(void) { 
....................    //make sure the request goes to a CDC interface 
....................    if ((usb_ep0_rx_buffer[4] == 1) || (usb_ep0_rx_buffer[4] == 0)) { 
*
25C0:  MOVLB  5
25C2:  DECFSZ x04,W
25C4:  BRA    25C8
25C6:  BRA    25CC
25C8:  MOVF   x04,F
25CA:  BNZ   265C
....................       //printf(putc_tbe,"!%X!\r\n", usb_ep0_rx_buffer[1]); 
....................       switch(usb_ep0_rx_buffer[1]) { 
25CC:  MOVF   x01,W
25CE:  MOVLB  0
25D0:  BZ    25E8
25D2:  XORLW  01
25D4:  BZ    25F0
25D6:  XORLW  21
25D8:  BZ    2612
25DA:  XORLW  01
25DC:  BZ    261C
25DE:  XORLW  03
25E0:  BZ    263E
25E2:  XORLW  01
25E4:  BZ    2648
25E6:  BRA    2656
....................          case 0x00:  //send_encapsulated_command 
....................             __usb_cdc_state=USB_CDC_OUT_COMMAND; 
25E8:  MOVLW  01
25EA:  MOVWF  x81
....................             usb_request_get_data(); 
25EC:  RCALL  25BA
....................             break; 
25EE:  BRA    265A
....................  
....................          case 0x01:  //get_encapsulated_command 
....................             memcpy(usb_ep0_tx_buffer, usb_cdc_encapsulated_cmd, 8); 
25F0:  MOVLW  05
25F2:  MOVWF  FEA
25F4:  MOVLW  40
25F6:  MOVWF  FE9
25F8:  CLRF   FE2
25FA:  MOVLW  33
25FC:  MOVWF  FE1
25FE:  MOVLW  08
2600:  MOVWF  01
2602:  MOVFF  FE6,FEE
2606:  DECFSZ 01,F
2608:  BRA    2602
....................             usb_request_send_response(usb_ep0_rx_buffer[6]);  //send wLength bytes 
260A:  MOVFF  506,AC
260E:  RCALL  2050
....................             break; 
2610:  BRA    265A
....................  
....................          case 0x20:  //set_line_coding 
....................             debug_usb(debug_putc,"!GSLC!"); 
....................             __usb_cdc_state=USB_CDC_OUT_LINECODING; 
2612:  MOVLW  02
2614:  MOVWF  x81
....................             usb_cdc_got_set_line_coding=TRUE; 
2616:  BSF    x7B.1
....................             usb_request_get_data(); 
2618:  RCALL  25BA
....................             break; 
261A:  BRA    265A
....................  
....................          case 0x21:  //get_line_coding 
....................             memcpy(usb_ep0_tx_buffer, &usb_cdc_line_coding, sizeof(usb_cdc_line_coding)); 
261C:  MOVLW  05
261E:  MOVWF  FEA
2620:  MOVLW  40
2622:  MOVWF  FE9
2624:  CLRF   FE2
2626:  MOVLW  2A
2628:  MOVWF  FE1
262A:  MOVLW  07
262C:  MOVWF  01
262E:  MOVFF  FE6,FEE
2632:  DECFSZ 01,F
2634:  BRA    262E
....................             usb_request_send_response(sizeof(usb_cdc_line_coding)); //send wLength bytes 
2636:  MOVLW  07
2638:  MOVWF  xAC
263A:  RCALL  2050
....................             break; 
263C:  BRA    265A
....................  
....................          case 0x22:  //set_control_line_state 
....................             usb_cdc_carrier=usb_ep0_rx_buffer[2]; 
263E:  MOVFF  502,80
....................             usb_put_0len_0(); 
2642:  CLRF   xAC
2644:  RCALL  2050
....................             break; 
2646:  BRA    265A
....................  
....................          case 0x23:  //send_break 
....................             usb_cdc_break=make16(usb_ep0_rx_buffer[2],usb_ep0_rx_buffer[3]); 
2648:  MOVFF  502,32
264C:  MOVFF  503,31
....................             usb_put_0len_0(); 
2650:  CLRF   xAC
2652:  RCALL  2050
....................             break; 
2654:  BRA    265A
....................  
....................          default: 
....................             usb_request_stall(); 
2656:  RCALL  2056
....................             break; 
2658:  BRA    265A
265A:  MOVLB  5
....................       } 
....................    } 
.................... } 
265C:  MOVLB  0
265E:  GOTO   2688 (RETURN)
....................  
.................... //handle OUT token done interrupt on endpoint 3 [buffer incoming received chars] 
.................... void usb_isr_tok_out_cdc_data_dne(void) { 
....................    usb_cdc_get_buffer_status.got=TRUE; 
*
28D4:  BSF    x7D.0
....................    usb_cdc_get_buffer_status.index=0; 
28D6:  CLRF   x7F
.................... #if (defined(__PIC__)) 
....................    #if __PIC__ 
....................     usb_cdc_get_buffer_status.len=usb_rx_packet_size(USB_CDC_DATA_OUT_ENDPOINT); 
28D8:  MOVLW  02
28DA:  MOVWF  xAA
28DC:  BRA    28AC
28DE:  MOVFF  01,7E
....................    #else 
....................     usb_cdc_get_buffer_status.len=usb_get_packet_buffer( 
....................        USB_CDC_DATA_OUT_ENDPOINT,&usb_cdc_get_buffer_status_buffer[0],USB_CDC_DATA_OUT_SIZE); 
....................    #endif 
.................... #else 
....................    usb_cdc_get_buffer_status.len=usb_get_packet_buffer( 
....................       USB_CDC_DATA_OUT_ENDPOINT,&usb_cdc_get_buffer_status_buffer[0],USB_CDC_DATA_OUT_SIZE); 
.................... #endif 
.................... } 
28E2:  GOTO   28F6 (RETURN)
....................  
.................... //handle IN token done interrupt on endpoint 2 [transmit buffered characters] 
.................... void usb_isr_tok_in_cdc_data_dne(void) { 
....................    if (usb_cdc_put_buffer_nextin) { 
*
2A02:  MOVF   x7C,F
2A04:  BZ    2A0A
....................       usb_cdc_flush_out_buffer(); 
2A06:  RCALL  29E2
....................    } 
....................    //send a 0len packet if needed 
.................... //   else if (usb_cdc_last_data_packet_size==USB_CDC_DATA_IN_SIZE) { 
.................... //      usb_cdc_last_data_packet_size=0; 
.................... //      printf(putc_tbe, "FL 0\r\n"); 
.................... //      usb_put_packet(USB_CDC_DATA_IN_ENDPOINT,0,0,USB_DTS_TOGGLE); 
.................... //   } 
....................    else { 
2A08:  BRA    2A0C
....................       usb_cdc_put_buffer_free=TRUE; 
2A0A:  BSF    x7B.0
....................       //printf(putc_tbe, "FL DONE\r\n"); 
....................    } 
.................... } 
2A0C:  GOTO   2A30 (RETURN)
....................  
.................... void usb_cdc_flush_out_buffer(void) { 
....................    if (usb_cdc_put_buffer_nextin) { 
*
29E2:  MOVF   x7C,F
29E4:  BZ    2A00
....................       usb_cdc_put_buffer_free=FALSE; 
29E6:  BCF    x7B.0
....................       //usb_cdc_last_data_packet_size=usb_cdc_put_buffer_nextin; 
....................       //printf(putc_tbe, "FL %U\r\n", usb_cdc_put_buffer_nextin); 
....................       usb_put_packet(USB_CDC_DATA_IN_ENDPOINT,usb_cdc_put_buffer,usb_cdc_put_buffer_nextin,USB_DTS_TOGGLE); 
29E8:  MOVLW  02
29EA:  MOVWF  xAA
29EC:  CLRF   xAC
29EE:  MOVLW  3B
29F0:  MOVWF  xAB
29F2:  CLRF   xAE
29F4:  MOVFF  7C,AD
29F8:  MOVLW  02
29FA:  MOVWF  xAF
29FC:  RCALL  293C
....................       usb_cdc_put_buffer_nextin=0; 
29FE:  CLRF   x7C
....................    } 
.................... } 
2A00:  RETLW  00
....................  
.................... void usb_cdc_init(void) { 
....................    usb_cdc_line_coding.dwDTERrate=9600; 
*
1F72:  CLRF   2D
1F74:  CLRF   2C
1F76:  MOVLW  25
1F78:  MOVWF  2B
1F7A:  MOVLW  80
1F7C:  MOVWF  2A
....................    usb_cdc_line_coding.bCharFormat=0; 
1F7E:  CLRF   2E
....................    usb_cdc_line_coding.bParityType=0; 
1F80:  CLRF   2F
....................    usb_cdc_line_coding.bDataBits=8; 
1F82:  MOVLW  08
1F84:  MOVWF  30
....................    (int8)usb_cdc_carrier=0; 
1F86:  CLRF   x80
....................    usb_cdc_got_set_line_coding=FALSE; 
1F88:  BCF    x7B.1
....................    usb_cdc_break=0; 
1F8A:  CLRF   32
1F8C:  CLRF   31
....................    usb_cdc_put_buffer_nextin=0; 
1F8E:  CLRF   x7C
....................    usb_cdc_get_buffer_status.got=0; 
1F90:  BCF    x7D.0
....................    usb_cdc_put_buffer_free=TRUE; 
1F92:  BSF    x7B.0
.................... } 
1F94:  RETLW  00
....................  
.................... ////////////////// END USB CONTROL HANDLING ////////////////////////////////// 
....................  
.................... ////////////////// BEGIN USB<->RS232 CDC LIBRARY ///////////////////////////// 
....................  
.................... char usb_cdc_getc(void) { 
....................    char c; 
....................  
....................    while (!usb_cdc_kbhit()) {} 
*
2ED6:  BTFSC  x7D.0
2ED8:  BRA    2EDC
2EDA:  BRA    2ED6
....................  
....................    c=usb_cdc_get_buffer_status_buffer[usb_cdc_get_buffer_status.index++]; 
2EDC:  MOVF   x7F,W
2EDE:  INCF   x7F,F
2EE0:  CLRF   03
2EE2:  ADDLW  88
2EE4:  MOVWF  FE9
2EE6:  MOVLW  05
2EE8:  ADDWFC 03,W
2EEA:  MOVWF  FEA
2EEC:  MOVFF  FEF,8D
....................    if (usb_cdc_get_buffer_status.index >= usb_cdc_get_buffer_status.len) { 
2EF0:  MOVF   x7E,W
2EF2:  SUBWF  x7F,W
2EF4:  BNC   2F0E
....................       usb_cdc_get_buffer_status.got=FALSE; 
2EF6:  BCF    x7D.0
2EF8:  CLRF   18
2EFA:  BTFSC  FF2.7
2EFC:  BSF    18.7
2EFE:  BCF    FF2.7
....................       usb_flush_out(USB_CDC_DATA_OUT_ENDPOINT, USB_DTS_TOGGLE); 
2F00:  MOVLW  02
2F02:  MOVWF  xA9
2F04:  MOVWF  xAA
2F06:  CALL   268C
2F0A:  BTFSC  18.7
2F0C:  BSF    FF2.7
....................    } 
....................  
....................    return(c); 
2F0E:  MOVFF  8D,01
.................... } 
2F12:  GOTO   2F18 (RETURN)
....................  
.................... void usb_cdc_putc_fast(char c) { 
....................    int1 old_gie; 
....................  
....................    //disable global interrupts 
....................    old_gie=INT_GIE; 
*
2F9A:  BCF    x92.0
2F9C:  BTFSC  FF2.7
2F9E:  BSF    x92.0
....................    INT_GIE=0; 
2FA0:  BCF    FF2.7
....................  
....................    if (usb_cdc_put_buffer_nextin >= USB_CDC_DATA_IN_SIZE) { 
2FA2:  MOVF   x7C,W
2FA4:  SUBLW  3F
2FA6:  BC    2FAC
....................       usb_cdc_put_buffer_nextin=USB_CDC_DATA_IN_SIZE-1;  //we just overflowed the buffer! 
2FA8:  MOVLW  3F
2FAA:  MOVWF  x7C
....................    } 
....................    usb_cdc_put_buffer[usb_cdc_put_buffer_nextin++]=c; 
2FAC:  MOVF   x7C,W
2FAE:  INCF   x7C,F
2FB0:  CLRF   03
2FB2:  ADDLW  3B
2FB4:  MOVWF  FE9
2FB6:  MOVLW  00
2FB8:  ADDWFC 03,W
2FBA:  MOVWF  FEA
2FBC:  MOVFF  91,FEF
....................  
....................    //renable global interrupts 
....................    INT_GIE=old_gie; 
2FC0:  BCF    FF2.7
2FC2:  BTFSC  x92.0
2FC4:  BSF    FF2.7
....................  
....................    /* 
....................    if (usb_tbe(USB_CDC_DATA_IN_ENDPOINT)) { 
....................       if (usb_cdc_put_buffer_nextin) 
....................          usb_cdc_flush_out_buffer(); 
....................    } 
....................    */ 
....................    if (usb_cdc_put_buffer_free) { 
2FC6:  BTFSS  x7B.0
2FC8:  BRA    2FD8
2FCA:  CLRF   18
2FCC:  BTFSC  FF2.7
2FCE:  BSF    18.7
2FD0:  BCF    FF2.7
....................       usb_cdc_flush_out_buffer(); 
2FD2:  RCALL  29E2
2FD4:  BTFSC  18.7
2FD6:  BSF    FF2.7
....................    } 
.................... } 
2FD8:  GOTO   2FFC (RETURN)
....................  
.................... void usb_cdc_putc(char c) { 
....................    while (!usb_cdc_putready()) { 
2FDC:  MOVF   x7C,W
2FDE:  SUBLW  3F
2FE0:  BC    2FF6
....................       if (usb_cdc_put_buffer_free) { 
2FE2:  BTFSS  x7B.0
2FE4:  BRA    2FF4
2FE6:  CLRF   18
2FE8:  BTFSC  FF2.7
2FEA:  BSF    18.7
2FEC:  BCF    FF2.7
....................          usb_cdc_flush_out_buffer(); 
2FEE:  RCALL  29E2
2FF0:  BTFSC  18.7
2FF2:  BSF    FF2.7
....................       } 
....................       //delay_ms(500); 
....................       //printf(putc_tbe,"TBE=%U CNT=%U LST=%U\r\n",usb_tbe(USB_CDC_DATA_IN_ENDPOINT), usb_cdc_put_buffer_nextin, usb_cdc_last_data_packet_size); 
....................    } 
2FF4:  BRA    2FDC
....................    usb_cdc_putc_fast(c); 
2FF6:  MOVFF  90,91
2FFA:  BRA    2F9A
.................... } 
2FFC:  RETLW  00
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... BYTE gethex1_usb() { 
....................    char digit; 
....................  
....................    digit = usb_cdc_getc(); 
....................  
....................    usb_cdc_putc(digit); 
....................  
....................    if(digit<='9') 
....................      return(digit-'0'); 
....................    else 
....................      return((toupper(digit)-'A')+10); 
.................... } 
....................  
.................... BYTE gethex_usb() { 
....................    int lo,hi; 
....................  
....................    hi = gethex1_usb(); 
....................    lo = gethex1_usb(); 
....................    if(lo==0xdd) 
....................      return(hi); 
....................    else 
....................      return( hi*16+lo ); 
.................... } 
....................  
.................... void get_string_usb(char* s, int max) { 
....................    int len; 
....................    char c; 
....................  
....................    --max; 
....................    len=0; 
....................    do { 
....................      c=usb_cdc_getc(); 
....................      if(c==8) {  // Backspace 
....................         if(len>0) { 
....................           len--; 
....................           usb_cdc_putc(c); 
....................           usb_cdc_putc(' '); 
....................           usb_cdc_putc(c); 
....................         } 
....................      } else if ((c>=' ')&&(c<='~')) 
....................        if(len<max) { 
....................          s[len++]=c; 
....................          usb_cdc_putc(c); 
....................        } 
....................    } while(c!=13); 
....................    s[len]=0; 
.................... } 
....................  
....................  
.................... // stdlib.h is required for the ato_ conversions 
.................... // in the following functions 
.................... #ifdef _STDLIB 
....................  
.................... signed int get_int_usb() { 
....................   char s[5]; 
....................   signed int i; 
....................  
....................   get_string_usb(s, 5); 
....................  
....................   i=atoi(s); 
....................   return(i); 
.................... } 
....................  
.................... signed long get_long_usb() { 
....................   char s[7]; 
....................   signed long l; 
....................  
....................   get_string_usb(s, 7); 
....................   l=atol(s); 
....................   return(l); 
.................... } 
....................  
.................... float get_float_usb() { 
....................   char s[20]; 
....................   float f; 
....................  
....................   get_string_usb(s, 20); 
....................   f = atof(s); 
....................   return(f); 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... //Creamos el puerto serie (96008N1) 
.................... #use rs232 (baud=9600,XMIT=PIN_C6,RCV=PIN_C7,BITS=8) 
....................  
.................... #USE STANDARD_IO (e) 
....................  
....................  
.................... // Configuramos los dispositivos incluidos en la placa. 
.................... #define LED PIN_C2 
.................... #define PULSADOR PIN_A4 
....................  
.................... // Alias de funciones 
.................... #define ENCENDER  output_high 
.................... #define APAGAR    output_low 
.................... #define CONMUTAR  output_toggle 
....................  
.................... // Para configurar el usb si esperar al host 
.................... void aure_configurar_usb_sinespera() 
.................... { 
....................    usb_cdc_init(); 
....................    usb_init(); 
.................... } 
....................  
....................  
.................... // Devuelve 1 si el dispositivo cdc está conectado 
.................... int aure_configurar_usb_comprobar() 
.................... { 
....................    if (usb_cdc_connected() && usb_enumerated()) return 1; 
....................    return 0; 
.................... } 
....................  
.................... // Configura el usb y espera al host 
.................... void aure_configurar_usb() 
.................... { 
....................    usb_cdc_init(); 
....................    usb_init(); 
....................    while(!usb_cdc_connected()) {} 
....................    if (usb_enumerated()) printf(usb_cdc_putc, "\r\n\n-AureBoard ¡Lista!\r\n"); 
.................... } 
....................  
....................  
.................... // Inicializa el PIC 
.................... void aure_configurar() 
.................... { 
....................    int t=0; 
*
2BB6:  CLRF   x8C
....................    printf ("\r\nAUREBOT\r\n_______\r\n\r\nIniciando...\r\n"); 
2BB8:  CLRF   x8D
2BBA:  MOVF   x8D,W
2BBC:  CALL   1A2A
2BC0:  INCF   x8D,F
2BC2:  MOVWF  00
2BC4:  MOVF   00,W
2BC6:  BTFSS  F9E.4
2BC8:  BRA    2BC6
2BCA:  MOVWF  FAD
2BCC:  MOVLW  24
2BCE:  SUBWF  x8D,W
2BD0:  BNZ   2BBA
....................    printf("[Delay 300 ms]\r\n"); 
2BD2:  CLRF   x8D
2BD4:  MOVF   x8D,W
2BD6:  CALL   1A6A
2BDA:  INCF   x8D,F
2BDC:  MOVWF  00
2BDE:  MOVF   00,W
2BE0:  BTFSS  F9E.4
2BE2:  BRA    2BE0
2BE4:  MOVWF  FAD
2BE6:  MOVLW  10
2BE8:  SUBWF  x8D,W
2BEA:  BNZ   2BD4
....................    delay_ms(300); 
2BEC:  MOVLW  02
2BEE:  MOVWF  x8D
2BF0:  MOVLW  96
2BF2:  MOVWF  xA0
2BF4:  RCALL  2B8E
2BF6:  DECFSZ x8D,F
2BF8:  BRA    2BF0
....................    printf("[Ok]\r\n"); 
2BFA:  CLRF   x8D
2BFC:  MOVF   x8D,W
2BFE:  CALL   1A96
2C02:  INCF   x8D,F
2C04:  MOVWF  00
2C06:  MOVF   00,W
2C08:  BTFSS  F9E.4
2C0A:  BRA    2C08
2C0C:  MOVWF  FAD
2C0E:  MOVLW  06
2C10:  SUBWF  x8D,W
2C12:  BNZ   2BFC
....................    for (t=0; t<10; t++) 
2C14:  CLRF   x8C
2C16:  MOVF   x8C,W
2C18:  SUBLW  09
2C1A:  BNC   2C2A
....................    { 
....................       output_toggle(LED); 
2C1C:  BCF    F94.2
2C1E:  BTG    F8B.2
....................       delay_ms(50); 
2C20:  MOVLW  32
2C22:  MOVWF  xA0
2C24:  RCALL  2B8E
....................    } 
2C26:  INCF   x8C,F
2C28:  BRA    2C16
....................    printf("-Led Verde\r\n"); 
2C2A:  CLRF   x8D
2C2C:  MOVF   x8D,W
2C2E:  CALL   1AB8
2C32:  INCF   x8D,F
2C34:  MOVWF  00
2C36:  MOVF   00,W
2C38:  BTFSS  F9E.4
2C3A:  BRA    2C38
2C3C:  MOVWF  FAD
2C3E:  MOVLW  0C
2C40:  SUBWF  x8D,W
2C42:  BNZ   2C2C
....................  
....................    /* 
....................       Configuramos el usb-serie 
....................       -aure_configurar_usb() 
....................          Espera a que el host configure el dispositivo, la ejecución del 
....................          programa no comienza hasta ese momento. 
....................       -aure_configurar_usb_sinespera() 
....................          No espera a que el host configure el dispositivo. Se puede usar la  
....................          función aure_configurar_usb_comprobar() para saber si el dispositivo 
....................          esta conectado (f()==1 conectado, f()==0 desconectado) 
....................    */ 
....................    //aure_configurar_usb(); 
....................    printf("-USB CDC\r\n"); 
2C44:  CLRF   x8D
2C46:  MOVF   x8D,W
2C48:  CALL   1AE0
2C4C:  INCF   x8D,F
2C4E:  MOVWF  00
2C50:  MOVF   00,W
2C52:  BTFSS  F9E.4
2C54:  BRA    2C52
2C56:  MOVWF  FAD
2C58:  MOVLW  0A
2C5A:  SUBWF  x8D,W
2C5C:  BNZ   2C46
....................  
....................    //Configuramos los registros TRIS 
....................    //set_tris_a(0b00000111); 
....................    //set_tris_b(0x00); 
....................    //set_tris_c(0x00); 
....................    //set_tris_d(0x00); 
....................    //set_tris_e(0x00); 
....................    //printf("-Registros TRIS\r\n"); 
....................  
....................    //Configuramos las resistencias de pullup del puerto B 
....................    port_b_pullups(FALSE); 
2C5E:  BSF    FF1.7
....................    printf("-Pull up's OFF\r\n"); 
2C60:  CLRF   x8D
2C62:  MOVF   x8D,W
2C64:  CALL   1B06
2C68:  INCF   x8D,F
2C6A:  MOVWF  00
2C6C:  MOVF   00,W
2C6E:  BTFSS  F9E.4
2C70:  BRA    2C6E
2C72:  MOVWF  FAD
2C74:  MOVLW  10
2C76:  SUBWF  x8D,W
2C78:  BNZ   2C62
....................  
....................    //Todos los puertos a nivel bajo 
....................    //output_a (0x00); 
....................    //output_b (0x00); 
....................    //output_c (0xff); 
....................    //output_d (0x00); 
....................    //output_e (0x00); 
....................    //printf("-Puertos a 0\r\n"); 
....................  
....................    //Configuramos el TIMER0 
....................  
....................    //setup_timer_2( T2_DIV_BY_4, 0x4B, 1); 
....................    //enable_interrupts(INT_timer2); 
....................  
....................  
....................    //Configuramos el TIMER1 
....................    //setup_timer_1(RTCC_INTERNAL|RTCC_DIV_8); 
....................    //set_timer1(0x0000); 
....................  
....................    //Configuramos el ADC 
....................    //Todas las entradas analogicas activas y rango 0-Vdd 
....................       //setup_adc_ports( ALL_ANALOG|VSS_VDD ); 
....................       setup_adc_ports(NO_ANALOGS); 
2C7A:  MOVF   FC1,W
2C7C:  ANDLW  C0
2C7E:  IORLW  0F
2C80:  MOVWF  FC1
....................    //setup_adc(ADC_CLOCK_INTERNAL); 
....................  
....................    //Reloj interno 
....................    //setup_adc(ADC_CLOCK_INTERNAL ); 
....................    //set_adc_channel(0); 
....................    //printf("-ADC\r\n"); 
....................    disable_interrupts(global); 
2C82:  BCF    FF2.6
2C84:  BCF    FF2.7
2C86:  BTFSC  FF2.7
2C88:  BRA    2C84
....................    setup_adc_ports(NO_ANALOGS); 
2C8A:  MOVF   FC1,W
2C8C:  ANDLW  C0
2C8E:  IORLW  0F
2C90:  MOVWF  FC1
....................    setup_adc(ADC_OFF); 
2C92:  BCF    FC2.0
....................  
....................    setup_spi(FALSE); 
2C94:  BCF    FC6.5
2C96:  BCF    F94.7
2C98:  BSF    F93.0
2C9A:  BCF    F93.1
2C9C:  MOVLW  00
2C9E:  MOVWF  FC6
2CA0:  MOVWF  FC7
....................    setup_psp(PSP_DISABLED); 
2CA2:  BCF    F96.4
....................       // Habilitamos el TIMER1 
....................    //enable_interrupts(INT_TIMER1); 
....................   setup_counters(RTCC_INTERNAL,RTCC_DIV_2); 
2CA4:  BCF    FD1.0
2CA6:  MOVLW  80
2CA8:  MOVWF  FD5
....................   setup_timer_1(T1_INTERNAL | T1_DIV_BY_1); 
2CAA:  MOVLW  85
2CAC:  MOVWF  FCD
....................   setup_timer_2(T2_DISABLED,0,1); 
2CAE:  MOVLW  00
2CB0:  MOVWF  FCA
2CB2:  MOVLW  00
2CB4:  MOVWF  FCB
....................   setup_timer_3(T3_DISABLED); 
2CB6:  MOVF   FB1,W
2CB8:  ANDLW  48
2CBA:  MOVWF  FB1
....................   setup_comparator(NC_NC_NC_NC); 
2CBC:  MOVLW  07
2CBE:  MOVWF  FB4
2CC0:  MOVF   F92,W
2CC2:  MOVLW  27
2CC4:  MOVWF  00
2CC6:  DECFSZ 00,F
2CC8:  BRA    2CC6
2CCA:  BRA    2CCC
2CCC:  MOVF   FB4,W
2CCE:  BCF    FA1.6
....................   setup_vref(FALSE); 
2CD0:  CLRF   FB5
....................   port_b_pullups(FALSE); 
2CD2:  BSF    FF1.7
....................  
....................    //Habilitamos la interrupcion serie 
....................    enable_interrupts(int_rda);   printf ("-Interrupcion SERIE\r\n"); 
2CD4:  BSF    F9D.5
2CD6:  CLRF   x8D
2CD8:  MOVF   x8D,W
2CDA:  CALL   1B32
2CDE:  INCF   x8D,F
2CE0:  MOVWF  00
2CE2:  MOVF   00,W
2CE4:  BTFSS  F9E.4
2CE6:  BRA    2CE4
2CE8:  MOVWF  FAD
2CEA:  MOVLW  15
2CEC:  SUBWF  x8D,W
2CEE:  BNZ   2CD8
....................  
....................    // Habilitamos las interrupcione globales 
....................    enable_interrupts(GLOBAL);   printf ("-Interrupciones globales\r\n"); 
2CF0:  MOVLW  C0
2CF2:  IORWF  FF2,F
2CF4:  CLRF   x8D
2CF6:  MOVF   x8D,W
2CF8:  CALL   1B62
2CFC:  INCF   x8D,F
2CFE:  MOVWF  00
2D00:  MOVF   00,W
2D02:  BTFSS  F9E.4
2D04:  BRA    2D02
2D06:  MOVWF  FAD
2D08:  MOVLW  1A
2D0A:  SUBWF  x8D,W
2D0C:  BNZ   2CF6
....................  
....................  
....................    printf ("¡Lista!\r\n\r\n"); 
2D0E:  CLRF   x8D
2D10:  MOVF   x8D,W
2D12:  CALL   1B98
2D16:  INCF   x8D,F
2D18:  MOVWF  00
2D1A:  MOVF   00,W
2D1C:  BTFSS  F9E.4
2D1E:  BRA    2D1C
2D20:  MOVWF  FAD
2D22:  MOVLW  0B
2D24:  SUBWF  x8D,W
2D26:  BNZ   2D10
.................... } 
2D28:  GOTO   3664 (RETURN)
....................  
.................... //Interrupción y gestión serie 
.................... int keypress=0; 
....................  
.................... #int_rda 
.................... void aure_serie_int() 
.................... { 
....................    int key; 
....................    key=getc(); 
*
2B66:  BTFSS  F9E.5
2B68:  BRA    2B66
2B6A:  MOVFF  FAE,A8
....................     if (key!=0x00 && key!=0xFF) 
2B6E:  MOVF   xA8,F
2B70:  BZ    2B88
2B72:  INCFSZ xA8,W
2B74:  BRA    2B78
2B76:  BRA    2B88
....................     { 
....................       output_toggle(LED); 
2B78:  BCF    F94.2
2B7A:  BTG    F8B.2
....................       keypress=key; 
2B7C:  MOVFF  A8,82
....................       //printf ("\rRX:%u->%c\r\n", key,key); 
....................       if (key==27) reset_cpu(); 
2B80:  MOVF   xA8,W
2B82:  SUBLW  1B
2B84:  BTFSC  FD8.2
2B86:  RESET
....................     } 
.................... } 
....................  
....................  
2B88:  BCF    F9E.5
2B8A:  GOTO   1864
.................... void aure_usb_serie_int() 
.................... { 
....................    int key; 
....................    key=usb_cdc_getc(); 
*
2F16:  BRA    2ED6
2F18:  MOVFF  01,8C
....................     if (key!=0x00 && key!=0xFF) 
2F1C:  MOVF   x8C,F
2F1E:  BZ    2F36
2F20:  INCFSZ x8C,W
2F22:  BRA    2F26
2F24:  BRA    2F36
....................     { 
....................       output_toggle(LED); 
2F26:  BCF    F94.2
2F28:  BTG    F8B.2
....................       keypress=key; 
2F2A:  MOVFF  8C,82
....................       //printf ("\rUSB RX:%u->%c\r\n", key,key); 
....................       if (key==27) reset_cpu(); 
2F2E:  MOVF   x8C,W
2F30:  SUBLW  1B
2F32:  BTFSC  FD8.2
2F34:  RESET
....................     } 
.................... } 
2F36:  GOTO   3672 (RETURN)
....................  
.................... void barra(int valor) 
.................... { 
....................    float lectura; 
....................    int j, lec[25]; 
....................          lectura=valor; 
....................          lectura=lectura/10; 
....................          for (j=0; j<25; j++) if (j<=lectura) { lec[j]='O'; } else {lec[j]=' ';} 
....................          lec[24]='\0'; 
....................          printf (usb_cdc_putc, "%s | (%u)\r\n", lec, valor); 
.................... } 
....................  
.................... #inline 
.................... int leeradc(int canal) 
.................... { 
....................    set_adc_channel(canal); 
*
32E2:  RLCF   x9D,W
32E4:  MOVWF  00
32E6:  RLCF   00,F
32E8:  MOVLW  FC
32EA:  ANDWF  00,F
32EC:  MOVF   FC2,W
32EE:  ANDLW  C3
32F0:  IORWF  00,W
32F2:  MOVWF  FC2
*
33A4:  RLCF   x9D,W
33A6:  MOVWF  00
33A8:  RLCF   00,F
33AA:  MOVLW  FC
33AC:  ANDWF  00,F
33AE:  MOVF   FC2,W
33B0:  ANDLW  C3
33B2:  IORWF  00,W
33B4:  MOVWF  FC2
*
3486:  RLCF   x9D,W
3488:  MOVWF  00
348A:  RLCF   00,F
348C:  MOVLW  FC
348E:  ANDWF  00,F
3490:  MOVF   FC2,W
3492:  ANDLW  C3
3494:  IORWF  00,W
3496:  MOVWF  FC2
*
354A:  RLCF   x9D,W
354C:  MOVWF  00
354E:  RLCF   00,F
3550:  MOVLW  FC
3552:  ANDWF  00,F
3554:  MOVF   FC2,W
3556:  ANDLW  C3
3558:  IORWF  00,W
355A:  MOVWF  FC2
*
3680:  RLCF   x9D,W
3682:  MOVWF  00
3684:  RLCF   00,F
3686:  MOVLW  FC
3688:  ANDWF  00,F
368A:  MOVF   FC2,W
368C:  ANDLW  C3
368E:  IORWF  00,W
3690:  MOVWF  FC2
*
36A6:  RLCF   x9D,W
36A8:  MOVWF  00
36AA:  RLCF   00,F
36AC:  MOVLW  FC
36AE:  ANDWF  00,F
36B0:  MOVF   FC2,W
36B2:  ANDLW  C3
36B4:  IORWF  00,W
36B6:  MOVWF  FC2
*
3712:  RLCF   x9D,W
3714:  MOVWF  00
3716:  RLCF   00,F
3718:  MOVLW  FC
371A:  ANDWF  00,F
371C:  MOVF   FC2,W
371E:  ANDLW  C3
3720:  IORWF  00,W
3722:  MOVWF  FC2
*
373A:  RLCF   x9D,W
373C:  MOVWF  00
373E:  RLCF   00,F
3740:  MOVLW  FC
3742:  ANDWF  00,F
3744:  MOVF   FC2,W
3746:  ANDLW  C3
3748:  IORWF  00,W
374A:  MOVWF  FC2
*
386C:  RLCF   x9D,W
386E:  MOVWF  00
3870:  RLCF   00,F
3872:  MOVLW  FC
3874:  ANDWF  00,F
3876:  MOVF   FC2,W
3878:  ANDLW  C3
387A:  IORWF  00,W
387C:  MOVWF  FC2
....................    canal=read_adc(); 
*
32F4:  BSF    FC2.1
32F6:  BTFSC  FC2.1
32F8:  BRA    32F6
32FA:  MOVFF  FC4,9D
*
33B6:  BSF    FC2.1
33B8:  BTFSC  FC2.1
33BA:  BRA    33B8
33BC:  MOVFF  FC4,9D
*
3498:  BSF    FC2.1
349A:  BTFSC  FC2.1
349C:  BRA    349A
349E:  MOVFF  FC4,9D
*
355C:  BSF    FC2.1
355E:  BTFSC  FC2.1
3560:  BRA    355E
3562:  MOVFF  FC4,9D
*
3692:  BSF    FC2.1
3694:  BTFSC  FC2.1
3696:  BRA    3694
3698:  MOVFF  FC4,9D
*
36B8:  BSF    FC2.1
36BA:  BTFSC  FC2.1
36BC:  BRA    36BA
36BE:  MOVFF  FC4,9D
*
3724:  BSF    FC2.1
3726:  BTFSC  FC2.1
3728:  BRA    3726
372A:  MOVFF  FC4,9D
*
374C:  BSF    FC2.1
374E:  BTFSC  FC2.1
3750:  BRA    374E
3752:  MOVFF  FC4,9D
*
387E:  BSF    FC2.1
3880:  BTFSC  FC2.1
3882:  BRA    3880
3884:  MOVFF  FC4,9D
....................    return canal; 
*
32FE:  MOVFF  9D,01
*
33C0:  MOVFF  9D,01
*
34A2:  MOVFF  9D,01
*
3566:  MOVFF  9D,01
*
369C:  MOVFF  9D,01
*
36C2:  MOVFF  9D,01
*
372E:  MOVFF  9D,01
*
3756:  MOVFF  9D,01
*
3888:  MOVFF  9D,01
.................... } 
....................  
....................  
.................... #include <../lib/motores.h> 
.................... #define motores 1 
.................... #define MIR PIN_D5 
.................... #define MIF PIN_D4 
.................... #define MDR PIN_D7 
.................... #define MDF PIN_D6 
....................  
.................... void motores_patras() 
.................... { 
....................       output_bit(MDF,1); 
*
2F4C:  BSF    F8C.6
2F4E:  BCF    F95.6
....................       output_bit(MDR,0); 
2F50:  BCF    F8C.7
2F52:  BCF    F95.7
....................       output_bit(MIF,1); 
2F54:  BSF    F8C.4
2F56:  BCF    F95.4
....................       output_bit(MIR,0); 
2F58:  BCF    F8C.5
2F5A:  BCF    F95.5
....................  
.................... } 
2F5C:  GOTO   30DA (RETURN)
....................  
.................... void motores_palante() 
.................... { 
....................       output_bit(MDF,0); 
*
2F3A:  BCF    F8C.6
2F3C:  BCF    F95.6
....................       output_bit(MDR,1); 
2F3E:  BSF    F8C.7
2F40:  BCF    F95.7
....................       output_bit(MIF,0); 
2F42:  BCF    F8C.4
2F44:  BCF    F95.4
....................       output_bit(MIR,1); 
2F46:  BSF    F8C.5
2F48:  BCF    F95.5
.................... } 
2F4A:  RETLW  00
....................  
.................... void motores_paderecha() 
.................... { 
....................       output_bit(MDF,1); 
*
2F60:  BSF    F8C.6
2F62:  BCF    F95.6
....................       output_bit(MDR,0); 
2F64:  BCF    F8C.7
2F66:  BCF    F95.7
....................       output_bit(MIF,0); 
2F68:  BCF    F8C.4
2F6A:  BCF    F95.4
....................       output_bit(MIR,1); 
2F6C:  BSF    F8C.5
2F6E:  BCF    F95.5
.................... } 
2F70:  GOTO   30DA (RETURN)
....................  
.................... void motores_paizda() 
.................... { 
....................       output_bit(MDF,0); 
2F74:  BCF    F8C.6
2F76:  BCF    F95.6
....................       output_bit(MDR,1); 
2F78:  BSF    F8C.7
2F7A:  BCF    F95.7
....................       output_bit(MIF,1); 
2F7C:  BSF    F8C.4
2F7E:  BCF    F95.4
....................       output_bit(MIR,0); 
2F80:  BCF    F8C.5
2F82:  BCF    F95.5
.................... } 
2F84:  GOTO   30DA (RETURN)
....................  
.................... void motores_parar() 
.................... { 
....................       output_bit(MDF,0); 
2F88:  BCF    F8C.6
2F8A:  BCF    F95.6
....................       output_bit(MDR,0); 
2F8C:  BCF    F8C.7
2F8E:  BCF    F95.7
....................       output_bit(MIF,0); 
2F90:  BCF    F8C.4
2F92:  BCF    F95.4
....................       output_bit(MIR,0); 
2F94:  BCF    F8C.5
2F96:  BCF    F95.5
.................... } 
2F98:  RETLW  00
....................  
....................  
....................  
.................... void motores_comprobar() 
.................... { 
....................    printf (usb_cdc_putc, "Comprobando motores...\r\n"); 
....................    printf (usb_cdc_putc, "\tAdelante\r\n"); 
....................    motores_palante(); 
....................    delay_ms(2000); 
....................    printf (usb_cdc_putc, "\tAtras\r\n"); 
....................    motores_patras(); 
....................    delay_ms(2000); 
....................    printf (usb_cdc_putc, "\tDerecha\r\n"); 
....................    motores_paderecha(); 
....................    delay_ms(2000); 
....................    printf (usb_cdc_putc, "\tIzquierda\r\n"); 
....................    motores_paizda(); 
....................    delay_ms(2000); 
....................    printf (usb_cdc_putc, "Motores comprobados\r\n\r\n"); 
.................... } 
....................  
.................... #include <../lib/ldr.h> 
.................... #define ldr 1 
.................... #define LDR_I 1 
.................... #define LDR_D 0 
....................  
.................... void ldr_configurar() 
.................... { 
....................    //Configuramos el ADC 
....................    //Todas las entradas analogicas activas y rango 0-Vdd 
....................    setup_adc_ports( AN0_TO_AN1_ANALOG|VSS_VDD ); 
*
31B6:  MOVF   FC1,W
31B8:  ANDLW  C0
31BA:  IORLW  0D
31BC:  MOVWF  FC1
....................    //Reloj interno 
....................    setup_adc(ADC_CLOCK_INTERNAL ); 
31BE:  BSF    FC0.0
31C0:  BSF    FC0.1
31C2:  BSF    FC0.2
31C4:  BCF    FC0.7
31C6:  BSF    FC2.0
....................    printf("-ADC\r\n"); 
31C8:  CLRF   x9D
31CA:  MOVF   x9D,W
31CC:  CALL   1BBE
31D0:  INCF   x9D,F
31D2:  MOVWF  00
31D4:  MOVF   00,W
31D6:  BTFSS  F9E.4
31D8:  BRA    31D6
31DA:  MOVWF  FAD
31DC:  MOVLW  06
31DE:  SUBWF  x9D,W
31E0:  BNZ   31CA
....................    printf("-LDRs configuradas\r\n"); 
31E2:  CLRF   x9D
31E4:  MOVF   x9D,W
31E6:  CALL   1BE0
31EA:  INCF   x9D,F
31EC:  MOVWF  00
31EE:  MOVF   00,W
31F0:  BTFSS  F9E.4
31F2:  BRA    31F0
31F4:  MOVWF  FAD
31F6:  MOVLW  14
31F8:  SUBWF  x9D,W
31FA:  BNZ   31E4
.................... } 
31FC:  RETLW  00
....................  
.................... void ldr_comprobar() 
.................... { 
....................    printf (usb_cdc_putc, "Comprobando sensores LDR...\r\n"); 
....................    printf (usb_cdc_putc, "Configurando...\r\n"); 
....................    ldr_configurar(); 
....................    printf (usb_cdc_putc, "\tSensor derecho:\r\n"); 
....................    while (!usb_cdc_kbhit()) 
....................    { 
....................  
....................       barra(leeradc(LDR_D)); 
....................       delay_ms(250); 
....................    } 
....................    usb_cdc_getc(); 
....................    printf (usb_cdc_putc, "\r\n"); 
....................    printf (usb_cdc_putc, "\tSensor izquierdo:\r\n"); 
....................    while (!usb_cdc_kbhit()) 
....................    { 
....................  
....................       barra(leeradc(LDR_I)); 
....................       delay_ms(250); 
....................    } 
....................    usb_cdc_getc(); 
....................    printf (usb_cdc_putc, "\r\n"); 
.................... } 
....................  
.................... #include <../lib/cny70.h> 
.................... #define cny70 1 
.................... #define CNY_I 2 
.................... #define CNY_D 3 
....................  
....................  
.................... void cny70_configurar() 
.................... { 
....................    //Configuramos el ADC 
....................    //Todas las entradas analogicas activas y rango 0-Vdd 
....................    setup_adc_ports( ALL_ANALOG|VSS_VDD ); 
....................    //Reloj interno 
....................    setup_adc(ADC_CLOCK_INTERNAL ); 
....................    printf("-ADC\r\n"); 
....................  
....................    printf("-CNY70 configurado\r\n"); 
.................... } 
....................  
.................... #include <../lib/bumper.h> 
.................... #define bumper 1 
.................... #define BUMPER_I PIN_A2 
.................... #define BUMPER_D PIN_A3 
....................  
.................... void bumpers_comprobar() 
.................... { 
....................    int c; 
....................    printf (usb_cdc_putc, "Comprobando bumpers...\r\n"); 
....................    while (1) 
....................    { 
....................       usb_task(); 
....................       if (usb_cdc_kbhit()) 
....................       { 
....................          c=usb_cdc_getc(); 
....................          printf(usb_cdc_putc, "%c\r\n",c); 
....................          if (c==27) return; 
....................       } 
....................       printf (usb_cdc_putc, "Bumper izquierdo: %d Bumper derecho: %d\r\n", input(BUMPER_I), input(BUMPER_D)); 
....................       delay_ms(100); 
....................    } 
.................... } 
....................  
.................... #include <../lib/flex_lcd.c> 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... //#define LCD_DB4   PIN_B4 
.................... //#define LCD_DB5   PIN_B5 
.................... //#define LCD_DB6   PIN_B6 
.................... //#define LCD_DB7   PIN_B7 
.................... // 
.................... //#define LCD_RS    PIN_C0 
.................... //#define LCD_RW    PIN_C1 
.................... //#define LCD_E     PIN_C2 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
.................... #define lcd 1 
.................... #define LCD_DB4 PIN_B5 
.................... #define LCD_DB5 PIN_B4 
.................... #define LCD_DB6 PIN_B3 
.................... #define LCD_DB7 PIN_B2 
....................  
.................... #define LCD_RS PIN_B7 
.................... #define LCD_E PIN_B6 
.................... //#define LCD_RW PIN_A2 
.................... //#define USE_LCD_RW   1 
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
.................... //======================================== 
....................  
.................... int8 const LCD_INIT_STRING[4] = 
.................... { 
....................   0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................   0xc, // Display on 
....................   1, // Clear display 
....................   6 // Increment cursor 
.................... }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
....................   // Note: !! converts an integer expression 
....................   // to a boolean (1 or 0). 
....................   output_bit(LCD_DB4, !!(nibble & 1)); 
*
2D8C:  BTFSC  xA7.0
2D8E:  BRA    2D94
2D90:  BCF    F8A.5
2D92:  BRA    2D96
2D94:  BSF    F8A.5
2D96:  BCF    F93.5
....................   output_bit(LCD_DB5, !!(nibble & 2)); 
2D98:  BTFSC  xA7.1
2D9A:  BRA    2DA0
2D9C:  BCF    F8A.4
2D9E:  BRA    2DA2
2DA0:  BSF    F8A.4
2DA2:  BCF    F93.4
....................   output_bit(LCD_DB6, !!(nibble & 4)); 
2DA4:  BTFSC  xA7.2
2DA6:  BRA    2DAC
2DA8:  BCF    F8A.3
2DAA:  BRA    2DAE
2DAC:  BSF    F8A.3
2DAE:  BCF    F93.3
....................   output_bit(LCD_DB7, !!(nibble & 8)); 
2DB0:  BTFSC  xA7.3
2DB2:  BRA    2DB8
2DB4:  BCF    F8A.2
2DB6:  BRA    2DBA
2DB8:  BSF    F8A.2
2DBA:  BCF    F93.2
....................  
....................   delay_us(1); 
2DBC:  MOVLW  03
2DBE:  MOVWF  00
2DC0:  DECFSZ 00,F
2DC2:  BRA    2DC0
2DC4:  BRA    2DC6
....................   output_high(LCD_E); 
2DC6:  BCF    F93.6
2DC8:  BSF    F8A.6
....................   delay_us(2); 
2DCA:  MOVLW  07
2DCC:  MOVWF  00
2DCE:  DECFSZ 00,F
2DD0:  BRA    2DCE
2DD2:  BRA    2DD4
....................   output_low(LCD_E); 
2DD4:  BCF    F93.6
2DD6:  BCF    F8A.6
.................... } 
2DD8:  RETLW  00
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine. For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
....................   int8 retval; 
....................   // Create bit variables so that we can easily set 
....................   // individual bits in the retval variable. 
....................   #bit retval_0 = retval.0 
....................   #bit retval_1 = retval.1 
....................   #bit retval_2 = retval.2 
....................   #bit retval_3 = retval.3 
....................  
....................   retval = 0; 
....................  
....................   output_high(LCD_E); 
....................   delay_us(1); 
....................  
....................   retval_0 = input(LCD_DB4); 
....................   retval_1 = input(LCD_DB5); 
....................   retval_2 = input(LCD_DB6); 
....................   retval_3 = input(LCD_DB7); 
....................  
....................   output_low(LCD_E); 
....................  
....................   return(retval); 
.................... } 
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
....................   int8 low; 
....................   int8 high; 
....................  
....................   output_high(LCD_RW); 
....................   delay_cycles(1); 
....................  
....................   high = lcd_read_nibble(); 
....................  
....................   low = lcd_read_nibble(); 
....................  
....................   return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
....................   output_low(LCD_RS); 
2DDA:  BCF    F93.7
2DDC:  BCF    F8A.7
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
.................... #else 
.................... delay_us(60); 
2DDE:  MOVLW  EF
2DE0:  MOVWF  00
2DE2:  DECFSZ 00,F
2DE4:  BRA    2DE2
2DE6:  BRA    2DE8
.................... #endif 
....................  
....................   if(address) 
2DE8:  MOVF   xA4,F
2DEA:  BZ    2DF2
....................   output_high(LCD_RS); 
2DEC:  BCF    F93.7
2DEE:  BSF    F8A.7
....................   else 
2DF0:  BRA    2DF6
....................   output_low(LCD_RS); 
2DF2:  BCF    F93.7
2DF4:  BCF    F8A.7
....................  
....................   delay_cycles(1); 
2DF6:  NOP   
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... delay_cycles(1); 
.................... #endif 
....................  
....................   output_low(LCD_E); 
2DF8:  BCF    F93.6
2DFA:  BCF    F8A.6
....................  
....................   lcd_send_nibble(n >> 4); 
2DFC:  SWAPF  xA5,W
2DFE:  MOVWF  xA6
2E00:  MOVLW  0F
2E02:  ANDWF  xA6,F
2E04:  MOVFF  A6,A7
2E08:  RCALL  2D8C
....................   lcd_send_nibble(n & 0xf); 
2E0A:  MOVF   xA5,W
2E0C:  ANDLW  0F
2E0E:  MOVWF  xA6
2E10:  MOVWF  xA7
2E12:  RCALL  2D8C
.................... } 
2E14:  RETLW  00
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
....................   int8 i; 
....................  
....................   output_low(LCD_RS); 
2E16:  BCF    F93.7
2E18:  BCF    F8A.7
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
.................... #endif 
....................  
....................   output_low(LCD_E); 
2E1A:  BCF    F93.6
2E1C:  BCF    F8A.6
....................  
....................   delay_ms(15); 
2E1E:  MOVLW  0F
2E20:  MOVWF  xA0
2E22:  RCALL  2B8E
....................  
....................   for(i=0 ;i < 3; i++) 
2E24:  CLRF   x8C
2E26:  MOVF   x8C,W
2E28:  SUBLW  02
2E2A:  BNC   2E3C
....................   { 
....................     lcd_send_nibble(0x03); 
2E2C:  MOVLW  03
2E2E:  MOVWF  xA7
2E30:  RCALL  2D8C
....................     delay_ms(5); 
2E32:  MOVLW  05
2E34:  MOVWF  xA0
2E36:  RCALL  2B8E
....................   } 
2E38:  INCF   x8C,F
2E3A:  BRA    2E26
....................  
....................   lcd_send_nibble(0x02); 
2E3C:  MOVLW  02
2E3E:  MOVWF  xA7
2E40:  RCALL  2D8C
....................  
....................   for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
2E42:  CLRF   x8C
2E44:  MOVF   x8C,W
2E46:  SUBLW  03
2E48:  BNC   2E6E
....................   { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
2E4A:  CLRF   03
2E4C:  MOVF   x8C,W
2E4E:  MOVFF  FF2,8D
2E52:  BCF    FF2.7
2E54:  CALL   1C10
2E58:  BTFSC  x8D.7
2E5A:  BSF    FF2.7
2E5C:  MOVWF  x8E
2E5E:  CLRF   xA4
2E60:  MOVWF  xA5
2E62:  RCALL  2DDA
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled. One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
.................... #ifndef USE_LCD_RW 
.................... delay_ms(5); 
2E64:  MOVLW  05
2E66:  MOVWF  xA0
2E68:  RCALL  2B8E
.................... #endif 
.................... } 
2E6A:  INCF   x8C,F
2E6C:  BRA    2E44
....................  
.................... } 
2E6E:  RETLW  00
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
....................   int8 address; 
....................  
....................   if(y != 1) 
*
3150:  DECFSZ xA1,W
3152:  BRA    3156
3154:  BRA    315C
....................   address = lcd_line_two; 
3156:  MOVLW  40
3158:  MOVWF  xA2
....................   else 
315A:  BRA    315E
....................   address=0; 
315C:  CLRF   xA2
....................  
....................   address += x-1; 
315E:  MOVLW  01
3160:  SUBWF  xA0,W
3162:  ADDWF  xA2,F
....................   lcd_send_byte(0, 0x80 | address); 
3164:  MOVF   xA2,W
3166:  IORLW  80
3168:  MOVWF  xA3
316A:  CLRF   xA4
316C:  MOVWF  xA5
316E:  RCALL  2DDA
.................... } 
3170:  RETLW  00
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................   switch(c) 
....................   { 
3172:  MOVF   x9F,W
3174:  XORLW  0C
3176:  BZ    3182
3178:  XORLW  01
317A:  BZ    3192
317C:  XORLW  05
317E:  BZ    319E
3180:  BRA    31A8
....................     case '\f': 
....................       lcd_send_byte(0,1); 
3182:  CLRF   xA4
3184:  MOVLW  01
3186:  MOVWF  xA5
3188:  RCALL  2DDA
....................       delay_ms(2); 
318A:  MOVLW  02
318C:  MOVWF  xA0
318E:  RCALL  2B8E
....................       break; 
3190:  BRA    31B4
....................  
....................     case 0x0d: 
....................       lcd_gotoxy(1,2); 
3192:  MOVLW  01
3194:  MOVWF  xA0
3196:  MOVLW  02
3198:  MOVWF  xA1
319A:  RCALL  3150
....................       break; 
319C:  BRA    31B4
....................  
....................     case '\b': 
....................       lcd_send_byte(0,0x10); 
319E:  CLRF   xA4
31A0:  MOVLW  10
31A2:  MOVWF  xA5
31A4:  RCALL  2DDA
....................       break; 
31A6:  BRA    31B4
....................  
....................     default: 
....................       lcd_send_byte(1,c); 
31A8:  MOVLW  01
31AA:  MOVWF  xA4
31AC:  MOVFF  9F,A5
31B0:  RCALL  2DDA
....................       break; 
31B2:  BRA    31B4
....................   } 
.................... } 
31B4:  RETLW  00
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
....................   char value; 
....................  
....................   lcd_gotoxy(x,y); 
....................  
....................   // Wait until busy flag is low. 
....................   while(bit_test(lcd_read_byte(),7)); 
....................  
....................   output_high(LCD_RS); 
....................   value = lcd_read_byte(); 
....................   output_low(lcd_RS); 
....................  
....................   return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) { 
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink); 
*
2E70:  BCF    FD8.0
2E72:  RLCF   x8C,W
2E74:  IORLW  0C
2E76:  IORWF  x8D,W
2E78:  MOVWF  x8F
2E7A:  CLRF   xA4
2E7C:  MOVWF  xA5
2E7E:  RCALL  2DDA
.................... } 
2E80:  GOTO   2E8C (RETURN)
....................  
.................... void lcd_configurar() 
.................... { 
....................    lcd_init(); lcd_setcursor_vb(0,0);    
2E84:  RCALL  2E16
2E86:  CLRF   x8C
2E88:  CLRF   x8D
2E8A:  BRA    2E70
....................    //printf(lcd_putc, "Aure         LCD\r READY..."); 
....................    //printf ("-L.C.D.\r\n"); 
....................  
.................... } 
2E8C:  GOTO   366A (RETURN)
....................  
....................  
.................... #include <../lib/sonido.h> 
.................... #define sonido 1 
.................... //PIN del altavoz 
.................... #define altavoz PIN_C0 
....................  
.................... void sdsa() 
.................... { 
....................    int j=0; 
....................    for (j=0; j<255; j++) 
....................    { 
....................    output_low(altavoz); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(altavoz); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
....................  
....................    for (j=255; j>0; j--) 
....................    { 
....................    output_low(altavoz); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(altavoz); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
.................... } 
....................  
.................... void sonido_beep() 
.................... { 
....................    int j=0; 
....................    for (j=0; j<150; j++) 
....................    { 
....................       output_high(altavoz); 
....................       delay_us(200); 
....................       output_low(altavoz); 
....................       delay_us(200); 
....................    } 
....................  
.................... } 
.................... void sonido_dolordecabeza() 
.................... { 
....................    int j=0; 
....................    for (j=0; j<1000; j++) 
....................    { 
....................       output_high(altavoz); 
....................       delay_us(20); 
....................       output_low(altavoz); 
....................       delay_us(20); 
....................    } 
....................  
.................... } 
....................  
.................... void sonido_voipvoip() 
.................... { 
....................    int i=0,j=0; 
....................    for (i=0; i<2; i++) 
....................    { 
....................  
....................    for (j=255; j>0; j--) 
....................    { 
....................    output_low(altavoz); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(altavoz); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
....................     
....................    } 
.................... } 
....................  
.................... void sonido_sirena() 
.................... { 
....................    int i=0,j=0; 
....................    for (i=0; i<2; i++) 
....................    { 
....................  
....................    for (j=255; j>0; j--) 
....................    { 
....................    output_low(altavoz); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(altavoz); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
....................    for (j=0; j<255; j++) 
....................    { 
....................    output_low(altavoz); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(altavoz); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
....................  
....................    } 
.................... } 
....................  
....................  
.................... void sonido_laser() 
.................... { 
....................    int j=0; 
....................    for (j=440; j<1000; j++) 
....................    { 
....................    output_low(altavoz); 
....................    delay_us(j); 
....................    output_high(altavoz); 
....................    delay_us(j); 
....................  
....................    } 
.................... } 
....................  
.................... #include <../lib/2leds.h> 
.................... #define 2leds 1 
.................... #define LED_I PIN_A5 
.................... #define LED_D PIN_E0 
....................  
....................  
.................... void leds_configurar() 
.................... { 
....................    printf("-Configurando leds\r\n"); 
*
2D2C:  CLRF   x8C
2D2E:  MOVF   x8C,W
2D30:  CALL   1C2E
2D34:  INCF   x8C,F
2D36:  MOVWF  00
2D38:  MOVF   00,W
2D3A:  BTFSS  F9E.4
2D3C:  BRA    2D3A
2D3E:  MOVWF  FAD
2D40:  MOVLW  14
2D42:  SUBWF  x8C,W
2D44:  BNZ   2D2E
....................    set_tris_e(0xff); 
2D46:  BSF    F96.0
2D48:  BSF    F96.1
2D4A:  BSF    F96.2
....................    output_high(LED_I); printf ("-Led izquierdo\r\n"); 
2D4C:  BCF    F92.5
2D4E:  BSF    F89.5
2D50:  CLRF   x8C
2D52:  MOVF   x8C,W
2D54:  CALL   1C5E
2D58:  INCF   x8C,F
2D5A:  MOVWF  00
2D5C:  MOVF   00,W
2D5E:  BTFSS  F9E.4
2D60:  BRA    2D5E
2D62:  MOVWF  FAD
2D64:  MOVLW  10
2D66:  SUBWF  x8C,W
2D68:  BNZ   2D52
....................    output_high(LED_D); printf ("-Led derecho\r\n"); 
2D6A:  BCF    F96.0
2D6C:  BSF    F8D.0
2D6E:  CLRF   x8C
2D70:  MOVF   x8C,W
2D72:  CALL   1C8A
2D76:  INCF   x8C,F
2D78:  MOVWF  00
2D7A:  MOVF   00,W
2D7C:  BTFSS  F9E.4
2D7E:  BRA    2D7C
2D80:  MOVWF  FAD
2D82:  MOVLW  0E
2D84:  SUBWF  x8C,W
2D86:  BNZ   2D70
.................... } 
2D88:  GOTO   3668 (RETURN)
....................  
....................  
....................  
....................  
.................... int prueba_pilas=0, enviar_ldr=0, enviar_cny=0, enviar_pulsadores=0, enviar_analog=0, enviar_dig=0; 
....................  
....................  
....................  
....................  
.................... // Rutina de gestión de pulsaciones serie 
.................... void aure_serie() 
.................... { 
....................    output_toggle(LED); 
*
2FFE:  BCF    F94.2
3000:  BTG    F8B.2
....................    switch(keypress) 
....................    { 
3002:  MOVF   x82,W
3004:  XORLW  31
3006:  BZ    3042
3008:  XORLW  03
300A:  BZ    3050
300C:  XORLW  01
300E:  BZ    305E
3010:  XORLW  07
3012:  BZ    306C
3014:  XORLW  01
3016:  BZ    307A
3018:  XORLW  03
301A:  BZ    3088
301C:  XORLW  41
301E:  BZ    3096
3020:  XORLW  04
3022:  BZ    309A
3024:  XORLW  17
3026:  BZ    309C
3028:  XORLW  05
302A:  BZ    309E
302C:  XORLW  10
302E:  BZ    30A0
3030:  XORLW  1F
3032:  BZ    30A4
3034:  XORLW  03
3036:  BZ    30AA
3038:  XORLW  17
303A:  BZ    30B0
303C:  XORLW  02
303E:  BZ    30B2
3040:  BRA    30B4
.................... //Control de sensores 
....................          case '1': 
....................             if (enviar_ldr==1) { enviar_ldr=0; } else{ enviar_ldr=1;} 
3042:  DECFSZ x84,W
3044:  BRA    304A
3046:  CLRF   x84
3048:  BRA    304E
304A:  MOVLW  01
304C:  MOVWF  x84
....................             break; 
304E:  BRA    30DA
....................          case '2': 
....................             if (enviar_cny==1) { enviar_cny=0; } else{ enviar_cny=1;} 
3050:  DECFSZ x85,W
3052:  BRA    3058
3054:  CLRF   x85
3056:  BRA    305C
3058:  MOVLW  01
305A:  MOVWF  x85
....................             break; 
305C:  BRA    30DA
....................          case '3': 
....................             if (enviar_pulsadores==1) { enviar_pulsadores=0; } else{ enviar_pulsadores=1;} 
305E:  DECFSZ x86,W
3060:  BRA    3066
3062:  CLRF   x86
3064:  BRA    306A
3066:  MOVLW  01
3068:  MOVWF  x86
....................             break; 
306A:  BRA    30DA
....................          case '4': 
....................             if (enviar_analog==1) { enviar_analog=0; } else{ enviar_analog=1;} 
306C:  DECFSZ x87,W
306E:  BRA    3074
3070:  CLRF   x87
3072:  BRA    3078
3074:  MOVLW  01
3076:  MOVWF  x87
....................             break; 
3078:  BRA    30DA
....................          case '5': 
....................             if (enviar_dig==1) { enviar_dig=0; } else{ enviar_dig=1;} 
307A:  DECFSZ x88,W
307C:  BRA    3082
307E:  CLRF   x88
3080:  BRA    3086
3082:  MOVLW  01
3084:  MOVWF  x88
....................             break; 
3086:  BRA    30DA
....................          case '6': 
....................             if (prueba_pilas==1) { prueba_pilas=0; } else{ prueba_pilas=1;} 
3088:  DECFSZ x83,W
308A:  BRA    3090
308C:  CLRF   x83
308E:  BRA    3094
3090:  MOVLW  01
3092:  MOVWF  x83
....................             break; 
3094:  BRA    30DA
.................... //Control de movimiento 
....................             case 'w': 
....................                motores_palante(); 
3096:  RCALL  2F3A
....................                break; 
3098:  BRA    30DA
....................             case 's': 
....................                motores_patras(); 
309A:  BRA    2F4C
....................                break; 
....................             case 'd': 
....................                motores_paderecha(); 
309C:  BRA    2F60
....................                break; 
....................             case 'a': 
....................                motores_paizda(); 
309E:  BRA    2F74
....................                break; 
....................             case 'q': 
....................                motores_parar(); 
30A0:  RCALL  2F88
....................                break; 
30A2:  BRA    30DA
.................... //Control de leds 
....................             case 'n': 
....................             output_toggle(LED_I); 
30A4:  BCF    F92.5
30A6:  BTG    F89.5
....................             break; 
30A8:  BRA    30DA
....................             case 'm': 
....................             output_toggle(LED_D); 
30AA:  BCF    F96.0
30AC:  BTG    F8D.0
....................             break; 
30AE:  BRA    30DA
.................... // Funciones 
....................          case 'z': 
....................             //modo_buscaluz(); 
....................             break; 
30B0:  BRA    30DA
....................         case 'x': 
....................             //navegacion_auto(); 
....................             break; 
30B2:  BRA    30DA
....................  
....................             default: 
....................                printf (usb_cdc_putc, "NR:%c\r\n", keypress); 
30B4:  MOVLW  4E
30B6:  MOVWF  x90
30B8:  RCALL  2FDC
30BA:  MOVLW  52
30BC:  MOVWF  x90
30BE:  RCALL  2FDC
30C0:  MOVLW  3A
30C2:  MOVWF  x90
30C4:  RCALL  2FDC
30C6:  MOVFF  82,90
30CA:  RCALL  2FDC
30CC:  MOVLW  0D
30CE:  MOVWF  x90
30D0:  RCALL  2FDC
30D2:  MOVLW  0A
30D4:  MOVWF  x90
30D6:  RCALL  2FDC
....................                break; 
30D8:  BRA    30DA
....................    } 
....................    //Vaciamos el buffer 
....................    keypress=0; 
30DA:  CLRF   x82
.................... } 
30DC:  GOTO   3678 (RETURN)
....................  
....................  
.................... int ldr_a_lcd() 
.................... { 
....................    long lectura; 
....................    int valor; 
....................    int j, lec[13]; 
....................    ldr_configurar(); 
*
32CE:  RCALL  31B6
....................    while (input(PULSADOR)!=1) 
....................    { 
32D0:  BSF    F92.4
32D2:  BTFSC  F80.4
32D4:  BRA    346E
....................       lcd_gotoxy(1,1); 
32D6:  MOVLW  01
32D8:  MOVWF  xA0
32DA:  MOVWF  xA1
32DC:  RCALL  3150
....................       valor=leeradc(LDR_I); 
32DE:  MOVLW  01
32E0:  MOVWF  x9D
*
3302:  MOVFF  01,8E
....................       lectura=valor; 
3306:  CLRF   x8D
3308:  MOVFF  8E,8C
....................       lectura=lectura/22; 
330C:  MOVFF  8D,9E
3310:  MOVFF  8C,9D
3314:  CLRF   xA0
3316:  MOVLW  16
3318:  MOVWF  x9F
331A:  RCALL  31FE
331C:  MOVFF  02,8D
3320:  MOVFF  01,8C
....................       for (j=0; j<12; j++) if (j<=lectura) { lec[j]=219; } else {lec[j]='-';} 
3324:  CLRF   x8F
3326:  MOVF   x8F,W
3328:  SUBLW  0B
332A:  BNC   3360
332C:  MOVF   x8D,F
332E:  BNZ   3336
3330:  MOVF   x8F,W
3332:  SUBWF  x8C,W
3334:  BNC   334A
3336:  CLRF   03
3338:  MOVF   x8F,W
333A:  ADDLW  90
333C:  MOVWF  FE9
333E:  MOVLW  00
3340:  ADDWFC 03,W
3342:  MOVWF  FEA
3344:  MOVLW  DB
3346:  MOVWF  FEF
3348:  BRA    335C
334A:  CLRF   03
334C:  MOVF   x8F,W
334E:  ADDLW  90
3350:  MOVWF  FE9
3352:  MOVLW  00
3354:  ADDWFC 03,W
3356:  MOVWF  FEA
3358:  MOVLW  2D
335A:  MOVWF  FEF
335C:  INCF   x8F,F
335E:  BRA    3326
....................       lec[12]='\0'; 
3360:  CLRF   x9C
....................       printf (lcd_putc, "%03u|%s\r", valor, lec); 
3362:  MOVFF  8E,9D
3366:  MOVLW  03
3368:  MOVWF  x9E
336A:  RCALL  3268
336C:  MOVLW  7C
336E:  MOVWF  x9F
3370:  RCALL  3172
3372:  CLRF   FEA
3374:  MOVLW  90
3376:  MOVWF  FE9
3378:  MOVLW  00
337A:  IORWF  FEF,W
337C:  BZ    339C
337E:  MOVFF  FEA,9E
3382:  MOVFF  FE9,9D
3386:  MOVFF  FEF,9F
338A:  RCALL  3172
338C:  MOVFF  9E,FEA
3390:  MOVFF  9D,FE9
3394:  INCF   FE9,F
3396:  BTFSC  FD8.2
3398:  INCF   FEA,F
339A:  BRA    3378
339C:  MOVLW  0D
339E:  MOVWF  x9F
33A0:  RCALL  3172
....................       valor=leeradc(LDR_D); 
33A2:  CLRF   x9D
*
33C4:  MOVFF  01,8E
....................       lectura=valor; 
33C8:  CLRF   x8D
33CA:  MOVFF  8E,8C
....................       lectura=lectura/22; 
33CE:  MOVFF  8D,9E
33D2:  MOVFF  8C,9D
33D6:  CLRF   xA0
33D8:  MOVLW  16
33DA:  MOVWF  x9F
33DC:  RCALL  31FE
33DE:  MOVFF  02,8D
33E2:  MOVFF  01,8C
....................       for (j=0; j<12; j++) if (j<=lectura) { lec[j]=219; } else {lec[j]='-';} 
33E6:  CLRF   x8F
33E8:  MOVF   x8F,W
33EA:  SUBLW  0B
33EC:  BNC   3422
33EE:  MOVF   x8D,F
33F0:  BNZ   33F8
33F2:  MOVF   x8F,W
33F4:  SUBWF  x8C,W
33F6:  BNC   340C
33F8:  CLRF   03
33FA:  MOVF   x8F,W
33FC:  ADDLW  90
33FE:  MOVWF  FE9
3400:  MOVLW  00
3402:  ADDWFC 03,W
3404:  MOVWF  FEA
3406:  MOVLW  DB
3408:  MOVWF  FEF
340A:  BRA    341E
340C:  CLRF   03
340E:  MOVF   x8F,W
3410:  ADDLW  90
3412:  MOVWF  FE9
3414:  MOVLW  00
3416:  ADDWFC 03,W
3418:  MOVWF  FEA
341A:  MOVLW  2D
341C:  MOVWF  FEF
341E:  INCF   x8F,F
3420:  BRA    33E8
....................       lec[12]='\0'; 
3422:  CLRF   x9C
....................       printf (lcd_putc, "%03u|%s\r", valor, lec); 
3424:  MOVFF  8E,9D
3428:  MOVLW  03
342A:  MOVWF  x9E
342C:  RCALL  3268
342E:  MOVLW  7C
3430:  MOVWF  x9F
3432:  RCALL  3172
3434:  CLRF   FEA
3436:  MOVLW  90
3438:  MOVWF  FE9
343A:  MOVLW  00
343C:  IORWF  FEF,W
343E:  BZ    345E
3440:  MOVFF  FEA,9E
3444:  MOVFF  FE9,9D
3448:  MOVFF  FEF,9F
344C:  RCALL  3172
344E:  MOVFF  9E,FEA
3452:  MOVFF  9D,FE9
3456:  INCF   FE9,F
3458:  BTFSC  FD8.2
345A:  INCF   FEA,F
345C:  BRA    343A
345E:  MOVLW  0D
3460:  MOVWF  x9F
3462:  RCALL  3172
....................       delay_ms(40); 
3464:  MOVLW  28
3466:  MOVWF  xA0
3468:  CALL   2B8E
....................    } 
346C:  BRA    32D0
.................... } 
346E:  GOTO   39FE (RETURN)
....................  
.................... int cny_a_lcd() 
.................... { 
....................    long lectura; 
....................    int valor; 
....................    int j, lec[13]; 
....................    ldr_configurar(); 
3472:  RCALL  31B6
....................    while (input(PULSADOR)!=1) 
....................    { 
3474:  BSF    F92.4
3476:  BTFSC  F80.4
3478:  BRA    3614
....................       lcd_gotoxy(1,1); 
347A:  MOVLW  01
347C:  MOVWF  xA0
347E:  MOVWF  xA1
3480:  RCALL  3150
....................       valor=leeradc(CNY_I); 
3482:  MOVLW  02
3484:  MOVWF  x9D
*
34A6:  MOVFF  01,8E
....................       lectura=valor; 
34AA:  CLRF   x8D
34AC:  MOVFF  8E,8C
....................       lectura=lectura/22; 
34B0:  MOVFF  8D,9E
34B4:  MOVFF  8C,9D
34B8:  CLRF   xA0
34BA:  MOVLW  16
34BC:  MOVWF  x9F
34BE:  RCALL  31FE
34C0:  MOVFF  02,8D
34C4:  MOVFF  01,8C
....................       for (j=0; j<12; j++) if (j<=lectura) { lec[j]=219; } else {lec[j]='-';} 
34C8:  CLRF   x8F
34CA:  MOVF   x8F,W
34CC:  SUBLW  0B
34CE:  BNC   3504
34D0:  MOVF   x8D,F
34D2:  BNZ   34DA
34D4:  MOVF   x8F,W
34D6:  SUBWF  x8C,W
34D8:  BNC   34EE
34DA:  CLRF   03
34DC:  MOVF   x8F,W
34DE:  ADDLW  90
34E0:  MOVWF  FE9
34E2:  MOVLW  00
34E4:  ADDWFC 03,W
34E6:  MOVWF  FEA
34E8:  MOVLW  DB
34EA:  MOVWF  FEF
34EC:  BRA    3500
34EE:  CLRF   03
34F0:  MOVF   x8F,W
34F2:  ADDLW  90
34F4:  MOVWF  FE9
34F6:  MOVLW  00
34F8:  ADDWFC 03,W
34FA:  MOVWF  FEA
34FC:  MOVLW  2D
34FE:  MOVWF  FEF
3500:  INCF   x8F,F
3502:  BRA    34CA
....................       lec[12]='\0'; 
3504:  CLRF   x9C
....................       printf (lcd_putc, "%03u|%s\r", valor, lec); 
3506:  MOVFF  8E,9D
350A:  MOVLW  03
350C:  MOVWF  x9E
350E:  RCALL  3268
3510:  MOVLW  7C
3512:  MOVWF  x9F
3514:  RCALL  3172
3516:  CLRF   FEA
3518:  MOVLW  90
351A:  MOVWF  FE9
351C:  MOVLW  00
351E:  IORWF  FEF,W
3520:  BZ    3540
3522:  MOVFF  FEA,9E
3526:  MOVFF  FE9,9D
352A:  MOVFF  FEF,9F
352E:  RCALL  3172
3530:  MOVFF  9E,FEA
3534:  MOVFF  9D,FE9
3538:  INCF   FE9,F
353A:  BTFSC  FD8.2
353C:  INCF   FEA,F
353E:  BRA    351C
3540:  MOVLW  0D
3542:  MOVWF  x9F
3544:  RCALL  3172
....................       valor=leeradc(CNY_D); 
3546:  MOVLW  03
3548:  MOVWF  x9D
*
356A:  MOVFF  01,8E
....................       lectura=valor; 
356E:  CLRF   x8D
3570:  MOVFF  8E,8C
....................       lectura=lectura/22; 
3574:  MOVFF  8D,9E
3578:  MOVFF  8C,9D
357C:  CLRF   xA0
357E:  MOVLW  16
3580:  MOVWF  x9F
3582:  RCALL  31FE
3584:  MOVFF  02,8D
3588:  MOVFF  01,8C
....................       for (j=0; j<12; j++) if (j<=lectura) { lec[j]=219; } else {lec[j]='-';} 
358C:  CLRF   x8F
358E:  MOVF   x8F,W
3590:  SUBLW  0B
3592:  BNC   35C8
3594:  MOVF   x8D,F
3596:  BNZ   359E
3598:  MOVF   x8F,W
359A:  SUBWF  x8C,W
359C:  BNC   35B2
359E:  CLRF   03
35A0:  MOVF   x8F,W
35A2:  ADDLW  90
35A4:  MOVWF  FE9
35A6:  MOVLW  00
35A8:  ADDWFC 03,W
35AA:  MOVWF  FEA
35AC:  MOVLW  DB
35AE:  MOVWF  FEF
35B0:  BRA    35C4
35B2:  CLRF   03
35B4:  MOVF   x8F,W
35B6:  ADDLW  90
35B8:  MOVWF  FE9
35BA:  MOVLW  00
35BC:  ADDWFC 03,W
35BE:  MOVWF  FEA
35C0:  MOVLW  2D
35C2:  MOVWF  FEF
35C4:  INCF   x8F,F
35C6:  BRA    358E
....................       lec[12]='\0'; 
35C8:  CLRF   x9C
....................       printf (lcd_putc, "%03u|%s\r", valor, lec); 
35CA:  MOVFF  8E,9D
35CE:  MOVLW  03
35D0:  MOVWF  x9E
35D2:  RCALL  3268
35D4:  MOVLW  7C
35D6:  MOVWF  x9F
35D8:  RCALL  3172
35DA:  CLRF   FEA
35DC:  MOVLW  90
35DE:  MOVWF  FE9
35E0:  MOVLW  00
35E2:  IORWF  FEF,W
35E4:  BZ    3604
35E6:  MOVFF  FEA,9E
35EA:  MOVFF  FE9,9D
35EE:  MOVFF  FEF,9F
35F2:  RCALL  3172
35F4:  MOVFF  9E,FEA
35F8:  MOVFF  9D,FE9
35FC:  INCF   FE9,F
35FE:  BTFSC  FD8.2
3600:  INCF   FEA,F
3602:  BRA    35E0
3604:  MOVLW  0D
3606:  MOVWF  x9F
3608:  RCALL  3172
....................       delay_ms(40); 
360A:  MOVLW  28
360C:  MOVWF  xA0
360E:  CALL   2B8E
....................    } 
3612:  BRA    3474
.................... } 
3614:  GOTO   3A7A (RETURN)
....................  
....................  
.................... //Rutina principal 
.................... void main() 
.................... { 
3618:  CLRF   FF8
361A:  BCF    FD0.7
361C:  BSF    0D.7
361E:  CLRF   FEA
3620:  CLRF   FE9
3622:  BSF    FB8.3
3624:  MOVLW  E1
3626:  MOVWF  FAF
3628:  MOVLW  04
362A:  MOVWF  FB0
362C:  MOVLW  A6
362E:  MOVWF  FAC
3630:  MOVLW  90
3632:  MOVWF  FAB
3634:  MOVF   FC1,W
3636:  ANDLW  C0
3638:  IORLW  0F
363A:  MOVWF  FC1
363C:  MOVLW  07
363E:  MOVWF  FB4
3640:  CLRF   1F
3642:  CLRF   21
3644:  MOVLW  04
3646:  MOVWF  22
3648:  MOVLW  0E
364A:  MOVWF  23
364C:  CLRF   27
364E:  CLRF   x7C
3650:  CLRF   x81
3652:  CLRF   x82
3654:  CLRF   x83
3656:  CLRF   x84
3658:  CLRF   x85
365A:  CLRF   x86
365C:  CLRF   x87
365E:  CLRF   x88
....................    int i, d, j; 
....................    aure_configurar(); 
3660:  GOTO   2BB6
....................    leds_configurar(); 
3664:  GOTO   2D2C
....................    lcd_configurar(); 
3668:  BRA    2E84
....................    while(1) 
....................    { 
....................      // Si usamos el USB 
....................      usb_task(); 
366A:  BRA    2EB2
....................      // Comprobamos si tenemos algún caracter en el buffer serie/usb, si lo 
....................      // tenemos llamamos a aure_usb_serie_int() que nos lo guardará en keypress 
....................      if (usb_cdc_kbhit()) 
366C:  BTFSS  x7D.0
366E:  BRA    3678
....................      { 
....................          aure_usb_serie_int(); 
3670:  BRA    2F16
....................          if (keypress!=0x00) aure_serie(); 
3672:  MOVF   x82,F
3674:  BZ    3678
3676:  BRA    2FFE
....................      } 
....................      if (enviar_ldr==1) 
3678:  DECFSZ x84,W
367A:  BRA    370A
....................      { 
....................          i=leeradc(LDR_I); 
367C:  MOVLW  01
367E:  MOVWF  x9D
*
36A0:  MOVFF  01,89
....................          d=leeradc(LDR_D); 
36A4:  CLRF   x9D
*
36C6:  MOVFF  01,8A
....................          printf (usb_cdc_putc, "<SI:%c><SD:%c>", i, d); 
36CA:  CLRF   x8C
36CC:  MOVF   x8C,W
36CE:  CALL   1CB4
36D2:  INCF   x8C,F
36D4:  MOVWF  00
36D6:  MOVWF  x90
36D8:  RCALL  2FDC
36DA:  MOVLW  04
36DC:  SUBWF  x8C,W
36DE:  BNZ   36CC
36E0:  MOVFF  89,90
36E4:  RCALL  2FDC
36E6:  MOVLW  06
36E8:  MOVWF  x8D
36EA:  MOVF   x8D,W
36EC:  CALL   1CB4
36F0:  INCF   x8D,F
36F2:  MOVWF  00
36F4:  MOVWF  x90
36F6:  RCALL  2FDC
36F8:  MOVLW  0B
36FA:  SUBWF  x8D,W
36FC:  BNZ   36EA
36FE:  MOVFF  8A,90
3702:  RCALL  2FDC
3704:  MOVLW  3E
3706:  MOVWF  x90
3708:  RCALL  2FDC
....................      } 
....................      if (enviar_cny==1) 
370A:  DECFSZ x85,W
370C:  BRA    379E
....................      { 
....................          i=leeradc(CNY_I); 
370E:  MOVLW  02
3710:  MOVWF  x9D
*
3732:  MOVFF  01,89
....................          d=leeradc(CNY_D); 
3736:  MOVLW  03
3738:  MOVWF  x9D
*
375A:  MOVFF  01,8A
....................          printf (usb_cdc_putc, "<CI:%c><CD:%c>", i, d); 
375E:  CLRF   x8C
3760:  MOVF   x8C,W
3762:  CALL   1CDE
3766:  INCF   x8C,F
3768:  MOVWF  00
376A:  MOVWF  x90
376C:  RCALL  2FDC
376E:  MOVLW  04
3770:  SUBWF  x8C,W
3772:  BNZ   3760
3774:  MOVFF  89,90
3778:  RCALL  2FDC
377A:  MOVLW  06
377C:  MOVWF  x8D
377E:  MOVF   x8D,W
3780:  CALL   1CDE
3784:  INCF   x8D,F
3786:  MOVWF  00
3788:  MOVWF  x90
378A:  RCALL  2FDC
378C:  MOVLW  0B
378E:  SUBWF  x8D,W
3790:  BNZ   377E
3792:  MOVFF  8A,90
3796:  RCALL  2FDC
3798:  MOVLW  3E
379A:  MOVWF  x90
379C:  RCALL  2FDC
....................      } 
....................      if (enviar_pulsadores==1) 
379E:  DECFSZ x86,W
37A0:  BRA    3846
....................      { 
....................          if (input(PULSADOR)) {   printf (usb_cdc_putc,"<PU:H>"); } else { printf (usb_cdc_putc,"<PU:L>");} 
37A2:  BSF    F92.4
37A4:  BTFSS  F80.4
37A6:  BRA    37C0
37A8:  CLRF   x8C
37AA:  MOVF   x8C,W
37AC:  CALL   1D08
37B0:  INCF   x8C,F
37B2:  MOVWF  00
37B4:  MOVWF  x90
37B6:  RCALL  2FDC
37B8:  MOVLW  06
37BA:  SUBWF  x8C,W
37BC:  BNZ   37AA
37BE:  BRA    37D6
37C0:  CLRF   x8C
37C2:  MOVF   x8C,W
37C4:  CALL   1D2A
37C8:  INCF   x8C,F
37CA:  MOVWF  00
37CC:  MOVWF  x90
37CE:  RCALL  2FDC
37D0:  MOVLW  06
37D2:  SUBWF  x8C,W
37D4:  BNZ   37C2
....................          if (input(BUMPER_I)) {   printf (usb_cdc_putc,"<BI:H>"); } else { printf (usb_cdc_putc,"<BI:L>");} 
37D6:  BSF    F92.2
37D8:  BTFSS  F80.2
37DA:  BRA    37F6
37DC:  CLRF   x8C
37DE:  MOVF   x8C,W
37E0:  CALL   1D4C
37E4:  INCF   x8C,F
37E6:  MOVWF  00
37E8:  MOVWF  x90
37EA:  CALL   2FDC
37EE:  MOVLW  06
37F0:  SUBWF  x8C,W
37F2:  BNZ   37DE
37F4:  BRA    380E
37F6:  CLRF   x8C
37F8:  MOVF   x8C,W
37FA:  CALL   1D6E
37FE:  INCF   x8C,F
3800:  MOVWF  00
3802:  MOVWF  x90
3804:  CALL   2FDC
3808:  MOVLW  06
380A:  SUBWF  x8C,W
380C:  BNZ   37F8
....................          if (input(BUMPER_D)) {   printf (usb_cdc_putc,"<BD:H>"); } else { printf (usb_cdc_putc,"<BD:L>");} 
380E:  BSF    F92.3
3810:  BTFSS  F80.3
3812:  BRA    382E
3814:  CLRF   x8C
3816:  MOVF   x8C,W
3818:  CALL   1D90
381C:  INCF   x8C,F
381E:  MOVWF  00
3820:  MOVWF  x90
3822:  CALL   2FDC
3826:  MOVLW  06
3828:  SUBWF  x8C,W
382A:  BNZ   3816
382C:  BRA    3846
382E:  CLRF   x8C
3830:  MOVF   x8C,W
3832:  CALL   1DB2
3836:  INCF   x8C,F
3838:  MOVWF  00
383A:  MOVWF  x90
383C:  CALL   2FDC
3840:  MOVLW  06
3842:  SUBWF  x8C,W
3844:  BNZ   3830
....................      } 
....................      if (enviar_analog==1) 
3846:  DECFSZ x87,W
3848:  BRA    38CE
....................      { 
....................         setup_adc_ports( ALL_ANALOG|VSS_VDD ); 
384A:  MOVF   FC1,W
384C:  ANDLW  C0
384E:  MOVWF  FC1
....................         setup_adc(ADC_CLOCK_INTERNAL); 
3850:  BSF    FC0.0
3852:  BSF    FC0.1
3854:  BSF    FC0.2
3856:  BCF    FC0.7
3858:  BSF    FC2.0
....................          for (j=0; j<2; j++) 
385A:  CLRF   x8B
385C:  MOVF   x8B,W
385E:  SUBLW  01
3860:  BNC   38C4
....................          { 
....................             printf(usb_cdc_putc, "<A%c:%c>", j+'0', leeradc(j)); 
3862:  MOVLW  30
3864:  ADDWF  x8B,W
3866:  MOVWF  x8C
3868:  MOVFF  8B,9D
*
388C:  MOVFF  01,8D
3890:  MOVLW  3C
3892:  MOVWF  x90
3894:  CALL   2FDC
3898:  MOVLW  41
389A:  MOVWF  x90
389C:  CALL   2FDC
38A0:  MOVFF  8C,90
38A4:  CALL   2FDC
38A8:  MOVLW  3A
38AA:  MOVWF  x90
38AC:  CALL   2FDC
38B0:  MOVFF  8D,90
38B4:  CALL   2FDC
38B8:  MOVLW  3E
38BA:  MOVWF  x90
38BC:  CALL   2FDC
....................          } 
38C0:  INCF   x8B,F
38C2:  BRA    385C
....................          setup_adc_ports(NO_ANALOGS); 
38C4:  MOVF   FC1,W
38C6:  ANDLW  C0
38C8:  IORLW  0F
38CA:  MOVWF  FC1
....................          setup_adc(ADC_OFF); 
38CC:  BCF    FC2.0
....................      } 
....................      if (enviar_dig==1) 
38CE:  DECFSZ x88,W
38D0:  BRA    394A
....................      { 
....................       for (j=0; j<2; j++) 
38D2:  CLRF   x8B
38D4:  MOVF   x8B,W
38D6:  SUBLW  01
38D8:  BNC   394A
....................       { 
....................          printf(usb_cdc_putc, "<A%c:%c>", j+'0', 50+input(PIN_A0+j)*150); 
38DA:  MOVLW  30
38DC:  ADDWF  x8B,W
38DE:  MOVWF  x8C
38E0:  MOVFF  8B,8D
38E4:  MOVLW  7C
38E6:  MOVFF  8B,8F
38EA:  MOVLW  01
38EC:  MOVWF  x90
38EE:  MOVLW  0F
38F0:  MOVWF  x92
38F2:  MOVLW  92
38F4:  MOVWF  x91
38F6:  GOTO   30E0
38FA:  MOVFF  8D,8F
38FE:  MOVLW  0F
3900:  MOVWF  x91
3902:  MOVLW  80
3904:  MOVWF  x90
3906:  BRA    3120
3908:  MOVLW  00
390A:  BTFSC  01.0
390C:  MOVLW  01
390E:  MULLW  96
3910:  MOVF   FF3,W
3912:  ADDLW  32
3914:  MOVWF  x8F
3916:  MOVLW  3C
3918:  MOVWF  x90
391A:  CALL   2FDC
391E:  MOVLW  41
3920:  MOVWF  x90
3922:  CALL   2FDC
3926:  MOVFF  8C,90
392A:  CALL   2FDC
392E:  MOVLW  3A
3930:  MOVWF  x90
3932:  CALL   2FDC
3936:  MOVFF  8F,90
393A:  CALL   2FDC
393E:  MOVLW  3E
3940:  MOVWF  x90
3942:  CALL   2FDC
....................       } 
3946:  INCF   x8B,F
3948:  BRA    38D4
....................      } 
....................      if (prueba_pilas==1) { 
394A:  DECFSZ x83,W
394C:  BRA    3966
....................       motores_palante(); 
394E:  CALL   2F3A
....................       delay_ms(250); 
3952:  MOVLW  FA
3954:  MOVWF  xA0
3956:  CALL   2B8E
....................       motores_parar(); 
395A:  CALL   2F88
....................       delay_ms(250); 
395E:  MOVLW  FA
3960:  MOVWF  xA0
3962:  CALL   2B8E
....................      } 
....................      if (input(PULSADOR)==1) 
3966:  BSF    F92.4
3968:  BTFSS  F80.4
396A:  BRA    3B72
....................      { 
....................          while(input(PULSADOR)==1) {} 
396C:  BSF    F92.4
396E:  BTFSS  F80.4
3970:  BRA    3974
3972:  BRA    396C
....................          lcd_gotoxy(1,1); 
3974:  MOVLW  01
3976:  MOVWF  xA0
3978:  MOVWF  xA1
397A:  CALL   3150
....................          printf(lcd_putc, "______MENU______\r"); 
397E:  CLRF   x8C
3980:  MOVF   x8C,W
3982:  CALL   1DD4
3986:  INCF   x8C,F
3988:  MOVWF  00
398A:  MOVWF  x9F
398C:  CALL   3172
3990:  MOVLW  11
3992:  SUBWF  x8C,W
3994:  BNZ   3980
....................          printf(lcd_putc, " ldr a lcd      "); 
3996:  CLRF   x8C
3998:  MOVF   x8C,W
399A:  CALL   1E00
399E:  INCF   x8C,F
39A0:  MOVWF  00
39A2:  MOVWF  x9F
39A4:  CALL   3172
39A8:  MOVLW  10
39AA:  SUBWF  x8C,W
39AC:  BNZ   3998
....................          for (j=0; j<10; j++) { delay_ms(100); if (input(PULSADOR)==1) j=10;} 
39AE:  CLRF   x8B
39B0:  MOVF   x8B,W
39B2:  SUBLW  09
39B4:  BNC   39CC
39B6:  MOVLW  64
39B8:  MOVWF  xA0
39BA:  CALL   2B8E
39BE:  BSF    F92.4
39C0:  BTFSS  F80.4
39C2:  BRA    39C8
39C4:  MOVLW  0A
39C6:  MOVWF  x8B
39C8:  INCF   x8B,F
39CA:  BRA    39B0
....................          if (input(PULSADOR)==1) 
39CC:  BSF    F92.4
39CE:  BTFSS  F80.4
39D0:  BRA    39FE
....................          { 
....................             lcd_gotoxy(1,1); 
39D2:  MOVLW  01
39D4:  MOVWF  xA0
39D6:  MOVWF  xA1
39D8:  CALL   3150
....................             printf (lcd_putc, "OK LDR A LCD    "); 
39DC:  CLRF   x8C
39DE:  MOVF   x8C,W
39E0:  CALL   1E2C
39E4:  INCF   x8C,F
39E6:  MOVWF  00
39E8:  MOVWF  x9F
39EA:  CALL   3172
39EE:  MOVLW  10
39F0:  SUBWF  x8C,W
39F2:  BNZ   39DE
....................             while(input(PULSADOR)==1) {} 
39F4:  BSF    F92.4
39F6:  BTFSS  F80.4
39F8:  BRA    39FC
39FA:  BRA    39F4
....................             ldr_a_lcd(); 
39FC:  BRA    32CE
....................          } 
....................          lcd_gotoxy(1,1); 
39FE:  MOVLW  01
3A00:  MOVWF  xA0
3A02:  MOVWF  xA1
3A04:  CALL   3150
....................          printf(lcd_putc, "______MENU______\r"); 
3A08:  CLRF   x8C
3A0A:  MOVF   x8C,W
3A0C:  CALL   1DD4
3A10:  INCF   x8C,F
3A12:  MOVWF  00
3A14:  MOVWF  x9F
3A16:  CALL   3172
3A1A:  MOVLW  11
3A1C:  SUBWF  x8C,W
3A1E:  BNZ   3A0A
....................          printf(lcd_putc, " cny a lcd      "); 
3A20:  CLRF   x8C
3A22:  MOVF   x8C,W
3A24:  CALL   1E58
3A28:  INCF   x8C,F
3A2A:  MOVWF  00
3A2C:  MOVWF  x9F
3A2E:  CALL   3172
3A32:  MOVLW  10
3A34:  SUBWF  x8C,W
3A36:  BNZ   3A22
....................          delay_ms(1000); 
3A38:  MOVLW  04
3A3A:  MOVWF  x8C
3A3C:  MOVLW  FA
3A3E:  MOVWF  xA0
3A40:  CALL   2B8E
3A44:  DECFSZ x8C,F
3A46:  BRA    3A3C
....................          if (input(PULSADOR)==1) 
3A48:  BSF    F92.4
3A4A:  BTFSS  F80.4
3A4C:  BRA    3A7A
....................          { 
....................                lcd_gotoxy(1,1); 
3A4E:  MOVLW  01
3A50:  MOVWF  xA0
3A52:  MOVWF  xA1
3A54:  CALL   3150
....................                printf (lcd_putc, "OK CNY A LCD    "); 
3A58:  CLRF   x8C
3A5A:  MOVF   x8C,W
3A5C:  CALL   1E84
3A60:  INCF   x8C,F
3A62:  MOVWF  00
3A64:  MOVWF  x9F
3A66:  CALL   3172
3A6A:  MOVLW  10
3A6C:  SUBWF  x8C,W
3A6E:  BNZ   3A5A
....................                while(input(PULSADOR)==1) {} 
3A70:  BSF    F92.4
3A72:  BTFSS  F80.4
3A74:  BRA    3A78
3A76:  BRA    3A70
....................                cny_a_lcd(); 
3A78:  BRA    3472
....................          } 
....................          lcd_gotoxy(1,1); 
3A7A:  MOVLW  01
3A7C:  MOVWF  xA0
3A7E:  MOVWF  xA1
3A80:  CALL   3150
....................          printf(lcd_putc, "______MENU______\r"); 
3A84:  CLRF   x8C
3A86:  MOVF   x8C,W
3A88:  CALL   1DD4
3A8C:  INCF   x8C,F
3A8E:  MOVWF  00
3A90:  MOVWF  x9F
3A92:  CALL   3172
3A96:  MOVLW  11
3A98:  SUBWF  x8C,W
3A9A:  BNZ   3A86
....................          printf(lcd_putc, " navegacion auto"); 
3A9C:  CLRF   x8C
3A9E:  MOVF   x8C,W
3AA0:  CALL   1EB0
3AA4:  INCF   x8C,F
3AA6:  MOVWF  00
3AA8:  MOVWF  x9F
3AAA:  CALL   3172
3AAE:  MOVLW  10
3AB0:  SUBWF  x8C,W
3AB2:  BNZ   3A9E
....................          delay_ms(1000); 
3AB4:  MOVLW  04
3AB6:  MOVWF  x8C
3AB8:  MOVLW  FA
3ABA:  MOVWF  xA0
3ABC:  CALL   2B8E
3AC0:  DECFSZ x8C,F
3AC2:  BRA    3AB8
....................          if (input(PULSADOR)==1) 
3AC4:  BSF    F92.4
3AC6:  BTFSS  F80.4
3AC8:  BRA    3AF4
....................          { 
....................                lcd_gotoxy(1,1); 
3ACA:  MOVLW  01
3ACC:  MOVWF  xA0
3ACE:  MOVWF  xA1
3AD0:  CALL   3150
....................                printf (lcd_putc, "OK NAVEGACION   "); 
3AD4:  CLRF   x8C
3AD6:  MOVF   x8C,W
3AD8:  CALL   1EDC
3ADC:  INCF   x8C,F
3ADE:  MOVWF  00
3AE0:  MOVWF  x9F
3AE2:  CALL   3172
3AE6:  MOVLW  10
3AE8:  SUBWF  x8C,W
3AEA:  BNZ   3AD6
....................                while(input(PULSADOR)==1) {} 
3AEC:  BSF    F92.4
3AEE:  BTFSS  F80.4
3AF0:  BRA    3AF4
3AF2:  BRA    3AEC
....................                //navegacion_bumpers(); 
....................          } 
....................          lcd_gotoxy(1,1); 
3AF4:  MOVLW  01
3AF6:  MOVWF  xA0
3AF8:  MOVWF  xA1
3AFA:  CALL   3150
....................          printf(lcd_putc, "______MENU______\r"); 
3AFE:  CLRF   x8C
3B00:  MOVF   x8C,W
3B02:  CALL   1DD4
3B06:  INCF   x8C,F
3B08:  MOVWF  00
3B0A:  MOVWF  x9F
3B0C:  CALL   3172
3B10:  MOVLW  11
3B12:  SUBWF  x8C,W
3B14:  BNZ   3B00
....................          printf(lcd_putc, " buscaluz       "); 
3B16:  CLRF   x8C
3B18:  MOVF   x8C,W
3B1A:  CALL   1F08
3B1E:  INCF   x8C,F
3B20:  MOVWF  00
3B22:  MOVWF  x9F
3B24:  CALL   3172
3B28:  MOVLW  10
3B2A:  SUBWF  x8C,W
3B2C:  BNZ   3B18
....................          delay_ms(1000); 
3B2E:  MOVLW  04
3B30:  MOVWF  x8C
3B32:  MOVLW  FA
3B34:  MOVWF  xA0
3B36:  CALL   2B8E
3B3A:  DECFSZ x8C,F
3B3C:  BRA    3B32
....................          if (input(PULSADOR)==1) 
3B3E:  BSF    F92.4
3B40:  BTFSS  F80.4
3B42:  BRA    3B6E
....................          { 
....................                lcd_gotoxy(1,1); 
3B44:  MOVLW  01
3B46:  MOVWF  xA0
3B48:  MOVWF  xA1
3B4A:  CALL   3150
....................                printf (lcd_putc, "OK BUSCALUZ     "); 
3B4E:  CLRF   x8C
3B50:  MOVF   x8C,W
3B52:  CALL   1F34
3B56:  INCF   x8C,F
3B58:  MOVWF  00
3B5A:  MOVWF  x9F
3B5C:  CALL   3172
3B60:  MOVLW  10
3B62:  SUBWF  x8C,W
3B64:  BNZ   3B50
....................                while(input(PULSADOR)==1) {} 
3B66:  BSF    F92.4
3B68:  BTFSS  F80.4
3B6A:  BRA    3B6E
3B6C:  BRA    3B66
....................                //navegacion_luz(); 
....................  
....................          } 
....................          lcd_init(); 
3B6E:  CALL   2E16
....................  
....................       } 
....................    //delay_ms(5); 
....................    } 
3B72:  BRA    366A
.................... } 
3B74:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 8300   PBADEN CCP2C1 MCLR NOLPT1OSC RESERVED
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT RESERVED
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
