CCS PCH C Compiler, Version 4.068, 64122               07-ago-11 13:27

               Filename: C:\Documents and Settings\Administrador\Mis documentos\Dropbox\Aurebot_p\aplicacion_reloj\main.lst

               ROM used: 13980 bytes (43%)
                         Largest free fragment is 12640
               RAM used: 1221 (60%) at main() level
                         1276 (62%) worst case
               Stack:    15 worst case (8 in main + 7 for interrupts)

*
1800:  GOTO   4B58
*
1808:  MOVWF  05
180A:  MOVFF  FD8,06
180E:  MOVFF  FE0,07
1812:  MOVLB  0
1814:  MOVFF  FE9,0D
1818:  MOVFF  FEA,08
181C:  MOVFF  FE1,09
1820:  MOVFF  FE2,0A
1824:  MOVFF  FD9,0B
1828:  MOVFF  FDA,0C
182C:  MOVFF  FF3,14
1830:  MOVFF  FF4,15
1834:  MOVFF  FFA,16
1838:  MOVFF  00,0F
183C:  MOVFF  01,10
1840:  MOVFF  02,11
1844:  MOVFF  03,12
1848:  MOVFF  04,13
184C:  BTFSS  FF2.5
184E:  GOTO   1858
1852:  BTFSC  FF2.2
1854:  GOTO   2C68
1858:  BTFSS  F9D.1
185A:  GOTO   1864
185E:  BTFSC  F9E.1
1860:  GOTO   2C1A
1864:  BTFSS  F9D.5
1866:  GOTO   1870
186A:  BTFSC  F9E.5
186C:  GOTO   2BF2
1870:  BTFSS  FA0.5
1872:  GOTO   187C
1876:  BTFSC  FA1.5
1878:  GOTO   2B88
187C:  MOVFF  0F,00
1880:  MOVFF  10,01
1884:  MOVFF  11,02
1888:  MOVFF  12,03
188C:  MOVFF  13,04
1890:  BSF    0E.7
1892:  MOVFF  0D,FE9
1896:  MOVFF  08,FEA
189A:  MOVFF  09,FE1
189E:  MOVFF  0A,FE2
18A2:  MOVFF  0B,FD9
18A6:  MOVFF  0C,FDA
18AA:  MOVFF  14,FF3
18AE:  MOVFF  15,FF4
18B2:  MOVFF  16,FFA
18B6:  MOVF   05,W
18B8:  MOVFF  07,FE0
18BC:  MOVFF  06,FD8
18C0:  RETFIE 0
.................... /* 
....................           _____                    _____                    _____                    _____           
....................          /\    \                  /\    \                  /\    \                  /\    \          
....................         /::\    \                /::\____\                /::\    \                /::\    \         
....................        /::::\    \              /:::/    /               /::::\    \              /::::\    \        
....................       /::::::\    \            /:::/    /               /::::::\    \            /::::::\    \       
....................      /:::/\:::\    \          /:::/    /               /:::/\:::\    \          /:::/\:::\    \      
....................     /:::/__\:::\    \        /:::/    /               /:::/__\:::\    \        /:::/__\:::\    \     
....................    /::::\   \:::\    \      /:::/    /               /::::\   \:::\    \      /::::\   \:::\    \    
....................   /::::::\   \:::\    \    /:::/    /      _____    /::::::\   \:::\    \    /::::::\   \:::\    \   
....................  /:::/\:::\   \:::\    \  /:::/____/      /\    \  /:::/\:::\   \:::\____\  /:::/\:::\   \:::\    \  
.................... /:::/  \:::\   \:::\____\|:::|    /      /::\____\/:::/  \:::\   \:::|    |/:::/__\:::\   \:::\____\ 
.................... \::/    \:::\  /:::/    /|:::|____\     /:::/    /\::/   |::::\  /:::|____|\:::\   \:::\   \::/    / 
....................  \/____/ \:::\/:::/    /  \:::\    \   /:::/    /  \/____|:::::\/:::/    /  \:::\   \:::\   \/____/  
....................           \::::::/    /    \:::\    \ /:::/    /         |:::::::::/    /    \:::\   \:::\    \      
....................            \::::/    /      \:::\    /:::/    /          |::|\::::/    /      \:::\   \:::\____\     
....................            /:::/    /        \:::\__/:::/    /           |::| \::/____/        \:::\   \::/    /     
....................           /:::/    /          \::::::::/    /            |::|  ~|               \:::\   \/____/      
....................          /:::/    /            \::::::/    /             |::|   |                \:::\    \          
....................         /:::/    /              \::::/    /              \::|   |                 \:::\____\         
....................         \::/    /                \::/____/                \:|   |                  \::/    /         
....................          \/____/                  ~~                       \|___|                   \/____/     
....................           
....................    Programa de ejemplo para la AureBoard 
....................    Requerido: Aureboard Versión>2.0 
....................  
....................    - El programa configura el puerto Serie por USB. 
....................       -Al cargar un programa hay que cerrar y volver a abrir el siow.exe 
....................    - Cada programa deberá ir en su carpeta al mismo nivel de la carpeta lib 
....................     
....................     
....................     
....................     
....................    A.U.R.E. 2010 
.................... */ 
....................  
.................... #include <../lib/aurebot.h> 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... //Configuramos el pic para que trabaje a 48Mhz con un cristal de 4 Mhz. 
.................... #fuses XTPLL,MCLR,NOWDT,NOPROTECT,NOLVP,NODEBUG, VREGEN  
.................... #fuses IESO,BROWNOUT,STVREN,NOWRT,FCMEN,USBDIV,PLL1,CPUDIV1 
.................... #device adc=8 
.................... #use delay(clock=48000000) 
*
2C72:  CLRF   FEA
2C74:  MOVLW  C9
2C76:  MOVWF  FE9
2C78:  MOVF   FEF,W
2C7A:  BZ    2C98
2C7C:  MOVLW  0F
2C7E:  MOVWF  01
2C80:  CLRF   00
2C82:  DECFSZ 00,F
2C84:  BRA    2C82
2C86:  DECFSZ 01,F
2C88:  BRA    2C80
2C8A:  MOVLW  8F
2C8C:  MOVWF  00
2C8E:  DECFSZ 00,F
2C90:  BRA    2C8E
2C92:  NOP   
2C94:  DECFSZ FEF,F
2C96:  BRA    2C7C
2C98:  RETLW  00
*
2E00:  MOVLW  01
2E02:  SUBWF  xCC,F
2E04:  BNC   2E1E
2E06:  CLRF   FEA
2E08:  MOVLW  CC
2E0A:  MOVWF  FE9
2E0C:  MOVF   FEF,W
2E0E:  BZ    2E1E
2E10:  MOVLW  02
2E12:  MOVWF  00
2E14:  DECFSZ 00,F
2E16:  BRA    2E14
2E18:  BRA    2E1A
2E1A:  DECFSZ FEF,F
2E1C:  BRA    2E10
2E1E:  RETLW  00
....................  
....................  
.................... // Incluimos el descriptor del cargador 
.................... #include "..\lib\bootloader\usb_bootloader.h" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                     USB_BOOTLOADER.H                              //// 
.................... ////                                                                   //// 
.................... ////  This include file must be included by any application loaded     //// 
.................... ////  by the example USB bootloader (ex_usb_bootloader                 //// 
.................... ////                                                                   //// 
.................... ////  The directives in this file relocate the reset and interrupt     //// 
.................... ////  vectors as well as reserving space for the bootloader.           //// 
.................... ////                                                                   //// 
.................... ////  For more documentation see ex_usb_bootloader.c                   //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... //how big is the bootloader? 
.................... //the bootloader will reside from address 0x0000 to this location.  the 
.................... //application will then sit at this location+1 to the end of program memory. 
.................... #define LOADER_SIZE        (0x17FF) 
....................  
.................... //the loader and application need a common flag that determines if we are in 
.................... //the bootloader or application, that way the ISR knows where to go.  this 
.................... //is the location in ram that is reserved for this flag. 
.................... #define LOC_IN_LOADER_FLAG  0x25 
....................  
.................... //// --- end configuration --- //////////////////////////////////////////// 
....................  
.................... #reserve LOC_IN_LOADER_FLAG 
....................  
.................... int8 g_InBootloader; 
.................... #locate g_InBootloader=LOC_IN_LOADER_FLAG 
....................  
.................... #define LOADER_START       (0) 
.................... #define LOADER_END         (LOADER_SIZE) 
.................... #define APPLICATION_START  (LOADER_SIZE+1) 
.................... #define APPLICATION_END    (getenv("PROGRAM_MEMORY")-1) 
.................... #define APPLICATION_ISR    (APPLICATION_START+8) 
....................  
.................... #ifdef _bootloader 
....................  /* 
....................   Provide an empty application, so if you load this .HEX file into the pic 
....................   without an application this will prevent the pic from executing unknown code. 
....................  */ 
....................  #org APPLICATION_START,APPLICATION_START+0xF 
....................  void BlankApplication(void)  
....................  { 
....................    while(TRUE); 
....................  } 
....................  
....................  //we need to prevent the loader from using application space 
....................  #if APPLICATION_END>0xFFFF 
....................    #org APPLICATION_START+0x10, 0xFFFF {} 
....................    #if APPLICATION_END>0x1FFFF 
....................       #org 0xFFFF, 0x1FFFF {} 
....................    #else 
....................       #org 0xFFFF, APPLICATION_END {} 
....................    #endif 
....................  #else 
....................    #org APPLICATION_START+0x10, APPLICATION_END {} 
....................  #endif 
.................... #endif 
....................  
.................... #ifndef _bootloader 
....................  //in the application, this moves the reset and isr vector out of the bootload 
....................  //space.  it then reserves the loader space from being used by the application. 
....................  #build(reset=APPLICATION_START, interrupt=APPLICATION_ISR) 
....................  #org 0, LOADER_END {} 
.................... #endif 
....................  
.................... // Incluimos las rutinas de gestión del usb y del "Comunications Device Class" 
.................... #include "..\lib\bootloader\usb_cdc.h" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////                            usb_cdc.h                            //// 
.................... ////                                                                 //// 
.................... //// Library for adding a virtual COM port on your PC over USB using //// 
.................... //// the standard Communication Device Class (CDC) specification.    //// 
.................... //// Including this file in your code will add all USB code,         //// 
.................... //// interrupts, descriptors and handlers required.  No other        //// 
.................... //// modifications need to be made.                                  //// 
.................... ////                                                                 //// 
.................... //// This library creates a virtual RS232 link between the PC and    //// 
.................... //// the PIC, therefore the library provided will be familiar to     //// 
.................... //// anyone with standard UART stream I/O:                           //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_kbhit() - Returns TRUE if there is one or more          //// 
.................... ////      character received and waiting in the receive buffer.      //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_getc() - Gets a character from the receive buffer.  If  //// 
.................... ////      there is no data in the receive buffer it will wait until  //// 
.................... ////      there is data in the receive buffer.  If you do not want   //// 
.................... ////      to wait in an infinit loop, use usb_cdc_kbhit() first to   //// 
.................... ////      check if there is data before calling usb_cdc_getc().      //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_putc(char c) - Puts a character into the transmit       //// 
.................... ////      buffer.  If the transmit buffer is full it will wait until //// 
.................... ////      the transmit buffer is not full before putting the char    //// 
.................... ////      into the transmit buffer.  The transmit buffer is read by  //// 
.................... ////      the PC very quickly, and therefore the buffer should only  //// 
.................... ////      be full for a few milli-seconds.  If you are concerned     //// 
.................... ////      and don't want to be stuck in a long or infinite loop,     //// 
.................... ////      use usb_cdc_putready() to see if there is space in the     //// 
.................... ////      transmit buffer before putting data into the transmit      //// 
.................... ////      buffer.                                                    //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_putready() - Returns TRUE if there is room left in the  //// 
.................... ////      transmit buffer for another character.                     //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_connected() - Returns TRUE if we received a             //// 
.................... ////      Set_Line_Coding.  On most serial terminal programs (such   //// 
.................... ////      as Hyperterminal), they will send a Set_Line_Coding        //// 
.................... ////      message when the program starts and it opens the virtual   //// 
.................... ////      COM port.  This is a simple way to determine if the PC     //// 
.................... ////      is ready to display data on a serial terminal program,     //// 
.................... ////      but is not garaunteed to work all the time or on other     //// 
.................... ////      terminal programs.                                         //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_putc_fast(char c) - Similar to usb_cdc_putc(), except   //// 
.................... ////      if the transmit buffer is full it will skip the char.      //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_line_coding - A structure used for Set_Line_Coding and  //// 
.................... ////       Get_Line_Coding.  Most of the time you can ignore this.   //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_break - If the PC has sent a break command, this will   //// 
.................... ////       hold the break time (in milli-seconds).  If the PC sends  //// 
.................... ////       a value of 0xFFFF the device is supposed to hold the      //// 
.................... ////       break until it sends a value of 0                         //// 
.................... ////                                                                 //// 
.................... //// usb_cdc_carrier - Where Set_Control_Line_State value is stored. //// 
.................... ////       Of most relevance is the field dte_present, which is the  //// 
.................... ////       DTR setting.                                              //// 
.................... ////                                                                 //// 
.................... //// The following functions are also provided, and are ports of the //// 
.................... //// I/O functions in input.c.  See input.c and the CCS manual for   //// 
.................... //// documentation:                                                  //// 
.................... ////   get_float_usb() - Read a float number from the user           //// 
.................... ////   get_long_usb() - Read a long number from the user             //// 
.................... ////   get_int_usb() - Read an integer number from the user          //// 
.................... ////   get_string_usb(char *s, int max) - Read a string from the user. //// 
.................... ////   gethex_usb() - Read a byte, in HEX, from the user             //// 
.................... ////   gethex1_usb() - Read a HEX character                          //// 
.................... ////                                                                 //// 
.................... //// This driver will load all the rest of the USB code, and a set   //// 
.................... //// of descriptors that will properly describe a CDC device for a   //// 
.................... //// virtual COM port (usb_desc_cdc.h)                               //// 
.................... ////                                                                 //// 
.................... //// An .INF file is provided (cdc_NTXP.inf) that will load the      //// 
.................... //// standard CDC drivers for a virtual COM port in Windows          //// 
.................... //// NT/2000/XP and above.  Unfortunately we do not provide an .inf  //// 
.................... //// file for Windows 98 and ME.                                     //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// VERSION HISTORY                                                 //// 
.................... ////                                                                 //// 
.................... //// October 27th, 2005: Changed the way incoming packets are        //// 
.................... ////               handled in that CDC driver will not flush         //// 
.................... ////               endpoint until user has handled all data.  This   //// 
.................... ////               will prevent overflows as the USB will NAK        //// 
.................... ////               incoming packets until it is ready to receive     //// 
.................... ////               more.                                             //// 
.................... ////            When using 18F4550 family, the RX buffer is          //// 
.................... ////               mapped directly to the endpoint buffer - this     //// 
.................... ////               saves a chunk of RAM.                             //// 
.................... ////            When using the 18F4550 family, you can increase      //// 
.................... ////               the TX and RX size over 64 bytes.                 //// 
.................... ////            No longer send 0len packets in the TBE interrupt.    //// 
.................... ////            Hopefully fixed bugs that caused random crashes      //// 
.................... ////               if you tried sending more than 64 bytes.          //// 
.................... ////                                                                 //// 
.................... //// July 6th, 2005: Global interrupts disabled when writing to TX   //// 
.................... ////                   buffer.                                       //// 
.................... ////                                                                 //// 
.................... //// July 1st, 2005: Initial Release.                                //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... //api for the user: 
.................... #define usb_cdc_kbhit() (usb_cdc_get_buffer_status.got) 
.................... #define usb_cdc_putready() (usb_cdc_put_buffer_nextin<USB_CDC_DATA_IN_SIZE) 
.................... #define usb_cdc_connected() (usb_cdc_got_set_line_coding) 
.................... void usb_cdc_putc_fast(char c); 
.................... char usb_cdc_getc(void); 
.................... void usb_cdc_putc(char c); 
....................  
.................... //input.c ported to use CDC: 
.................... float get_float_usb(); 
.................... signed long get_long_usb(); 
.................... signed int get_int_usb(); 
.................... void get_string_usb(char* s, int max); 
.................... BYTE gethex_usb(); 
.................... BYTE gethex1_usb(); 
....................  
.................... //functions automatically called by USB handler code 
.................... void usb_isr_tkn_cdc(void); 
.................... void usb_cdc_init(void); 
.................... void usb_isr_tok_out_cdc_control_dne(void); 
.................... void usb_isr_tok_in_cdc_data_dne(void); 
.................... void usb_isr_tok_out_cdc_data_dne(void); 
....................  
.................... void usb_cdc_flush_out_buffer(void); 
....................  
.................... //Tells the CCS PIC USB firmware to include HID handling code. 
.................... #DEFINE USB_HID_DEVICE  FALSE 
.................... #DEFINE USB_CDC_DEVICE  TRUE 
....................  
.................... #define USB_CDC_COMM_IN_ENDPOINT       1 
.................... #define USB_CDC_COMM_IN_SIZE           8 
.................... #define USB_EP1_TX_ENABLE  USB_ENABLE_INTERRUPT 
.................... #define USB_EP1_TX_SIZE  USB_CDC_COMM_IN_SIZE 
....................  
.................... //pic to pc endpoint config 
.................... #define USB_CDC_DATA_IN_ENDPOINT       2 
.................... #define USB_CDC_DATA_IN_SIZE           64 
.................... #define USB_EP2_TX_ENABLE  USB_ENABLE_BULK 
.................... #define USB_EP2_TX_SIZE  USB_CDC_DATA_IN_SIZE 
....................  
.................... //pc to pic endpoint config 
.................... #define USB_CDC_DATA_OUT_ENDPOINT       2 
.................... #define USB_CDC_DATA_OUT_SIZE           64 
.................... #define USB_EP2_RX_ENABLE  USB_ENABLE_BULK 
.................... #define USB_EP2_RX_SIZE  USB_CDC_DATA_OUT_SIZE 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // 
.................... // Include the CCS USB Libraries.  See the comments at the top of these 
.................... // files for more information 
.................... // 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... #ifndef __USB_PIC_PERIF__ 
.................... #define __USB_PIC_PERIF__   1 
.................... #endif 
....................  
.................... #if __USB_PIC_PERIF__ 
....................  #if defined(__PCM__) 
....................   #error CDC requires bulk mode!  PIC16C7x5 does not have bulk mode 
....................  #else 
....................   #include <pic18_usb.h>   //Microchip 18Fxx5x hardware layer for usb.c 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          pic18_usb.c                            //// 
.................... ////                                                                 //// 
.................... //// Hardware layer for CCS's USB library.  This hardware layer      //// 
.................... //// supports the USB peripheral on the PIC18 family chips.  Current //// 
.................... //// supported families are:                                         //// 
.................... ////     PIC18F2455/2550/4455/4550                                   //// 
.................... ////     PIC18F2450/4450                                             //// 
.................... ////     PIC18F65J50/66J50/66J55/67J50/85J50/86J50/86J55/87J50       //// 
.................... ////                                                                 //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes: //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor //// 
.................... ////   usb.c - USB token and request handler code                    //// 
.................... ////   usb.h - definitions, prototypes and global variables          //// 
.................... ////                                                                 //// 
.................... //// The following examples are provided by CCS:                     //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                 //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.       //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple  //// 
.................... ////                      interfaces.                                //// 
.................... ////   ex_usb_kbmouse2.c - A HID Mouse/Keyboard combo using multiple //// 
.................... ////                      HID Reports.                               //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom        //// 
.................... ////                    protocol requiring custom Windows drivers.   //// 
.................... ////   ex_usb_serial.c -                                             //// 
.................... ////   ex_usb_serial2.c - Two examples of using the CDC driver for   //// 
.................... ////     a virtual COM port.                                         //// 
.................... ////                                                                 //// 
.................... ////   *********** NOTE ABOUT 18F2450/4450 LIMITATIONS **********    //// 
.................... ////  Due to the limited USB RAM of this family, a limitation of     //// 
.................... ////  this driver is that there are only 3 endpoints (0, 1 and 2).   //// 
.................... ////  The HW actually supports more endpoints, but to simplify       //// 
.................... ////  driver development this driver will only support the first 3   //// 
.................... ////  so there is an easier memory block to work with.               //// 
.................... ////                                                                 //// 
.................... ////  USB_MAX_EP0_PACKET_LENGTH will also be set to 8 regardless     //// 
.................... ////  of USB speed, to save RAM.                                     //// 
.................... ////                                                                 //// 
.................... ////   ************** NOTE ABOUT HW REQUIREMENTS ****************    //// 
.................... ////  If you are not using internal pullups, you will need to put    //// 
.................... ////  an internal pullup resistor on C4 or C5 depending on if you    //// 
.................... ////  want to use slow speed or full speed.  This code configures    //// 
.................... ////  the device to use internal pullups, see usb_init() if you      //// 
.................... ////  want to change that.                                           //// 
.................... ////                                                                 //// 
.................... ////  You need approximately 470nF cap on C3, even if you are using  //// 
.................... ////  the internal 3.3V USB regulator.                               //// 
.................... ////                                                                 //// 
.................... ////  To run at full speed, you must use the oscillator              //// 
.................... ////  configuration (PLLx) to set the PLL divide to 4MHz.  You can   //// 
.................... ////  configure the MCU clock to any speed (up to 48MHz) but the     //// 
.................... ////  PLL must run at 4Mhz to provide the USB peripheral with a      //// 
.................... ////  96MHz clock.  See the datasheet for details.                   //// 
.................... ////                                                                 //// 
.................... ////  To run at slow speed you must configure your MCU to run at     //// 
.................... ////  24Mhz.  See the datasheet for details.                         //// 
.................... ////                                                                 //// 
.................... ////   ****************  NOTE ABOUT INTERRUPTS  ******************   //// 
.................... //// This driver uses INT_USB.  It requires INT_USB to interrupt the //// 
.................... //// PIC when an event has happened on the USB Bus.  Therfore        //// 
.................... //// this code enables interrupts.  A user modification can be made  //// 
.................... //// to poll the USB interrupt flag instead of relying on an         //// 
.................... //// interrupt.                                                      //// 
.................... ////                                                                 //// 
.................... ////    ****************   USER FUNCTIONS  ***********************   //// 
.................... ////                                                                 //// 
.................... //// usb_init() - Initializes the USB stack, the USB peripheral and  //// 
.................... ////              attaches the unit to the usb bus.  Enables         //// 
.................... ////              interrupts.                                        //// 
.................... ////                                                                 //// 
.................... //// usb_init_cs() - A smaller usb_init(), does not attach unit      //// 
.................... ////              to usb bus or enable interrupts.                   //// 
.................... ////                                                                 //// 
.................... //// usb_put_packet() - Sends one packet to the host.                //// 
.................... ////                    If you need to send a message that spans     //// 
.................... ////                    more than one packet then see usb_puts() in  //// 
.................... ////                    usb.c                                        //// 
.................... ////                                                                 //// 
.................... //// usb_kbhit() - Returns true if OUT endpoint contains data from   //// 
.................... ////               host.                                             //// 
.................... ////                                                                 //// 
.................... //// usb_rx_packet_size() - Returns the size of packet that was      //// 
.................... ////               received.  usb_kbhit() must return TRUE else      //// 
.................... ////               this is not valid.  Don't forget in USB there     //// 
.................... ////               are 0 len packets!                                //// 
.................... ////                                                                 //// 
.................... //// usb_get_packet() - Gets one packet that from the host.          //// 
.................... ////                    usb_kbhit() must return true before you call //// 
.................... ////                    this routine or your data may not be valid.  //// 
.................... ////                    Once usb_kbhit() returns true you want to    //// 
.................... ////                    call this as soon as possible to get data    //// 
.................... ////                    out of the endpoint buffer so the PC can     //// 
.................... ////                    start sending more data, if needed.          //// 
.................... ////                    This only receives one packet, if you are    //// 
.................... ////                    trying to receive a multi-packet message     //// 
.................... ////                    see usb_gets() in usb.c.                     //// 
.................... ////                                                                 //// 
.................... //// usb_detach() - De-attach USB from the system.                   //// 
.................... ////                                                                 //// 
.................... //// usb_attach() - Attach USB to the system.                        //// 
.................... ////                                                                 //// 
.................... //// usb_attached() - Returns TRUE if the device is attached to a    //// 
.................... ////                  USB cable.  A macro that looks at the defined  //// 
.................... ////                  connection sense pin.                          //// 
.................... ////                                                                 //// 
.................... //// usb_task() - Keeps track of connection sense, calling           //// 
.................... ////              usb_detach() and usb_attach() when needed.         //// 
.................... ////                                                                 //// 
.................... //// For more documentation on these functions read the comments at  //// 
.................... //// each function.                                                  //// 
.................... ////                                                                 //// 
.................... //// The other functions defined in this file are for use by the     //// 
.................... //// USB code, and is not meant to be used by the user.              //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... //// Version History:                                                //// 
.................... ////                                                                 //// 
.................... ////   09-19-07: Fixed problems with 18F4450 family.                 //// 
.................... ////                                                                 //// 
.................... ////   07-17-07: Added 18F4450,2450 support                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-07: Added 87J50 family support                          //// 
.................... ////                                                                 //// 
.................... ////   11-01-05: usb_detach(), usb_attach() and usb_init_cs()        //// 
.................... ////               changed for the better.                           //// 
.................... ////                                                                 //// 
.................... ////   10-28-05: Added usb_rx_packet_size()                          //// 
.................... ////                                                                 //// 
.................... ////   07-13-05: usb_put_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_in() changed for 16bit packet sizes       //// 
.................... ////             usb_get_packet() changed for 16bit packet sizes     //// 
.................... ////             usb_flush_out() changed for 16bit packet sizes      //// 
.................... ////             usb_set_configured() changed for 16bit packet sizes //// 
.................... ////                                                                 //// 
.................... ////   06-30-05: usb_tbe() added                                     //// 
.................... ////             The way endpoint 0 DTS is set has been changed.     //// 
.................... ////                                                                 //// 
.................... ////   06-20-05: Initial Release                                     //// 
.................... ////                                                                 //// 
.................... ////   05-13-05: Beta Release (Full Speed works)                     //// 
.................... ////                                                                 //// 
.................... ////   03-21-05: Initial Alpha Release                               //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services         //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_HARDWARE__ 
.................... #DEFINE __USB_HARDWARE__ 
....................  
.................... //let the USB Stack know that we are using a PIC with internal USB peripheral 
.................... #DEFINE __PIC__   1 
....................  
.................... #if ((getenv("DEVICE")=="PIC18F87J50") || (getenv("DEVICE")=="PIC18F86J55") || \ 
....................      (getenv("DEVICE")=="PIC18F86J50") || (getenv("DEVICE")=="PIC18F85J50") || \ 
....................      (getenv("DEVICE")=="PIC18F67J50") || (getenv("DEVICE")=="PIC18F66J55") || \ 
....................      (getenv("DEVICE")=="PIC18F66J50") || (getenv("DEVICE")=="PIC18F65J50")) 
....................  #define __USB_87J50__ 
....................  #define USB_TOTAL_BUFFER_SPACE  ((int16)getenv("RAM")-0x500) 
....................  #define USB_MAX_NUM_ENDPOINTS  16 
.................... #elif ((getenv("DEVICE")=="PIC18F2450") || (getenv("DEVICE")=="PIC18F4450")) 
....................  #define __USB_4450__ 
....................  #if ((USB_EP3_TX_SIZE + USB_EP3_RX_SIZE + USB_EP4_TX_SIZE + USB_EP4_RX_SIZE + \ 
....................       USB_EP5_TX_SIZE + USB_EP5_RX_SIZE + USB_EP6_TX_SIZE + USB_EP6_RX_SIZE + \ 
....................       USB_EP7_TX_SIZE + USB_EP7_RX_SIZE + USB_EP8_TX_SIZE + USB_EP8_RX_SIZE + \ 
....................       USB_EP9_TX_SIZE + USB_EP9_RX_SIZE + USB_EP10_TX_SIZE + USB_EP10_RX_SIZE + \ 
....................       USB_EP11_TX_SIZE + USB_EP11_RX_SIZE + USB_EP12_TX_SIZE +USB_EP12_RX_SIZE + \ 
....................       USB_EP13_TX_SIZE + USB_EP13_RX_SIZE + USB_EP14_TX_SIZE + USB_EP14_RX_SIZE + \ 
....................       USB_EP15_TX_SIZE + USB_EP15_RX_SIZE) > 0) 
....................    #error This driver only supports endpoints 0, 1 and 2 for this chip. 
....................  #endif 
....................  #define USB_MAX_NUM_ENDPOINTS  3 
....................  #define USB_TOTAL_BUFFER_SPACE  (0x100 - USB_MAX_NUM_ENDPOINTS*8) 
.................... #elif ((getenv("DEVICE")=="PIC18F2455") || (getenv("DEVICE")=="PIC18F2550") || \ 
....................        (getenv("DEVICE")=="PIC18F4455") || (getenv("DEVICE")=="PIC18F4550")) 
....................  #define __USB_4550__ 
....................  #define USB_TOTAL_BUFFER_SPACE  ((int16)0x300) 
....................  #define USB_MAX_NUM_ENDPOINTS  16 
.................... #else 
....................  #error Unknown PIC device, USB not supported in this library. 
.................... #endif 
....................  
.................... #ifndef USB_USE_FULL_SPEED 
....................  #define USB_USE_FULL_SPEED   TRUE 
.................... #endif 
....................  
.................... #ifndef USB_CON_SENSE_PIN 
....................  #define USB_CON_SENSE_PIN  0 
.................... #endif 
....................  
.................... #if defined(__USB_4450__) 
....................    //due to limited ram, force max packet length to 8 for this chip 
....................    #define USB_MAX_EP0_PACKET_LENGTH   8 
.................... #else 
....................    #if USB_USE_FULL_SPEED==FALSE 
....................       //slow speed requires 8byte max packet size for endpoint 0 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   8 
....................    #else 
....................       //for full speed you can still use 8bytes, but 64 will be faster 
....................       #DEFINE USB_MAX_EP0_PACKET_LENGTH   64 
....................    #endif 
.................... #endif 
....................  
.................... #INCLUDE <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... ////                   **** DEFINITIONS *****                          //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (FALSE) - Set to TRUE if your device supports        //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            Only the 18Fxx5x USB peripheral can    //// 
.................... ////                            have a value larger than 8.            //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE  //set to false to opt for less RAM, true to opt for less ROM 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     0 
.................... #define USB_ENABLE_BULK         0x01 
.................... #define USB_ENABLE_ISOCHRONOUS  0x02 
.................... #define USB_ENABLE_INTERRUPT    0x03 
.................... #define USB_ENABLE_CONTROL      0x04 
....................  
.................... //// DO NOT CHANGE THE FOLLOWING VALUES: 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #else 
.................... struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #endif 
....................  
.................... int16 __usb_kbhit_status; 
....................  
.................... /// *** User function prototypes 
.................... void usb_wait_for_enumeration(void); 
.................... int1 usb_unermated(void); 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout); 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout); 
....................  
.................... /// *** Token and request hanlder function prototypes 
.................... void usb_token_reset(); 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_request_send_response(int len);   //always sends usb_ep0_rx_buffer[] to endpoint 0 with a toggle of DATA 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tok_in_dne(int8 endpoint); 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
....................  
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
....................  
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
....................  
.................... void usb_finish_set_address(void); 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #define USB_BUFFER_NEEDED (USB_EP0_TX_SIZE+USB_EP0_RX_SIZE+USB_EP1_TX_SIZE+USB_EP1_RX_SIZE+USB_EP2_TX_SIZE+USB_EP2_RX_SIZE+USB_EP3_TX_SIZE+USB_EP3_RX_SIZE+USB_EP4_TX_SIZE+USB_EP4_RX_SIZE+USB_EP5_TX_SIZE+USB_EP5_RX_SIZE+USB_EP6_TX_SIZE+USB_EP6_RX_SIZE+USB_EP7_TX_SIZE+USB_EP7_RX_SIZE+USB_EP8_TX_SIZE+USB_EP8_RX_SIZE+USB_EP9_TX_SIZE+USB_EP9_RX_SIZE+USB_EP10_TX_SIZE+USB_EP10_RX_SIZE+USB_EP11_TX_SIZE+USB_EP11_RX_SIZE+USB_EP12_TX_SIZE+USB_EP12_RX_SIZE+USB_EP13_TX_SIZE+USB_EP13_RX_SIZE+USB_EP14_TX_SIZE+USB_EP14_RX_SIZE+USB_EP15_TX_SIZE+USB_EP15_RX_SIZE) 
....................  
.................... #if (USB_BUFFER_NEEDED > USB_TOTAL_BUFFER_SPACE) 
....................  #error You are trying to allocate more memory for endpoints than the PIC can handle 
.................... #endif 
....................  
.................... #if defined(__USB_4450__) 
....................  #reserve 0x400:0x4FF 
.................... #else 
....................  #reserve 0x400:0x4FF+USB_BUFFER_NEEDED 
.................... #endif 
....................  
.................... #define debug_usb(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) 
.................... //#define debug_usb printf 
.................... //#define debug_putc putc_tbe 
.................... #define debug_display_ram(x,y) 
.................... /* 
.................... void debug_display_ram(int8 len, int8 *ptr) { 
....................    int8 max=16; 
....................    debug_usb(debug_putc,"%U - ",len); 
....................    if (max>len) {max=len;} 
....................    while(max--) { 
....................       debug_usb(debug_putc,"%X",*ptr); 
....................       len--; 
....................       ptr++; 
....................    } 
....................    if (len) {debug_usb(debug_putc,"...");} 
.................... } 
.................... */ 
....................  
.................... //if you are worried that the PIC is not receiving packets because a bug in the 
.................... //DATA0/DATA1 synch code, you can set this to TRUE to ignore the DTS on 
.................... //receiving. 
.................... #ifndef USB_IGNORE_RX_DTS 
....................  #define USB_IGNORE_RX_DTS FALSE 
.................... #endif 
....................  
.................... #ifndef USB_IGNORE_TX_DTS 
....................  #define USB_IGNORE_TX_DTS FALSE 
.................... #endif 
....................  
.................... //if you enable this it will keep a counter of the 6 possible errors the 
.................... //pic can detect.  disabling this will save you ROM, RAM and execution time. 
.................... #ifndef USB_USE_ERROR_COUNTER 
....................    #define USB_USE_ERROR_COUNTER FALSE 
.................... #endif 
....................  
.................... #define USB_PING_PONG_MODE_OFF   0  //no ping pong 
.................... #define USB_PING_PONG_MODE_E0    1  //ping pong endpoint 0 only 
.................... #define USB_PING_PONG_MODE_ON    2  //ping pong all endpoints 
....................  
.................... //NOTE - PING PONG MODE IS NOT SUPPORTED BY CCS! 
.................... #ifndef USB_PING_PONG_MODE 
....................    #define USB_PING_PONG_MODE USB_PING_PONG_MODE_OFF 
.................... #endif 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................    int ERROR_COUNTER[6]; 
.................... #endif 
....................  
.................... //---pic18fxx5x memory locations 
.................... #if defined(__USB_4550__) || defined(__USB_4450__) 
....................    #byte UFRML   =  0xF66 
....................    #byte UFRMH   =  0xF67 
....................    #byte UIR     =  0xF68 
....................    #byte UIE     =  0xF69 
....................    #byte UEIR    =  0xF6A 
....................    #byte UEIE    =  0xF6B 
....................    #byte USTAT   =  0xF6C 
....................    #byte UCON    =  0xF6D 
....................    #byte UADDR   =  0xF6E 
....................    #byte UCFG    =  0xF6F 
....................    #define  UEP0_LOC 0xF70 
.................... #else 
....................    #byte UFRML   =  0xF60 
....................    #byte UFRMH   =  0xF61 
....................    #byte UIR     =  0xF62 
....................    #byte UIE     =  0xF5C 
....................    #byte UEIR    =  0xF63 
....................    #byte UEIE    =  0xF5D 
....................    #byte USTAT   =  0xF64 
....................    #byte UCON    =  0xF65 
....................    #byte UADDR   =  0xF5E 
....................    #byte UCFG    =  0xF5F 
....................    #define  UEP0_LOC 0xF4C 
.................... #endif 
....................  
.................... #byte UEP0    =  UEP0_LOC 
....................  
.................... #if defined(__USB_4450__) 
....................  //#define USB_BUFFER (0x400 + (USB_MAX_NUM_ENDPOINTS*8)) //compiler doesnt support this 
....................  #if USB_MAX_NUM_ENDPOINTS==3 
....................   #define USB_BUFFER 0x418   //if you have an old compiler you will need to use this 
....................  #else 
....................   #error Define USB_BUFFER for the number of endpoints you have (0x400 + NUM*0x08) 
....................  #endif 
.................... #else 
....................  #define USB_BUFFER 0x500 
.................... #endif 
....................  
.................... #byte BD0STAT  =  0x400 
.................... #byte BD0CNT  =  0x401 
.................... #byte BD0ADRL  =  0x402 
.................... #byte BD0ADRJ  =  0x403 
....................  
.................... #define BD0STAT_LOC 0x400 
.................... #define BD0CNT_LOC  0x401 
.................... #define BD0ADRL_LOC 0x402 
.................... #define BD0ADRH_LOC 0x403 
....................  
.................... #define UEP(x) *(UEP0_LOC+x) 
....................  
.................... #BIT UIR_SOF = UIR.6 
.................... #BIT UIR_STALL = UIR.5 
.................... #BIT UIR_IDLE = UIR.4 
.................... #BIT UIR_TRN = UIR.3 
.................... #BIT UIR_ACTV = UIR.2 
.................... #BIT UIR_UERR = UIR.1 
.................... #BIT UIR_URST = UIR.0 
....................  
.................... #BIT UIE_SOF = UIE.6 
.................... #BIT UIE_STALL = UIE.5 
.................... #BIT UIE_IDLE = UIE.4 
.................... #BIT UIE_TRN = UIE.3 
.................... #BIT UIE_ACTV = UIE.2 
.................... #BIT UIE_UERR = UIE.1 
.................... #BIT UIE_URST = UIE.0 
....................  
.................... #bit UCON_PBRST=UCON.6 
.................... #bit UCON_SE0=UCON.5 
.................... #bit UCON_PKTDIS=UCON.4 
.................... #bit UCON_USBEN=UCON.3 
.................... #bit UCON_RESUME=UCON.2 
.................... #bit UCON_SUSPND=UCON.1 
....................  
.................... #if (USB_PING_PONG_MODE==USB_PING_PONG_MODE_OFF) 
....................  #define EP_BDxST_O(x)    *(BD0STAT_LOC + x*8) 
....................  #define EP_BDxCNT_O(x)    *(BD0CNT_LOC + x*8) 
....................  #define EP_BDxADR_O(x)   *(int16 *)(BD0ADRL_LOC + x*8) 
....................  #define EP_BDxST_I(x)    *(BD0STAT_LOC + 4 + x*8) 
....................  #define EP_BDxCNT_I(x)    *(BD0CNT_LOC + 4 + x*8) 
....................  #define EP_BDxADR_I(x)   *(int16 *)(BD0ADRL_LOC + 4 + x*8) 
.................... #else 
.................... #error Right now this driver only supports no ping pong 
.................... #endif 
....................  
.................... //See UEPn (0xF70-0xF7F) 
.................... #define ENDPT_DISABLED   0x00   //endpoint not used 
.................... #define ENDPT_IN_ONLY   0x02    //endpoint supports IN transactions only 
.................... #define ENDPT_OUT_ONLY   0x04    //endpoint supports OUT transactions only 
.................... #define ENDPT_CONTROL   0x06    //Supports IN, OUT and CONTROL transactions - Only use with EP0 
.................... #define ENDPT_NON_CONTROL 0x0E  //Supports both IN and OUT transactions 
....................  
.................... //Define the states that the USB interface can be in 
.................... enum {USB_STATE_DETACHED=0, USB_STATE_ATTACHED=1, USB_STATE_POWERED=2, USB_STATE_DEFAULT=3, 
....................     USB_STATE_ADDRESS=4, USB_STATE_CONFIGURED=5} usb_state=0; 
....................  
.................... //--BDendST has their PIDs upshifed 2 
.................... #define USB_PIC_PID_IN       0x24  //device to host transactions 
.................... #define USB_PIC_PID_OUT      0x04  //host to device transactions 
.................... #define USB_PIC_PID_SETUP    0x34  //host to device setup transaction 
....................  
.................... #define USTAT_IN_E0        4 
.................... #define USTAT_OUT_SETUP_E0 0 
....................  
.................... #define __USB_UIF_RESET    0x01 
.................... #define __USB_UIF_ERROR    0x02 
.................... #define __USB_UIF_ACTIVE   0x04 
.................... #define __USB_UIF_TOKEN    0x08 
.................... #define __USB_UIF_IDLE     0x10 
.................... #define __USB_UIF_STALL    0x20 
.................... #define __USB_UIF_SOF      0x40 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  #define STANDARD_INTS 0x3F 
.................... #else 
....................  #define STANDARD_INTS 0x3D 
.................... #endif 
....................  
.................... #define __USB_UCFG_UTEYE   0x80 
.................... #if defined(__USB_4550__) 
....................  #define __USB_UCFG_UOEMON  0x40 
.................... #endif 
.................... #define __USB_UCFG_UPUEN   0x10 
.................... #define __USB_UCFG_UTRDIS  0x08 
.................... #define __USB_UCFG_FSEN    0x04 
....................  
.................... #if USB_USE_FULL_SPEED 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_UPUEN | __USB_UCFG_FSEN | USB_PING_PONG_MODE) 
.................... #else 
....................    #define __UCFG_VAL_ENABLED__ (__USB_UCFG_UPUEN | USB_PING_PONG_MODE); 
.................... #endif 
....................  
.................... #define __UCFG_VAL_DISABLED__ 0x08 
....................  
.................... char usb_ep0_rx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
.................... #locate usb_ep0_rx_buffer=USB_BUFFER 
....................  
.................... char usb_ep0_tx_buffer[USB_MAX_EP0_PACKET_LENGTH]; 
.................... #locate usb_ep0_tx_buffer=USB_BUFFER+USB_MAX_EP0_PACKET_LENGTH 
....................  
.................... char usb_data_buffer[USB_TOTAL_BUFFER_SPACE-USB_MAX_EP0_PACKET_LENGTH-USB_MAX_EP0_PACKET_LENGTH]; 
.................... #locate usb_data_buffer=USB_BUFFER+USB_MAX_EP0_PACKET_LENGTH+USB_MAX_EP0_PACKET_LENGTH 
....................  
.................... int8 __setup_0_tx_size; 
....................  
.................... //interrupt handler, specific to PIC18Fxx5x peripheral only 
.................... void usb_handle_interrupt(); 
.................... void usb_isr_rst(); 
.................... void usb_isr_uerr(); 
.................... void usb_isr_sof(void); 
.................... void usb_isr_activity(); 
.................... void usb_isr_uidle(); 
.................... void usb_isr_tok_dne(); 
.................... void usb_isr_stall(void); 
.................... void usb_init_ep0_setup(void); 
....................  
.................... //following functions standard part of CCS PIC USB driver, and used by usb.c 
.................... void usb_init(); 
.................... void usb_detach(); 
.................... int1 usb_put_packet(int endpoint, int * ptr, int16 len, USB_DTS_BIT tgl); 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl); //marks the transmit buffer as ready for transmission 
.................... int16 usb_get_packet(int8 endpoint, int8 * ptr, int16 max); 
.................... int16 usb_rx_packet_size(int8 endpoint); 
.................... int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max); 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl); 
.................... void usb_stall_ep(int8 endpoint); 
.................... void usb_unstall_ep(int8 endpoint); 
.................... int1 usb_endpoint_stalled(int8 endpoint); 
.................... void usb_set_address(int8 address); 
.................... void usb_set_configured(int config); 
.................... void usb_disable_endpoints(void); 
....................  
.................... //// BEGIN User Functions: 
....................  
.................... /****************************************************************************** 
.................... /* usb_attached() 
.................... /* 
.................... /* Summary: Returns TRUE if the device is attached to a USB cable 
.................... /* 
.................... /*****************************************************************************/ 
.................... #if USB_CON_SENSE_PIN 
....................  #define usb_attached() input(USB_CON_SENSE_PIN) 
.................... #else 
....................  #define usb_attached() TRUE 
.................... #endif 
....................  
.................... /****************************************************************************** 
.................... /* usb_detach() 
.................... /* 
.................... /* Summary: Remove the D+/D- lines from the USB bus.  Basically, disable USB. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_detach(void) {  //done 
....................    UCON=0;  //disable USB hardware 
*
2C9A:  CLRF   F6D
....................    UIE=0;   //disable USB interrupts 
2C9C:  CLRF   F69
....................    UCFG = __UCFG_VAL_DISABLED__; 
2C9E:  MOVLW  08
2CA0:  MOVWF  F6F
....................    set_tris_c(*0xF94 | 0x30); 
2CA2:  MOVF   F94,W
2CA4:  IORLW  30
2CA6:  MOVWF  F94
....................    usb_state=USB_STATE_DETACHED; 
2CA8:  CLRF   1F
2CAA:  CLRF   18
2CAC:  BTFSC  FF2.7
2CAE:  BSF    18.7
2CB0:  BCF    FF2.7
....................    usb_token_reset();              //clear the chapter9 stack 
2CB2:  CALL   2022
2CB6:  BTFSC  18.7
2CB8:  BSF    FF2.7
....................    __usb_kbhit_status=0; 
2CBA:  CLRF   1E
2CBC:  CLRF   1D
.................... } 
2CBE:  GOTO   2D0A (RETURN)
....................  
.................... /****************************************************************************** 
.................... /* usb_attach() 
.................... /* 
.................... /* Summary: Attach the D+/D- lines to the USB bus.  Enable the USB peripheral. 
.................... /* 
.................... /* You should wait until UCON_SE0 is clear before enabling reset/idle interrupt 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_attach(void) { 
2CC2:  CLRF   18
2CC4:  BTFSC  FF2.7
2CC6:  BSF    18.7
2CC8:  BCF    FF2.7
....................    usb_token_reset(); 
2CCA:  CALL   2022
2CCE:  BTFSC  18.7
2CD0:  BSF    FF2.7
....................     UCON = 0; 
2CD2:  CLRF   F6D
....................    UCFG = __UCFG_VAL_ENABLED__; 
2CD4:  MOVLW  14
2CD6:  MOVWF  F6F
....................     UIE = 0;                                // Mask all USB interrupts 
2CD8:  CLRF   F69
....................     UCON_USBEN = 1;                     // Enable module & attach to bus 
2CDA:  BSF    F6D.3
....................     usb_state = USB_STATE_ATTACHED;      // Defined in usbmmap.c & .h 
2CDC:  MOVLW  01
2CDE:  MOVWF  1F
.................... } 
2CE0:  GOTO   2CEA (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_cs() 
.................... /* 
.................... /* Summary: Resets and initalizes USB peripheral.  Does not attach the peripheral 
.................... /*          to the USB bus.  See usb_attach() and usb_task() on how to 
.................... /*          attach to the USB bus. 
.................... /* 
.................... /*          You must call this before any other USB code. 
.................... /* 
.................... /*          NOTE: an alternative function, usb_init(), is provided that 
.................... /*                initializes the USB and then connects. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #define usb_init_cs usb_detach 
....................  
.................... /***************************************************************************** 
.................... /* usb_task() 
.................... /* 
.................... /* Summary: Keeps an eye on the connection sense pin to determine if we are 
.................... /*          attached to a USB cable or not.  If we are attached to a USB cable, 
.................... /*          initialize the USB peripheral if needed.  If we are disconnected 
.................... /*          from the USB cable, disable the USB peripheral. 
.................... /* 
.................... /*          NOTE: If you are not using a connection sense pin, will automatically 
.................... /*                enable the USB peripheral. 
.................... /* 
.................... /*          NOTE: this enables interrupts once the USB peripheral is ready 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_task(void) { 
....................    if (usb_attached()) { 
....................       if (UCON_USBEN==0) { 
2CE4:  BTFSC  F6D.3
2CE6:  BRA    2CEA
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: ATTACH"); 
....................          usb_attach(); 
2CE8:  BRA    2CC2
....................       } 
....................    } 
....................    else { 
....................       if (UCON_USBEN==1)  { 
....................          debug_usb(debug_putc, "\r\n\nUSB TASK: DE-ATTACH"); 
....................          usb_detach(); 
....................       } 
....................    } 
....................  
....................    if ((usb_state == USB_STATE_ATTACHED)&&(!UCON_SE0)) { 
2CEA:  DECFSZ 1F,W
2CEC:  BRA    2D04
2CEE:  BTFSC  F6D.5
2CF0:  BRA    2D04
....................       UIR=0; 
2CF2:  CLRF   F68
....................       UIE=0; 
2CF4:  CLRF   F69
....................       enable_interrupts(INT_USB); 
2CF6:  BSF    FA0.5
....................       enable_interrupts(GLOBAL); 
2CF8:  MOVLW  C0
2CFA:  IORWF  FF2,F
....................       UIE=__USB_UIF_IDLE | __USB_UIF_RESET;  //enable IDLE and RESET USB interrupt 
2CFC:  MOVLW  11
2CFE:  MOVWF  F69
....................       usb_state=USB_STATE_POWERED; 
2D00:  MOVLW  02
2D02:  MOVWF  1F
....................       debug_usb(debug_putc, "\r\n\nUSB TASK: POWERED"); 
....................    } 
.................... } 
2D04:  GOTO   2D0C (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init() 
.................... /* 
.................... /* Summary: Resets and initalizes USB hardware.  You must call this first before 
.................... /*          using code.  Will attach the USB periperhal to the USB bus. 
.................... /* 
.................... /*          NOTE: If you are using a connection sense pin, this will wait in 
.................... /*                an infinite loop until the device is connected to a USB cable. 
.................... /* 
.................... /*          NOTE: If you are not using a connection sense pin, this will wait 
.................... /*                in an infinte loop until the SE0 condition clears, which usually 
.................... /*                doesn't take long 
.................... /* 
.................... /*          NOTE: this enables interrupts. 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init(void) { 
....................    usb_init_cs(); 
2D08:  BRA    2C9A
....................  
....................    do { 
....................       usb_task(); 
2D0A:  BRA    2CE4
....................    } while (usb_state != USB_STATE_POWERED); 
2D0C:  MOVF   1F,W
2D0E:  SUBLW  02
2D10:  BNZ   2D0A
.................... } 
2D12:  GOTO   2D1C (RETURN)
....................  
....................  
.................... /************************************************************** 
.................... /* usb_flush_in() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        len - length of data that is being tramsferred 
.................... /*        tgl - Data toggle synchronization for this packet 
.................... /* 
.................... /* Output: TRUE if success, FALSE if error (we don't control the endpoint) 
.................... /* 
.................... /* Summary: Marks the endpoint ready for transmission.  You must 
.................... /*          have already loaded the endpoint buffer with data. 
.................... /*          (IN is PIC -> PC) 
.................... /***************************************************************/ 
.................... int1 usb_flush_in(int8 endpoint, int16 len, USB_DTS_BIT tgl) { 
....................    int8 i; 
....................  
....................    debug_usb(debug_putc,"\r\nPUT %X %U %LU",endpoint, tgl, len); 
....................  
....................    i=EP_BDxST_I(endpoint); 
*
27FE:  MOVF   xF5,W
2800:  MULLW  08
2802:  MOVF   FF3,W
2804:  ADDLW  04
2806:  MOVWF  01
2808:  MOVLW  04
280A:  MOVWF  03
280C:  BTFSC  FD8.0
280E:  INCF   03,F
2810:  MOVFF  01,FE9
2814:  MOVFF  03,FEA
2818:  MOVFF  FEF,F9
....................    if (!bit_test(i,7)) { 
281C:  BTFSC  xF9.7
281E:  BRA    28D6
....................  
....................       EP_BDxCNT_I(endpoint)=len; 
2820:  MOVF   xF5,W
2822:  MULLW  08
2824:  MOVF   FF3,W
2826:  ADDLW  05
2828:  MOVWF  01
282A:  MOVLW  04
282C:  MOVWF  03
282E:  BTFSC  FD8.0
2830:  INCF   03,F
2832:  MOVFF  01,FE9
2836:  MOVFF  03,FEA
283A:  MOVFF  F6,FEF
....................  
....................      debug_display_ram(len, EP_BDxADR_I(endpoint)); 
....................  
....................      #if USB_IGNORE_TX_DTS 
....................       i=0x80; 
....................      #else 
....................       if (tgl == USB_DTS_TOGGLE) { 
283E:  MOVF   xF8,W
2840:  SUBLW  02
2842:  BNZ   2870
....................          i=EP_BDxST_I(endpoint); 
2844:  MOVF   xF5,W
2846:  MULLW  08
2848:  MOVF   FF3,W
284A:  ADDLW  04
284C:  MOVWF  01
284E:  MOVLW  04
2850:  MOVWF  03
2852:  BTFSC  FD8.0
2854:  INCF   03,F
2856:  MOVFF  01,FE9
285A:  MOVFF  03,FEA
285E:  MOVFF  FEF,F9
....................          if (bit_test(i,6)) 
2862:  BTFSS  xF9.6
2864:  BRA    286A
....................             tgl=USB_DTS_DATA0;  //was DATA1, goto DATA0 
2866:  CLRF   xF8
....................          else 
2868:  BRA    286E
....................             tgl=USB_DTS_DATA1;  //was DATA0, goto DATA1 
286A:  MOVLW  01
286C:  MOVWF  xF8
....................       } 
....................       else if (tgl == USB_DTS_USERX) { 
286E:  BRA    2896
2870:  MOVF   xF8,W
2872:  SUBLW  04
2874:  BNZ   2896
....................          i=EP_BDxST_O(endpoint); 
2876:  MOVF   xF5,W
2878:  MULLW  08
287A:  MOVFF  FF3,01
287E:  MOVLW  04
2880:  MOVFF  01,FE9
2884:  MOVWF  FEA
2886:  MOVFF  FEF,F9
....................          if (bit_test(i,6)) 
288A:  BTFSS  xF9.6
288C:  BRA    2894
....................             tgl=USB_DTS_DATA1; 
288E:  MOVLW  01
2890:  MOVWF  xF8
....................          else 
2892:  BRA    2896
....................             tgl=USB_DTS_DATA0; 
2894:  CLRF   xF8
....................       } 
....................       if (tgl == USB_DTS_DATA1) { 
2896:  DECFSZ xF8,W
2898:  BRA    28A0
....................          i=0xC8;  //DATA1, UOWN 
289A:  MOVLW  C8
289C:  MOVWF  xF9
....................       } 
....................       else if (tgl == USB_DTS_DATA0) { 
289E:  BRA    28A8
28A0:  MOVF   xF8,F
28A2:  BNZ   28A8
....................          i=0x88; //DATA0, UOWN 
28A4:  MOVLW  88
28A6:  MOVWF  xF9
....................       } 
....................      #endif 
....................  
....................       //set BC8 and BC9 
....................       if (bit_test(len,8)) {bit_set(i,0);} 
28A8:  BTFSC  xF7.0
28AA:  BSF    xF9.0
....................       if (bit_test(len,9)) {bit_set(i,1);} 
28AC:  BTFSC  xF7.1
28AE:  BSF    xF9.1
....................  
....................       debug_usb(debug_putc," %X",i); 
....................  
....................       EP_BDxST_I(endpoint)=i;//save changes 
28B0:  MOVF   xF5,W
28B2:  MULLW  08
28B4:  MOVF   FF3,W
28B6:  ADDLW  04
28B8:  MOVWF  01
28BA:  MOVLW  04
28BC:  MOVWF  03
28BE:  BTFSC  FD8.0
28C0:  INCF   03,F
28C2:  MOVFF  01,FE9
28C6:  MOVFF  03,FEA
28CA:  MOVFF  F9,FEF
....................  
....................       return(1); 
28CE:  MOVLW  01
28D0:  MOVWF  01
28D2:  BRA    28DA
....................    } 
....................     else { 
28D4:  BRA    28D6
....................          debug_usb(debug_putc,"\r\nPUT ERR"); 
....................     } 
....................    return(0); 
28D6:  MOVLW  00
28D8:  MOVWF  01
.................... } 
28DA:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_put_packet(endpoint,*ptr,len,toggle) 
.................... /* 
.................... /* Input: endpoint - endpoint to send packet to 
.................... /*        ptr - points to data to send 
.................... /*        len - amount of data to send 
.................... /*        toggle - whether to send data with a DATA0 pid, a DATA1 pid, or toggle from the last DATAx pid. 
.................... /* 
.................... /* Output: TRUE if data was sent correctly, FALSE if it was not.  The only reason it will 
.................... /*         return FALSE is if because the TX buffer is still full from the last time you 
.................... /*         tried to send a packet. 
.................... /* 
.................... /* Summary: Sends one packet out the EP to the host.  Notice that there is a difference 
.................... /*          between a packet and a message.  If you wanted to send a 512 byte message you 
.................... /*          would accomplish this by sending 8 64-byte packets, followed by a 0 length packet. 
.................... /*          If the last (or only packet) being sent is less than the max packet size defined 
.................... /*          in your descriptor then you do not need to send a 0 length packet to identify 
.................... /*          an end of message. 
.................... /* 
.................... /*          usb_puts() (provided in usb.c) will send a multi-packet message correctly. 
.................... /* 
.................... /********************************************************************************/ 
.................... int1 usb_put_packet(int8 endpoint, int8 * ptr, int16 len, USB_DTS_BIT tgl) { //done 
....................    int16 j; 
....................    int8 i; 
....................    int8 * buff_add;     
....................  
....................    i=EP_BDxST_I(endpoint); 
*
29C8:  MOVF   xEA,W
29CA:  MULLW  08
29CC:  MOVF   FF3,W
29CE:  ADDLW  04
29D0:  MOVWF  01
29D2:  MOVLW  04
29D4:  MOVWF  03
29D6:  BTFSC  FD8.0
29D8:  INCF   03,F
29DA:  MOVFF  01,FE9
29DE:  MOVFF  03,FEA
29E2:  MOVFF  FEF,F2
....................    if (!bit_test(i,7)) { 
29E6:  BTFSC  xF2.7
29E8:  BRA    2A68
....................  
....................       buff_add=EP_BDxADR_I(endpoint); 
29EA:  MOVF   xEA,W
29EC:  MULLW  08
29EE:  MOVF   FF3,W
29F0:  ADDLW  06
29F2:  MOVWF  01
29F4:  MOVLW  04
29F6:  MOVWF  03
29F8:  BTFSC  FD8.0
29FA:  INCF   03,F
29FC:  MOVFF  01,FE9
2A00:  MOVFF  03,FEA
2A04:  MOVFF  FEC,03
2A08:  MOVF   FED,F
2A0A:  MOVFF  FEF,F3
2A0E:  MOVFF  03,F4
....................  
....................       for (j=0;j<len;j++) { 
2A12:  CLRF   xF1
2A14:  CLRF   xF0
2A16:  MOVF   xF1,W
2A18:  SUBWF  xEE,W
2A1A:  BNC   2A50
2A1C:  BNZ   2A24
2A1E:  MOVF   xED,W
2A20:  SUBWF  xF0,W
2A22:  BC    2A50
....................          *buff_add=*ptr; 
2A24:  MOVFF  EB,FE9
2A28:  MOVFF  EC,FEA
2A2C:  MOVFF  FEF,F7
2A30:  MOVFF  F4,FEA
2A34:  MOVFF  F3,FE9
2A38:  MOVFF  F7,FEF
....................          buff_add++; 
2A3C:  INCF   xF3,F
2A3E:  BTFSC  FD8.2
2A40:  INCF   xF4,F
....................          ptr++; 
2A42:  INCF   xEB,F
2A44:  BTFSC  FD8.2
2A46:  INCF   xEC,F
....................       } 
2A48:  INCF   xF0,F
2A4A:  BTFSC  FD8.2
2A4C:  INCF   xF1,F
2A4E:  BRA    2A16
....................  
....................       return(usb_flush_in(endpoint, len, tgl)); 
2A50:  MOVFF  EA,F5
2A54:  MOVFF  EE,F7
2A58:  MOVFF  ED,F6
2A5C:  MOVFF  EF,F8
2A60:  RCALL  27FE
2A62:  MOVF   01,W
2A64:  BRA    2A6C
....................     } 
....................     else { 
2A66:  BRA    2A68
....................         debug_usb(debug_putc,"\r\nPUT ERR"); 
....................     } 
....................     return(0); 
2A68:  MOVLW  00
2A6A:  MOVWF  01
.................... } 
2A6C:  RETLW  00
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN Hardware layer functions required by USB.C 
....................  
.................... /************************************************************** 
.................... /* usb_flush_out() 
.................... /* 
.................... /* Input: endpoint - which endpoint to mark for transfer 
.................... /*        tgl - Data toggle synchronization to expect in the next packet 
.................... /* 
.................... /* Output: NONE 
.................... /* 
.................... /* Summary: Clears the previously received packet, and then marks this 
.................... /*          endpoint's receive buffer as ready for more data. 
.................... /*          (OUT is PC -> PIC) 
.................... /***************************************************************/ 
.................... void usb_flush_out(int8 endpoint, USB_DTS_BIT tgl) { 
....................    int8 i; 
....................    int16 len; 
....................  
....................      #if USB_IGNORE_RX_DTS 
....................       if (tgl == USB_DTS_STALL) { 
....................          debug_usb(debug_putc, '*'); 
....................          i=0x84; 
....................          EP_BDxST_I(endpoint)=0x84; 
....................          return; 
....................       } 
....................       else 
....................          i=0x80; 
....................      #else 
....................       i=EP_BDxST_O(endpoint); 
*
2718:  MOVF   xE9,W
271A:  MULLW  08
271C:  MOVFF  FF3,01
2720:  MOVLW  04
2722:  MOVFF  01,FE9
2726:  MOVWF  FEA
2728:  MOVFF  FEF,EB
....................       if (tgl == USB_DTS_TOGGLE) { 
272C:  MOVF   xEA,W
272E:  SUBLW  02
2730:  BNZ   273E
....................          if (bit_test(i,6)) 
2732:  BTFSS  xEB.6
2734:  BRA    273A
....................             tgl=USB_DTS_DATA0;  //was DATA1, goto DATA0 
2736:  CLRF   xEA
....................          else 
2738:  BRA    273E
....................             tgl=USB_DTS_DATA1;  //was DATA0, goto DATA1 
273A:  MOVLW  01
273C:  MOVWF  xEA
....................       } 
....................       if (tgl == USB_DTS_STALL) { 
273E:  MOVF   xEA,W
2740:  SUBLW  03
2742:  BNZ   2768
....................          i=0x84; 
2744:  MOVLW  84
2746:  MOVWF  xEB
....................          EP_BDxST_I(endpoint)=0x84; //stall both in and out endpoints 
2748:  MOVF   xE9,W
274A:  MULLW  08
274C:  MOVF   FF3,W
274E:  ADDLW  04
2750:  MOVWF  01
2752:  MOVLW  04
2754:  MOVWF  03
2756:  BTFSC  FD8.0
2758:  INCF   03,F
275A:  MOVFF  01,FE9
275E:  MOVFF  03,FEA
2762:  MOVLW  84
2764:  MOVWF  FEF
....................       } 
....................       else if (tgl == USB_DTS_DATA1) { 
2766:  BRA    277A
2768:  DECFSZ xEA,W
276A:  BRA    2772
....................          i=0xC8;  //DATA1, UOWN 
276C:  MOVLW  C8
276E:  MOVWF  xEB
....................       } 
....................       else if (tgl == USB_DTS_DATA0) { 
2770:  BRA    277A
2772:  MOVF   xEA,F
2774:  BNZ   277A
....................          i=0x88; //DATA0, UOWN 
2776:  MOVLW  88
2778:  MOVWF  xEB
....................       } 
....................      #endif 
....................  
....................    bit_clear(__usb_kbhit_status,endpoint); 
277A:  CLRF   03
277C:  MOVLW  01
277E:  MOVWF  02
2780:  MOVF   xE9,W
2782:  MOVWF  00
2784:  BZ    2790
2786:  BCF    FD8.0
2788:  RLCF   02,F
278A:  RLCF   03,F
278C:  DECFSZ 00,F
278E:  BRA    2786
2790:  MOVF   02,W
2792:  XORLW  FF
2794:  MOVWF  00
2796:  MOVLW  FF
2798:  XORWF  03,F
279A:  MOVF   00,W
279C:  ANDWF  1D,F
279E:  MOVF   03,W
27A0:  ANDWF  1E,F
....................  
....................    len=usb_ep_rx_size[endpoint]; 
27A2:  BCF    FD8.0
27A4:  RLCF   xE9,W
27A6:  CLRF   03
27A8:  MOVFF  FF2,EE
27AC:  BCF    FF2.7
27AE:  CALL   1932
27B2:  TBLRD*+
27B4:  MOVFF  FF5,03
27B8:  BTFSC  xEE.7
27BA:  BSF    FF2.7
27BC:  MOVWF  xEC
27BE:  MOVFF  03,ED
....................    EP_BDxCNT_O(endpoint)=len; 
27C2:  MOVF   xE9,W
27C4:  MULLW  08
27C6:  MOVF   FF3,W
27C8:  ADDLW  01
27CA:  MOVWF  01
27CC:  MOVLW  04
27CE:  MOVWF  03
27D0:  BTFSC  FD8.0
27D2:  INCF   03,F
27D4:  MOVFF  01,FE9
27D8:  MOVFF  03,FEA
27DC:  MOVFF  EC,FEF
....................    if (bit_test(len,8)) {bit_set(i,0);} 
27E0:  BTFSC  xED.0
27E2:  BSF    xEB.0
....................    if (bit_test(len,9)) {bit_set(i,1);} 
27E4:  BTFSC  xED.1
27E6:  BSF    xEB.1
....................  
....................  
....................    EP_BDxST_O(endpoint)=i; 
27E8:  MOVF   xE9,W
27EA:  MULLW  08
27EC:  MOVFF  FF3,01
27F0:  MOVLW  04
27F2:  MOVFF  01,FE9
27F6:  MOVWF  FEA
27F8:  MOVFF  EB,FEF
.................... } 
27FC:  RETLW  00
....................  
.................... int16 usb_rx_packet_size(int8 endpoint) { 
....................    return(EP_BDxCNT_O(endpoint)); 
*
2938:  MOVF   xEA,W
293A:  MULLW  08
293C:  MOVF   FF3,W
293E:  ADDLW  01
2940:  MOVWF  01
2942:  MOVLW  04
2944:  MOVWF  03
2946:  BTFSC  FD8.0
2948:  INCF   03,F
294A:  MOVFF  01,FE9
294E:  MOVFF  03,FEA
2952:  CLRF   03
2954:  MOVFF  FEF,01
2958:  MOVFF  03,02
.................... } 
295C:  GOTO   296A (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet_buffer(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC RAM. 
.................... /*          Does not mark the endpoint as ready for more data.  Once you are 
.................... /*          done with data, call usb_flush_out() to mark the endpoint ready 
.................... /*          to receive more data. 
.................... /* 
.................... /********************************************************************************/ 
.................... int16 usb_get_packet_buffer(int8 endpoint, int8 *ptr, int16 max) { 
....................    int8 * al; 
....................    int8 st; 
....................    int16 i; 
....................  
....................    al=EP_BDxADR_O(endpoint); 
....................    i=EP_BDxCNT_O(endpoint); 
....................    st=EP_BDxST_O(endpoint); 
....................  
....................    //read BC8 and BC9 
....................    if (bit_test(st,0)) {bit_set(i,8);} 
....................    if (bit_test(st,1)) {bit_set(i,9);} 
....................  
....................    if (i<max) {max=i;} 
....................  
....................    i=0; 
....................  
....................    while (i<max) { 
....................        *ptr=*al; 
....................        ptr++; 
....................        al++; 
....................        i++; 
....................    } 
....................  
....................    return(max); 
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_get_packet(endpoint, *ptr, max) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: the amount of data taken from the buffer. 
.................... /* 
.................... /*         NOTE - IF THERE IS NO PACKET TO GET YOU WILL GET INVALID RESULTS! 
.................... /*                VERIFY WITH USB_KBHIT() BEFORE YOU CALL USB_GET_PACKET()! 
.................... /* 
.................... /* Summary: Gets a packet of data from the USB buffer and puts into local PIC RAM. 
.................... /*          Until you call usb_get_packet() the data will sit in the endpoint 
.................... /*          buffer and the PC will get NAKs when it tries to write more data 
.................... /*          to the endpoint. 
.................... /* 
.................... /********************************************************************************/ 
.................... int16 usb_get_packet(int8 endpoint, int8 * ptr, int16 max) { 
....................  
....................    max=usb_get_packet_buffer(endpoint,ptr,max); 
....................    usb_flush_out(endpoint, USB_DTS_TOGGLE); 
....................  
....................    return(max); 
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_tbe(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*        ptr - where to save data to local PIC RAM 
.................... /*        max - max amount of data to receive from buffer 
.................... /* 
.................... /* Output: returns TRUE if this endpoint's IN buffer (PIC-PC) is empty and ready 
.................... /*         returns FALSE if this endpoint's IN buffer is still processing the last 
.................... /*         transmit or if this endpoint is invalid. 
.................... /* 
.................... /********************************************************************************/ 
.................... int8 usb_tbe(int8 endpoint) { 
....................    int8 st; 
....................    st=EP_BDxST_I(endpoint); 
....................    if (!bit_test(st,7)) 
....................       return(TRUE); 
....................    return(FALSE); 
.................... } 
....................  
.................... /******************************************************************************* 
.................... /* usb_stall_ep(endpoint,direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Stalls specified endpoint.  If endpoint is stalled it will send STALL packet 
.................... /*          if the host tries to access this endpoint's buffer. 
.................... /* 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK THIS 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_stall_ep(int8 endpoint) {  //done 
....................    int1 direction; 
....................    direction=bit_test(endpoint,7); 
*
254E:  BCF    xEA.0
2550:  BTFSC  xE9.7
2552:  BSF    xEA.0
....................    endpoint&=0x7F; 
2554:  BCF    xE9.7
....................    if (direction) { 
2556:  BTFSS  xEA.0
2558:  BRA    257A
....................       EP_BDxST_I(endpoint)=0x84; 
255A:  MOVF   xE9,W
255C:  MULLW  08
255E:  MOVF   FF3,W
2560:  ADDLW  04
2562:  MOVWF  01
2564:  MOVLW  04
2566:  MOVWF  03
2568:  BTFSC  FD8.0
256A:  INCF   03,F
256C:  MOVFF  01,FE9
2570:  MOVFF  03,FEA
2574:  MOVLW  84
2576:  MOVWF  FEF
....................    } 
....................    else { 
2578:  BRA    258E
....................       EP_BDxST_O(endpoint)=0x84; 
257A:  MOVF   xE9,W
257C:  MULLW  08
257E:  MOVFF  FF3,01
2582:  MOVLW  04
2584:  MOVFF  01,FE9
2588:  MOVWF  FEA
258A:  MOVLW  84
258C:  MOVWF  FEF
....................    } 
.................... } 
258E:  GOTO   2616 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_unstall_ep(endpoint, direction) 
.................... /* 
.................... /* Input: endpoint - endpoint to un-stall. 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Summary: Un-stalls endpoint. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK THIS 
.................... /********************************************************************************/ 
.................... void usb_unstall_ep(int8 endpoint) {   //done 
....................    int1 direction; 
....................    direction=bit_test(endpoint,7); 
*
250C:  BCF    xEA.0
250E:  BTFSC  xE9.7
2510:  BSF    xEA.0
....................    endpoint&=0x7F; 
2512:  BCF    xE9.7
....................    if (direction) { 
2514:  BTFSS  xEA.0
2516:  BRA    2538
....................       #if USB_IGNORE_RX_DTS 
....................       EP_BDxST_I(endpoint)=0x80; 
....................       #else 
....................       EP_BDxST_I(endpoint)=0x88; 
2518:  MOVF   xE9,W
251A:  MULLW  08
251C:  MOVF   FF3,W
251E:  ADDLW  04
2520:  MOVWF  01
2522:  MOVLW  04
2524:  MOVWF  03
2526:  BTFSC  FD8.0
2528:  INCF   03,F
252A:  MOVFF  01,FE9
252E:  MOVFF  03,FEA
2532:  MOVLW  88
2534:  MOVWF  FEF
....................       #endif 
....................    } 
....................    else { 
2536:  BRA    254A
....................       EP_BDxST_O(endpoint)=0x00; 
2538:  MOVF   xE9,W
253A:  MULLW  08
253C:  MOVFF  FF3,01
2540:  MOVLW  04
2542:  MOVFF  01,FE9
2546:  MOVWF  FEA
2548:  CLRF   FEF
....................    } 
.................... } 
254A:  GOTO   260A (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_endpoint_stalled(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /*                   top most bit indicates direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: returns a TRUE if endpoint is stalled, FALSE if it is not. 
.................... /* 
.................... /* Summary: Looks to see if an endpoint is stalled, or not.  Does not look to 
.................... /*          see if endpoint has been issued a STALL, just whether or not it is 
.................... /*          configured to STALL on the next packet.  See Set_Feature and Clear_Feature 
.................... /*          Chapter 9 requests. 
.................... /* 
.................... /* NOTE: WE ASSUME ENDPOINT IS VALID.  USB.C SHOULD CHECK THIS 
.................... /********************************************************************************/ 
.................... int1 usb_endpoint_stalled(int8 endpoint) {   //done 
....................    int1 direction; 
....................    int8 st; 
....................    direction=bit_test(endpoint,7); 
*
2592:  BCF    xEA.0
2594:  BTFSC  xE9.7
2596:  BSF    xEA.0
....................    endpoint&=0x7F; 
2598:  BCF    xE9.7
....................    if (direction) { 
259A:  BTFSS  xEA.0
259C:  BRA    25BE
....................       st=EP_BDxST_I(endpoint); 
259E:  MOVF   xE9,W
25A0:  MULLW  08
25A2:  MOVF   FF3,W
25A4:  ADDLW  04
25A6:  MOVWF  01
25A8:  MOVLW  04
25AA:  MOVWF  03
25AC:  BTFSC  FD8.0
25AE:  INCF   03,F
25B0:  MOVFF  01,FE9
25B4:  MOVFF  03,FEA
25B8:  MOVFF  FEF,EB
....................    } 
....................    else { 
25BC:  BRA    25D2
....................       st=EP_BDxST_O(endpoint); 
25BE:  MOVF   xE9,W
25C0:  MULLW  08
25C2:  MOVFF  FF3,01
25C6:  MOVLW  04
25C8:  MOVFF  01,FE9
25CC:  MOVWF  FEA
25CE:  MOVFF  FEF,EB
....................    } 
....................    return(bit_test(st,7) && bit_test(st,2)); 
25D2:  BTFSS  xEB.7
25D4:  BRA    25DA
25D6:  BTFSC  xEB.2
25D8:  BRA    25DE
25DA:  MOVLW  00
25DC:  BRA    25E0
25DE:  MOVLW  01
25E0:  MOVWF  01
.................... } 
25E2:  GOTO   262A (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_set_address(address) 
.................... /* 
.................... /* Input: address - address the host specified that we use 
.................... /* 
.................... /* Summary: Configures the USB Peripheral for the specified device address.  The host 
.................... /*          will now talk to use with the following address. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_set_address(int8 address) {   //done 
....................    UADDR=address; 
*
29A4:  MOVFF  EA,F6E
....................    if (address) { 
29A8:  MOVF   xEA,F
29AA:  BZ    29B2
....................       usb_state=USB_STATE_ADDRESS; 
29AC:  MOVLW  04
29AE:  MOVWF  1F
....................    } 
....................    else { 
29B0:  BRA    29B6
....................       usb_state=USB_STATE_POWERED; 
29B2:  MOVLW  02
29B4:  MOVWF  1F
....................    } 
.................... } 
29B6:  GOTO   29C4 (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_set_configured(config) 
.................... /* 
.................... /* Input: config - Configuration to use.  0 to uncofigure device. 
.................... /* 
.................... /* Summary: Configures or unconfigures device.  If configuring device it will 
.................... /*          enable all the endpoints the user specified for this configuration. 
.................... /*          If un-configuring device it will disable all endpoints. 
.................... /* 
.................... /*          NOTE: CCS only provides code to handle 1 configuration. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_set_configured(int config) { 
....................    int8 en; 
....................    int16 addy; 
....................    int8 new_uep; 
....................    int16 len; 
....................    int8 i; 
....................       if (config==0) { 
*
21E2:  MOVF   xE9,F
21E4:  BNZ   21EE
....................          //if config=0 then set addressed state 
....................          usb_state=USB_STATE_ADDRESS; 
21E6:  MOVLW  04
21E8:  MOVWF  1F
....................          usb_disable_endpoints(); 
21EA:  RCALL  204A
....................       } 
....................       else { 
21EC:  BRA    237C
....................          usb_state=USB_STATE_CONFIGURED; //else set configed state 
21EE:  MOVLW  05
21F0:  MOVWF  1F
....................          addy=(int16)USB_BUFFER+(2*USB_MAX_EP0_PACKET_LENGTH); 
21F2:  MOVWF  xEC
21F4:  MOVLW  80
21F6:  MOVWF  xEB
....................          for (en=1;en<16;en++) { 
21F8:  MOVLW  01
21FA:  MOVWF  xEA
21FC:  MOVF   xEA,W
21FE:  SUBLW  0F
2200:  BTFSS  FD8.0
2202:  BRA    237C
....................             new_uep=0; 
2204:  CLRF   xED
....................             if (usb_ep_rx_type[en]!=USB_ENABLE_DISABLED) { 
2206:  CLRF   03
2208:  MOVF   xEA,W
220A:  MOVFF  FF2,F1
220E:  BCF    FF2.7
2210:  CALL   18E2
2214:  BTFSC  xF1.7
2216:  BSF    FF2.7
2218:  XORLW  00
221A:  BZ    22C2
....................                new_uep=0x04; 
221C:  MOVLW  04
221E:  MOVWF  xED
....................                len=usb_ep_rx_size[en]; 
2220:  BCF    FD8.0
2222:  RLCF   xEA,W
2224:  CLRF   03
2226:  MOVFF  FF2,F1
222A:  BCF    FF2.7
222C:  CALL   1932
2230:  TBLRD*+
2232:  MOVFF  FF5,03
2236:  BTFSC  xF1.7
2238:  BSF    FF2.7
223A:  MOVWF  xEE
223C:  MOVFF  03,EF
....................                EP_BDxCNT_O(en)=len; 
2240:  MOVF   xEA,W
2242:  MULLW  08
2244:  MOVF   FF3,W
2246:  ADDLW  01
2248:  MOVWF  01
224A:  MOVLW  04
224C:  MOVWF  03
224E:  BTFSC  FD8.0
2250:  INCF   03,F
2252:  MOVFF  01,FE9
2256:  MOVFF  03,FEA
225A:  MOVFF  EE,FEF
....................                EP_BDxADR_O(en)=addy; 
225E:  MOVF   xEA,W
2260:  MULLW  08
2262:  MOVF   FF3,W
2264:  ADDLW  02
2266:  MOVWF  01
2268:  MOVLW  04
226A:  MOVWF  03
226C:  BTFSC  FD8.0
226E:  INCF   03,F
2270:  MOVFF  01,FE9
2274:  MOVFF  03,FEA
2278:  MOVFF  EC,FEC
227C:  MOVF   FED,F
227E:  MOVFF  EB,FEF
....................                addy+=usb_ep_rx_size[en]; 
2282:  BCF    FD8.0
2284:  RLCF   xEA,W
2286:  CLRF   03
2288:  MOVFF  FF2,F1
228C:  BCF    FF2.7
228E:  CALL   1932
2292:  TBLRD*+
2294:  MOVFF  FF5,03
2298:  BTFSC  xF1.7
229A:  BSF    FF2.7
229C:  ADDWF  xEB,F
229E:  MOVF   03,W
22A0:  ADDWFC xEC,F
....................                #if USB_IGNORE_RX_DTS 
....................                   i=0x80; 
....................                #else 
....................                   i=0x88; 
22A2:  MOVLW  88
22A4:  MOVWF  xF0
....................                #endif 
....................                if (bit_test(len,8)) {bit_set(i,0);} 
22A6:  BTFSC  xEF.0
22A8:  BSF    xF0.0
....................                if (bit_test(len,9)) {bit_set(i,1);} 
22AA:  BTFSC  xEF.1
22AC:  BSF    xF0.1
....................                EP_BDxST_O(en)=i; 
22AE:  MOVF   xEA,W
22B0:  MULLW  08
22B2:  MOVFF  FF3,01
22B6:  MOVLW  04
22B8:  MOVFF  01,FE9
22BC:  MOVWF  FEA
22BE:  MOVFF  F0,FEF
....................             } 
....................             if (usb_ep_tx_type[en]!=USB_ENABLE_DISABLED) { 
22C2:  CLRF   03
22C4:  MOVF   xEA,W
22C6:  MOVFF  FF2,F1
22CA:  BCF    FF2.7
22CC:  CALL   18C2
22D0:  BTFSC  xF1.7
22D2:  BSF    FF2.7
22D4:  XORLW  00
22D6:  BZ    233C
....................                new_uep|=0x02; 
22D8:  BSF    xED.1
....................                EP_BDxADR_I(en)=addy; 
22DA:  MOVF   xEA,W
22DC:  MULLW  08
22DE:  MOVF   FF3,W
22E0:  ADDLW  06
22E2:  MOVWF  01
22E4:  MOVLW  04
22E6:  MOVWF  03
22E8:  BTFSC  FD8.0
22EA:  INCF   03,F
22EC:  MOVFF  01,FE9
22F0:  MOVFF  03,FEA
22F4:  MOVFF  EC,FEC
22F8:  MOVF   FED,F
22FA:  MOVFF  EB,FEF
....................                addy+=usb_ep_tx_size[en]; 
22FE:  BCF    FD8.0
2300:  RLCF   xEA,W
2302:  CLRF   03
2304:  MOVFF  FF2,F1
2308:  BCF    FF2.7
230A:  CALL   1902
230E:  TBLRD*+
2310:  MOVFF  FF5,03
2314:  BTFSC  xF1.7
2316:  BSF    FF2.7
2318:  ADDWF  xEB,F
231A:  MOVF   03,W
231C:  ADDWFC xEC,F
....................                EP_BDxST_I(en)=0x40; 
231E:  MOVF   xEA,W
2320:  MULLW  08
2322:  MOVF   FF3,W
2324:  ADDLW  04
2326:  MOVWF  01
2328:  MOVLW  04
232A:  MOVWF  03
232C:  BTFSC  FD8.0
232E:  INCF   03,F
2330:  MOVFF  01,FE9
2334:  MOVFF  03,FEA
2338:  MOVLW  40
233A:  MOVWF  FEF
....................             } 
....................             if (new_uep==0x06) {new_uep=0x0E;} 
233C:  MOVF   xED,W
233E:  SUBLW  06
2340:  BNZ   2346
2342:  MOVLW  0E
2344:  MOVWF  xED
....................             if (usb_ep_tx_type[en]!=USB_ENABLE_ISOCHRONOUS) { 
2346:  CLRF   03
2348:  MOVF   xEA,W
234A:  MOVFF  FF2,F1
234E:  BCF    FF2.7
2350:  CALL   18C2
2354:  BTFSC  xF1.7
2356:  BSF    FF2.7
2358:  SUBLW  02
235A:  BZ    235E
....................                new_uep|=0x10; 
235C:  BSF    xED.4
....................             } 
....................             UEP(en)=new_uep; 
235E:  MOVLW  70
2360:  ADDWF  xEA,W
2362:  MOVWF  01
2364:  MOVLW  0F
2366:  MOVWF  03
2368:  BTFSC  FD8.0
236A:  INCF   03,F
236C:  MOVFF  01,FE9
2370:  MOVFF  03,FEA
2374:  MOVFF  ED,FEF
....................          } 
2378:  INCF   xEA,F
237A:  BRA    21FC
....................       } 
.................... } 
237C:  GOTO   2412 (RETURN)
....................  
.................... /// END Hardware layer functions required by USB.C 
....................  
....................  
.................... /// BEGIN USB Interrupt Service Routine 
....................  
.................... /******************************************************************************* 
.................... /* usb_handle_interrupt() 
.................... /* 
.................... /* Summary: Checks the interrupt, and acts upon event.  Processing finished 
.................... /*          tokens is the majority of this code, and is handled by usb.c 
.................... /* 
.................... /* NOTE: If you wish to change to a polling method (and not an interrupt method), 
.................... /*       then you must call this function rapidly.  If there is more than 10ms 
.................... /*       latency the PC may think the USB device is stalled and disable it. 
.................... /*       To switch to a polling method, remove the #int_usb line above this fuction. 
.................... /*       Also, goto usb_init() and remove the code that enables the USB interrupt. 
.................... /********************************************************************************/ 
.................... #int_usb 
.................... void usb_isr() { 
....................    if (usb_state==USB_STATE_DETACHED) return;   //should never happen, though 
*
2B88:  MOVF   1F,F
2B8A:  BNZ   2B8E
2B8C:  BRA    2BEC
....................    if (UIR) { 
2B8E:  MOVF   F68,F
2B90:  BZ    2BEC
....................       debug_usb(debug_putc,"\r\n\n[%X] ",UIR); 
....................       if (UIR_ACTV && UIE_ACTV) {usb_isr_activity();}  //activity detected.  (only enable after sleep) 
2B92:  BTFSS  F68.2
2B94:  BRA    2B9E
2B96:  BTFSS  F69.2
2B98:  BRA    2B9E
2B9A:  GOTO   1FEC
....................  
....................       if (UCON_SUSPND) return; 
2B9E:  BTFSS  F6D.1
2BA0:  BRA    2BA4
2BA2:  BRA    2BEC
....................  
....................       if (UIR_UERR && UIE_UERR) {usb_isr_uerr();}          //error has been detected 
2BA4:  BTFSS  F68.1
2BA6:  BRA    2BB0
2BA8:  BTFSS  F69.1
2BAA:  BRA    2BB0
2BAC:  GOTO   1FF6
....................  
....................       if (UIR_URST && UIE_URST) {usb_isr_rst();}        //usb reset has been detected 
2BB0:  BTFSS  F68.0
2BB2:  BRA    2BBC
2BB4:  BTFSS  F69.0
2BB6:  BRA    2BBC
2BB8:  GOTO   2094
....................  
....................       if (UIR_IDLE && UIE_IDLE) {usb_isr_uidle();}        //idle time, we can go to sleep 
2BBC:  BTFSS  F68.4
2BBE:  BRA    2BC8
2BC0:  BTFSS  F69.4
2BC2:  BRA    2BC8
2BC4:  GOTO   20BE
....................       if (UIR_SOF && UIE_SOF) {usb_isr_sof();} 
2BC8:  BTFSS  F68.6
2BCA:  BRA    2BD4
2BCC:  BTFSS  F69.6
2BCE:  BRA    2BD4
2BD0:  GOTO   20C8
....................       if (UIR_STALL && UIE_STALL) {usb_isr_stall();}        //a stall handshake was sent 
2BD4:  BTFSS  F68.5
2BD6:  BRA    2BE0
2BD8:  BTFSS  F69.5
2BDA:  BRA    2BE0
2BDC:  GOTO   20CE
....................  
....................       if (UIR_TRN && UIE_TRN) { 
2BE0:  BTFSS  F68.3
2BE2:  BRA    2BEC
2BE4:  BTFSS  F69.3
2BE6:  BRA    2BEC
....................          usb_isr_tok_dne(); 
2BE8:  BRA    2ABE
....................          UIR_TRN=0;    // clear the token done interrupt., 0x190.3 
2BEA:  BCF    F68.3
....................       }    //a token has been detected (majority of isrs) 
....................    } 
.................... } 
....................  
.................... //SOF interrupt not handled.  user must add this depending on application 
2BEC:  BCF    FA1.5
2BEE:  GOTO   187C
.................... void usb_isr_sof(void) { 
....................    debug_usb(debug_putc,"\r\nSOF"); 
....................    UIR_SOF=0; 
*
20C8:  BCF    F68.6
.................... } 
20CA:  GOTO   2BD4 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_disable_endpoints() 
.................... /* 
.................... /* Summary: Disables endpoints 1 thru 15 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_disable_endpoints(void) { 
....................    int8 i; 
....................    for (i=1;i<16;i++) { 
*
204A:  MOVLW  01
204C:  MOVWF  xF1
204E:  MOVF   xF1,W
2050:  SUBLW  0F
2052:  BNC   2070
....................       UEP(i)=ENDPT_DISABLED; 
2054:  MOVLW  70
2056:  ADDWF  xF1,W
2058:  MOVWF  01
205A:  MOVLW  0F
205C:  MOVWF  03
205E:  BTFSC  FD8.0
2060:  INCF   03,F
2062:  MOVFF  01,FE9
2066:  MOVFF  03,FEA
206A:  CLRF   FEF
....................    } 
206C:  INCF   xF1,F
206E:  BRA    204E
....................    __usb_kbhit_status=0; 
2070:  CLRF   1E
2072:  CLRF   1D
.................... } 
2074:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_rst() 
.................... /* 
.................... /* Summary: The host (computer) sent us a RESET command.  Reset USB device 
.................... /*          and token handler code to initial state. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_rst() { 
....................    debug_usb(debug_putc,"R"); 
....................  
....................    UEIR=0; 
*
2094:  CLRF   F6A
....................    UIR=0; 
2096:  CLRF   F68
....................    UEIE=0x9F; 
2098:  MOVLW  9F
209A:  MOVWF  F6B
....................    UIE=STANDARD_INTS & ~__USB_UIF_ACTIVE; 
209C:  MOVLW  39
209E:  MOVWF  F69
....................  
....................    UADDR=0; 
20A0:  CLRF   F6E
....................  
....................    usb_token_reset(); 
20A2:  RCALL  2022
....................  
....................    usb_disable_endpoints(); 
20A4:  RCALL  204A
....................  
....................    UEP(0)=ENDPT_CONTROL | 0x10; 
20A6:  MOVLW  16
20A8:  MOVWF  F70
....................  
....................    while (UIR_TRN) { 
20AA:  BTFSS  F68.3
20AC:  BRA    20B2
....................       UIR_TRN=0;    //do this to clear out the ustat fifo 
20AE:  BCF    F68.3
....................    } 
20B0:  BRA    20AA
....................  
....................    UCON_PKTDIS=0; //SIE token and packet processing enabled 
20B2:  BCF    F6D.4
....................  
....................    usb_init_ep0_setup(); 
20B4:  RCALL  2076
....................  
....................    usb_state=USB_STATE_DEFAULT; //put usb mcu into default state 
20B6:  MOVLW  03
20B8:  MOVWF  1F
.................... } 
20BA:  GOTO   2BBC (RETURN)
....................  
.................... /***************************************************************************** 
.................... /* usb_init_ep0_setup() 
.................... /* 
.................... /* Summary: Configure EP0 to receive setup packets 
.................... /* 
.................... /*****************************************************************************/ 
.................... void usb_init_ep0_setup(void) { 
....................     EP_BDxCNT_O(0) = USB_MAX_EP0_PACKET_LENGTH; 
*
2076:  MOVLW  40
2078:  MOVLB  4
207A:  MOVWF  x01
....................     EP_BDxADR_O(0) = USB_BUFFER; 
207C:  MOVLW  05
207E:  MOVWF  x03
2080:  CLRF   x02
....................    #if USB_IGNORE_RX_DTS 
....................     EP_BDxST_O(0) = 0x80; //give control to SIE, data toggle synch off 
....................    #else 
....................     EP_BDxST_O(0) = 0x88; //give control to SIE, DATA0, data toggle synch on 
2082:  MOVLW  88
2084:  MOVWF  x00
....................    #endif 
....................  
....................     EP_BDxST_I(0) = 0; 
2086:  CLRF   x04
....................     EP_BDxADR_I(0) = USB_BUFFER + (int16)USB_MAX_EP0_PACKET_LENGTH; 
2088:  MOVLW  05
208A:  MOVWF  x07
208C:  MOVLW  40
208E:  MOVWF  x06
.................... } 
2090:  MOVLB  0
2092:  RETLW  00
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uerr() 
.................... /* 
.................... /* Summary: The USB peripheral had an error.  If user specified, error counter 
.................... /*          will incerement.  If having problems check the status of these 8 bytes. 
.................... /* 
.................... /* NOTE: This code is not enabled by default. 
.................... /********************************************************************************/ 
.................... void usb_isr_uerr() { 
.................... #if USB_USE_ERROR_COUNTER 
....................    int ints; 
.................... #endif 
....................  
....................    debug_usb(debug_putc,"E %X ",UEIR); 
....................  
.................... #if USB_USE_ERROR_COUNTER 
....................  
....................    ints=UEIR & UEIE; //mask off the flags with the ones that are enabled 
....................  
....................    if ( bit_test(ints,0) ) { //increment pid_error counter 
....................       debug_usb(debug_putc,"PID "); 
....................       ERROR_COUNTER[0]++; 
....................    } 
....................  
....................    if ( bit_test(ints,1) ) {  //increment crc5 error counter 
....................       debug_usbdebug_putc,"CRC5 "); 
....................       ERROR_COUNTER[1]++; 
....................    } 
....................  
....................    if ( bit_test(ints,2) ) {  //increment crc16 error counter 
....................       debug_usb(debug_putc,"CRC16 "); 
....................       ERROR_COUNTER[2]++; 
....................    } 
....................  
....................    if ( bit_test(ints,3) ) {  //increment dfn8 error counter 
....................       debug_usb(debug_putc,"DFN8 "); 
....................       ERROR_COUNTER[3]++; 
....................    } 
....................  
....................    if ( bit_test(ints,4) ) {  //increment bto error counter 
....................       debug_usb(debug_putc,"BTO "); 
....................       ERROR_COUNTER[4]++; 
....................    } 
....................  
....................    if ( bit_test(ints,7) ) { //increment bts error counter 
....................       debug_usb(debug_putc,"BTS "); 
....................       ERROR_COUNTER[5]++; 
....................    } 
.................... #endif 
....................  
....................    UEIR=0; 
*
1FF6:  CLRF   F6A
....................    UIR_UERR=0; 
1FF8:  BCF    F68.1
.................... } 
1FFA:  GOTO   2BB0 (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_uidle() 
.................... /* 
.................... /* Summary: USB peripheral detected IDLE.  Put the USB peripheral to sleep. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_uidle() { 
....................    debug_usb(debug_putc,"I"); 
....................  
....................    UIE_ACTV=1;   //enable activity interrupt flag. (we are now suspended until we get an activity interrupt. nice) 
*
20BE:  BSF    F69.2
....................    UIR_IDLE=0; //clear idle interrupt flag 
20C0:  BCF    F68.4
....................    UCON_SUSPND=1; //set suspend. we are now suspended 
20C2:  BSF    F6D.1
.................... } 
20C4:  GOTO   2BC8 (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_activity() 
.................... /* 
.................... /* Summary: USB peripheral detected activity on the USB device.  Wake-up the USB 
.................... /*          peripheral. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_activity() { 
....................    debug_usb(debug_putc,"A"); 
....................  
....................    UCON_SUSPND=0; //turn off low power suspending 
*
1FEC:  BCF    F6D.1
....................    UIE_ACTV=0; //clear activity interupt enabling 
1FEE:  BCF    F69.2
....................    UIR_ACTV=0; 
1FF0:  BCF    F68.2
.................... } 
1FF2:  GOTO   2B9E (RETURN)
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_stall() 
.................... /* 
.................... /* Summary: Stall handshake detected. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_stall(void) { 
....................    debug_usb(debug_putc,"S"); 
....................  
....................    if (bit_test(UEP(0),0)) { 
*
20CE:  BTFSS  F70.0
20D0:  BRA    20D6
....................       usb_init_ep0_setup(); 
20D2:  RCALL  2076
....................       bit_clear(UEP(0),0); 
20D4:  BCF    F70.0
....................    } 
....................    UIR_STALL=0; 
20D6:  BCF    F68.5
.................... } 
20D8:  GOTO   2BE0 (RETURN)
....................  
....................  
.................... /******************************************************************************* 
.................... /* usb_isr_tok_dne() 
.................... /* 
.................... /* Summary: A Token (IN/OUT/SETUP) has been received by the USB peripheral. 
.................... /*          If a setup token on EP0 was received, run the chapter 9 code and 
.................... /*          handle the request. 
.................... /*          If an IN token on EP0 was received, continue transmitting any 
.................... /*          unfinished requests that may take more than one packet to transmit 
.................... /*          (if necessary). 
.................... /*          If an OUT token on any other EP was received, mark that EP as ready 
.................... /*          for a usb_get_packet(). 
.................... /*          Does not handle any IN or OUT tokens on EP0. 
.................... /* 
.................... /********************************************************************************/ 
.................... void usb_isr_tok_dne() { 
....................    int8 en; 
....................  
....................    en=USTAT>>3; 
*
2ABE:  RRCF   F6C,W
2AC0:  MOVWF  xE8
2AC2:  RRCF   xE8,F
2AC4:  RRCF   xE8,F
2AC6:  MOVLW  1F
2AC8:  ANDWF  xE8,F
....................  
....................          debug_usb(debug_putc,"T "); 
....................          debug_usb(debug_putc,"%X ", USTAT); 
....................  
....................       if (USTAT==USTAT_OUT_SETUP_E0) {   //new out or setup token in the buffer 
2ACA:  MOVF   F6C,F
2ACC:  BNZ   2B44
....................          debug_usb(debug_putc,"%X ", EP_BDxST_O(0)); 
....................          if ((EP_BDxST_O(0) & 0x3C)==USB_PIC_PID_SETUP) { 
2ACE:  MOVLB  4
2AD0:  MOVF   x00,W
2AD2:  ANDLW  3C
2AD4:  SUBLW  34
2AD6:  BNZ   2B0E
....................             EP_BDxST_I(0)=0;   // return the in buffer to us (dequeue any pending requests) 
2AD8:  CLRF   x04
....................  
....................             debug_usb(debug_putc,"(%U) ", EP_BDxCNT_O(0)); 
....................             debug_display_ram(EP_BDxCNT_O(0), usb_ep0_rx_buffer); 
....................  
....................             usb_isr_tok_setup_dne(); 
2ADA:  MOVLB  0
2ADC:  BRA    26EE
....................  
....................             //if setup_0_tx_size==0xFF - stall ep0 (unhandled request) 
....................             //if setup_0_tx_size==0xFE - get EP0OUT ready for a data packet, leave EP0IN alone 
....................             //else setup_0_tx_size=size of response, get EP0OUT ready for a setup packet, mark EPOIN ready for transmit 
....................             if (__setup_0_tx_size==0xFF) 
2ADE:  INCFSZ 20,W
2AE0:  BRA    2AEC
....................                usb_flush_out(0,USB_DTS_STALL); 
2AE2:  CLRF   xE9
2AE4:  MOVLW  03
2AE6:  MOVWF  xEA
2AE8:  RCALL  2718
....................             else { 
2AEA:  BRA    2B08
....................                usb_flush_out(0,USB_DTS_TOGGLE); 
2AEC:  CLRF   xE9
2AEE:  MOVLW  02
2AF0:  MOVWF  xEA
2AF2:  RCALL  2718
....................                if (__setup_0_tx_size!=0xFE) { 
2AF4:  MOVF   20,W
2AF6:  SUBLW  FE
2AF8:  BZ    2B08
....................                   usb_flush_in(0,__setup_0_tx_size,USB_DTS_USERX); 
2AFA:  CLRF   xF5
2AFC:  CLRF   xF7
2AFE:  MOVFF  20,F6
2B02:  MOVLW  04
2B04:  MOVWF  xF8
2B06:  RCALL  27FE
....................                } 
....................             } 
....................             UCON_PKTDIS=0;       // UCON,PKT_DIS ; Assuming there is nothing to dequeue, clear the packet disable bit 
2B08:  BCF    F6D.4
....................          } 
....................          else if ((EP_BDxST_O(0) & 0x3C)==USB_PIC_PID_OUT) { 
2B0A:  BRA    2B3E
2B0C:  MOVLB  4
2B0E:  MOVF   x00,W
2B10:  ANDLW  3C
2B12:  SUBLW  04
2B14:  BNZ   2B40
....................             usb_isr_tok_out_dne(0); 
2B16:  MOVLB  0
2B18:  CLRF   xE9
2B1A:  RCALL  2972
....................             usb_flush_out(0,USB_DTS_TOGGLE); 
2B1C:  CLRF   xE9
2B1E:  MOVLW  02
2B20:  MOVWF  xEA
2B22:  RCALL  2718
....................             if ((__setup_0_tx_size!=0xFE)&&(__setup_0_tx_size!=0xFF)) { 
2B24:  MOVF   20,W
2B26:  SUBLW  FE
2B28:  BZ    2B3E
2B2A:  INCFSZ 20,W
2B2C:  BRA    2B30
2B2E:  BRA    2B3E
....................                usb_flush_in(0,__setup_0_tx_size,USB_DTS_DATA1);   //send response (usually a 0len) 
2B30:  CLRF   xF5
2B32:  CLRF   xF7
2B34:  MOVFF  20,F6
2B38:  MOVLW  01
2B3A:  MOVWF  xF8
2B3C:  RCALL  27FE
2B3E:  MOVLB  4
....................             } 
....................          } 
....................       } 
....................  
....................       else if (USTAT==USTAT_IN_E0) {   //pic -> host transfer completed 
2B40:  BRA    2B82
2B42:  MOVLB  0
2B44:  MOVF   F6C,W
2B46:  SUBLW  04
2B48:  BNZ   2B6E
....................          __setup_0_tx_size=0xFF; 
2B4A:  MOVLW  FF
2B4C:  MOVWF  20
....................          usb_isr_tok_in_dne(0); 
2B4E:  CLRF   xE9
2B50:  RCALL  2A9C
....................          if (__setup_0_tx_size!=0xFF) 
2B52:  INCFSZ 20,W
2B54:  BRA    2B58
2B56:  BRA    2B68
....................             usb_flush_in(0,__setup_0_tx_size,USB_DTS_TOGGLE); 
2B58:  CLRF   xF5
2B5A:  CLRF   xF7
2B5C:  MOVFF  20,F6
2B60:  MOVLW  02
2B62:  MOVWF  xF8
2B64:  RCALL  27FE
....................          else 
2B66:  BRA    2B6C
....................             usb_init_ep0_setup(); 
2B68:  CALL   2076
....................       } 
....................  
....................       else { 
2B6C:  BRA    2B80
....................          if (!bit_test(USTAT,2)) { 
2B6E:  BTFSC  F6C.2
2B70:  BRA    2B7A
....................             usb_isr_tok_out_dne(en); 
2B72:  MOVFF  E8,E9
2B76:  RCALL  2972
....................          } 
....................          else { 
2B78:  BRA    2B80
....................             usb_isr_tok_in_dne(en); 
2B7A:  MOVFF  E8,E9
2B7E:  RCALL  2A9C
2B80:  MOVLB  4
....................          } 
....................       } 
.................... } 
2B82:  MOVLB  0
2B84:  GOTO   2BEA (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_request_send_response(len) 
.................... /* usb_request_get_data() 
.................... /* usb_request_stall() 
.................... /* 
.................... /* Input: len - size of packet to send 
.................... /* 
.................... /* Summary: After we process a SETUP request, we have 1 of three responses: 
.................... /*            1.) send a response IN packet 
.................... /*            2.) wait for followup OUT packet(s) with data 
.................... /*            3.) stall because we don't support that SETUP request 
.................... /* 
.................... /*          If we are sending data, the array usb_ep0_tx_buffer[] will hold 
.................... /*          the response and the USB Request handler code will call 
.................... /*          usb_request_send_response() to let us know how big the packet is. 
.................... /* 
.................... /*          If we are waiting for more data, usb_request_get_data() will 
.................... /*          be called by the USB request handler code to configure the EP0 OUT 
.................... /*          endpoint to be ready for more data 
.................... /* 
.................... /*          If we don't support a request, usb_request_stall() will be called 
.................... /*          by the USB request handler code to stall the endpoint 0. 
.................... /* 
.................... /***************************************************************/ 
.................... void usb_request_send_response(int len) { 
....................    __setup_0_tx_size=len; 
*
20DC:  MOVFF  EC,20
.................... } 
20E0:  RETLW  00
....................  
.................... void usb_request_get_data(void) { 
....................    __setup_0_tx_size=0xFE; 
*
2646:  MOVLW  FE
2648:  MOVWF  20
.................... } 
264A:  RETLW  00
....................  
.................... void usb_request_stall(void) { 
....................    __setup_0_tx_size=0xFF; 
*
20E2:  MOVLW  FF
20E4:  MOVWF  20
.................... } 
20E6:  RETLW  00
....................  
.................... /// END USB Interrupt Service Routine 
....................  
.................... #ENDIF 
....................  
....................  #endif 
.................... #else 
....................  #include <usbn960x.c>   //National 960x hardware layer for usb.c 
.................... #endif 
.................... #include "..\lib\bootloader\usb_desc_cdc.h"   //USB Configuration and Device descriptors for this UBS device 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                         usb_desc_cdc.h                            //// 
.................... ////                                                                   //// 
.................... //// An example set of device / configuration descriptors for use with //// 
.................... //// CCS's CDC Virtual COM Port driver (see usb_cdc.h)                 //// 
.................... ////                                                                   //// 
.................... //// Two examples are provided:                                        //// 
.................... ////      ex_usb_serial.c                                              //// 
.................... ////      ex_usb_serial2.c                                             //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// 10/28/05:                                                         //// 
.................... ////    Bulk endpoint sizes updated to allow more than 255 byte        //// 
.................... ////    packets.                                                       //// 
.................... ////    Changed device to USB 1.10                                     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
.................... #DEFINE __USB_DESCRIPTORS__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... ////                   **** DEFINITIONS *****                          //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (FALSE) - Set to TRUE if your device supports        //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            Only the 18Fxx5x USB peripheral can    //// 
.................... ////                            have a value larger than 8.            //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE  //set to false to opt for less RAM, true to opt for less ROM 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     0 
.................... #define USB_ENABLE_BULK         0x01 
.................... #define USB_ENABLE_ISOCHRONOUS  0x02 
.................... #define USB_ENABLE_INTERRUPT    0x03 
.................... #define USB_ENABLE_CONTROL      0x04 
....................  
.................... //// DO NOT CHANGE THE FOLLOWING VALUES: 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #else 
.................... struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #endif 
....................  
.................... int16 __usb_kbhit_status; 
....................  
.................... /// *** User function prototypes 
.................... void usb_wait_for_enumeration(void); 
.................... int1 usb_unermated(void); 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout); 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout); 
....................  
.................... /// *** Token and request hanlder function prototypes 
.................... void usb_token_reset(); 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_request_send_response(int len);   //always sends usb_ep0_rx_buffer[] to endpoint 0 with a toggle of DATA 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tok_in_dne(int8 endpoint); 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
....................  
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
....................  
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
....................  
.................... void usb_finish_set_address(void); 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start config descriptor 
.................... ///   right now we only support one configuration descriptor. 
.................... ///   the config, interface, class, and endpoint goes into this array. 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
....................    #DEFINE USB_TOTAL_CONFIG_LEN      67  //config+interface+class+endpoint+endpoint (2 endpoints) 
....................  
....................    const char USB_CONFIG_DESC[] = { 
....................    //IN ORDER TO COMPLY WITH WINDOWS HOSTS, THE ORDER OF THIS ARRAY MUST BE: 
....................       //    config(s) 
....................       //    interface(s) 
....................       //    class(es) 
....................       //    endpoint(s) 
....................  
....................    //config_descriptor for config index 1 
....................          USB_DESC_CONFIG_LEN, //length of descriptor size          ==0 
....................          USB_DESC_CONFIG_TYPE, //constant CONFIGURATION (CONFIGURATION 0x02)     ==1 
....................          USB_TOTAL_CONFIG_LEN,0, //size of all data returned for this config      ==2,3 
....................          2, //number of interfaces this device supports       ==4 
....................          0x01, //identifier for this configuration.  (IF we had more than one configurations)      ==5 
....................          0x00, //index of string descriptor for this configuration      ==6 
....................          0xC0, //bit 6=1 if self powered, bit 5=1 if supports remote wakeup (we don't), bits 0-4 unused and bit7=1         ==7 
....................          0x32, //maximum bus power required (maximum milliamperes/2)  (0x32 = 100mA)  ==8 
....................  
....................    //interface descriptor 0 (comm class interface) 
....................          USB_DESC_INTERFACE_LEN, //length of descriptor      =9 
....................          USB_DESC_INTERFACE_TYPE, //constant INTERFACE (INTERFACE 0x04)       =10 
....................          0x00, //number defining this interface (IF we had more than one interface)    ==11 
....................          0x00, //alternate setting     ==12 
....................          1, //number of endpoints   ==13 
....................          0x02, //class code, 02 = Comm Interface Class     ==14 
....................          0x02, //subclass code, 2 = Abstract     ==15 
....................          0x01, //protocol code, 1 = v.25ter      ==16 
....................          0x00, //index of string descriptor for interface      ==17 
....................  
....................    //class descriptor [functional header] 
....................          5, //length of descriptor    ==18 
....................          0x24, //dscriptor type (0x24 == )      ==19 
....................          0, //sub type (0=functional header) ==20 
....................          0x10,0x01, //      ==21,22 //cdc version 
....................  
....................    //class descriptor [acm header] 
....................          4, //length of descriptor    ==23 
....................          0x24, //dscriptor type (0x24 == )      ==24 
....................          2, //sub type (2=ACM)   ==25 
....................          2, //capabilities    ==26  //we support Set_Line_Coding, Set_Control_Line_State, Get_Line_Coding, and the notification Serial_State. 
....................  
....................    //class descriptor [union header] 
....................          5, //length of descriptor    ==27 
....................          0x24, //dscriptor type (0x24 == )      ==28 
....................          6, //sub type (6=union)    ==29 
....................          0, //master intf     ==30  //The interface number of the Communication or Dat a Cl ass interface, designated as the masteror controlling interface for the union. 
....................          1, //save intf0      ==31  //Interface number of first slave or associated interface in the union. * 
....................  
....................    //class descriptor [call mgmt header] 
....................          5, //length of descriptor    ==32 
....................          0x24, //dscriptor type (0x24 == )      ==33 
....................          1, //sub type (1=call mgmt)   ==34 
....................          0, //capabilities          ==35  //device does not handle call management itself 
....................          1, //data interface        ==36  //interface number of data class interface 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==37 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==38 
....................          USB_CDC_COMM_IN_ENDPOINT | 0x80, //endpoint number and direction 
....................          0x03, //transfer type supported (0x03 is interrupt)         ==40 
....................          USB_CDC_COMM_IN_SIZE,0x00, //maximum packet size supported                  ==41,42 
....................          250,  //polling interval, in ms.  (cant be smaller than 10)      ==43 
....................  
....................    //interface descriptor 1 (data class interface) 
....................          USB_DESC_INTERFACE_LEN, //length of descriptor      =44 
....................          USB_DESC_INTERFACE_TYPE, //constant INTERFACE (INTERFACE 0x04)       =45 
....................          0x01, //number defining this interface (IF we had more than one interface)    ==46 
....................          0x00, //alternate setting     ==47 
....................          2, //number of endpoints   ==48 
....................          0x0A, //class code, 0A = Data Interface Class     ==49 
....................          0x00, //subclass code      ==50 
....................          0x00, //protocol code      ==51 
....................          0x00, //index of string descriptor for interface      ==52 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==60 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==61 
....................          USB_CDC_DATA_OUT_ENDPOINT, //endpoint number and direction (0x02 = EP2 OUT)       ==62 
....................          0x02, //transfer type supported (0x02 is bulk)         ==63 
.................... //         make8(USB_CDC_DATA_OUT_SIZE,0),make8(USB_CDC_DATA_OUT_SIZE,1), //maximum packet size supported                  ==64, 65 
....................          USB_CDC_DATA_OUT_SIZE & 0xFF, (USB_CDC_DATA_OUT_SIZE >> 8) & 0xFF, //maximum packet size supported                  ==64, 65 
....................          250,  //polling interval, in ms.  (cant be smaller than 10)      ==66 
....................  
....................    //endpoint descriptor 
....................          USB_DESC_ENDPOINT_LEN, //length of descriptor                   ==53 
....................          USB_DESC_ENDPOINT_TYPE, //constant ENDPOINT (ENDPOINT 0x05)          ==54 
....................          USB_CDC_DATA_IN_ENDPOINT | 0x80, //endpoint number and direction (0x82 = EP2 IN)       ==55 
....................          0x02, //transfer type supported (0x02 is bulk)         ==56 
.................... //         make8(USB_CDC_DATA_IN_SIZE,0),make8(USB_CDC_DATA_IN_SIZE,1), //maximum packet size supported                  ==57, 58 
....................          USB_CDC_DATA_IN_SIZE & 0xFF, (USB_CDC_DATA_IN_SIZE >> 8) & 0xFF, //maximum packet size supported                  ==64, 65 
....................          250,  //polling interval, in ms.  (cant be smaller than 10)      ==59 
....................    }; 
....................  
....................    //****** BEGIN CONFIG DESCRIPTOR LOOKUP TABLES ******** 
....................    //since we can't make pointers to constants in certain pic16s, this is an offset table to find 
....................    //  a specific descriptor in the above table. 
....................  
....................    //the maximum number of interfaces seen on any config 
....................    //for example, if config 1 has 1 interface and config 2 has 2 interfaces you must define this as 2 
....................    #define USB_MAX_NUM_INTERFACES   2 
....................  
....................    //define how many interfaces there are per config.  [0] is the first config, etc. 
....................    const char USB_NUM_INTERFACES[USB_NUM_CONFIGURATIONS]={2}; 
....................  
....................    //define where to find class descriptors 
....................    //first dimension is the config number 
....................    //second dimension specifies which interface 
....................    //last dimension specifies which class in this interface to get, but most will only have 1 class per interface 
....................    //if a class descriptor is not valid, set the value to 0xFFFF 
....................    const int16 USB_CLASS_DESCRIPTORS[USB_NUM_CONFIGURATIONS][USB_MAX_NUM_INTERFACES][4]= 
....................    { 
....................    //config 1 
....................       //interface 0 
....................          //class 1-4 
....................          18,23,27,32, 
....................       //interface 1 
....................          //no classes for this interface 
....................          0xFFFF,0xFFFF,0xFFFF,0xFFFF 
....................    }; 
....................  
....................    #if (sizeof(USB_CONFIG_DESC) != USB_TOTAL_CONFIG_LEN) 
....................       #error USB_TOTAL_CONFIG_LEN not defined correctly 
....................    #endif 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start device descriptors 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
....................    const char USB_DEVICE_DESC[USB_DESC_DEVICE_LEN] ={ 
....................       //starts of with device configuration. only one possible 
....................          USB_DESC_DEVICE_LEN, //the length of this report   ==0 
....................          0x01, //the constant DEVICE (DEVICE 0x01)  ==1 
....................          0x10,0x01, //usb version in bcd  ==2,3 
....................          0x02, //class code. 0x02=Communication Device Class ==4 
....................          0x00, //subclass code ==5 
....................          0x00, //protocol code ==6 
....................          USB_MAX_EP0_PACKET_LENGTH, //max packet size for endpoint 0. (SLOW SPEED SPECIFIES 8) ==7 
....................          0xD8,0x04, //vendor id (0x04D8 is Microchip, or is it 0x0461 ??) ==8,9 
....................          0x01,0x00, //product id ==10,11 
....................          0x00,0x01, //device release number  ==12,13 
....................          0x01, //index of string description of manufacturer. therefore we point to string_1 array (see below)  ==14 
....................          0x02, //index of string descriptor of the product  ==15 
....................          0x00, //index of string descriptor of serial number  ==16 
....................          USB_NUM_CONFIGURATIONS  //number of possible configurations  ==17 
....................    }; 
....................  
....................  
.................... ////////////////////////////////////////////////////////////////// 
.................... /// 
.................... ///   start string descriptors 
.................... ///   String 0 is a special language string, and must be defined.  People in U.S.A. can leave this alone. 
.................... /// 
.................... ///   You must define the length else get_next_string_character() will not see the string 
.................... ///   Current code only supports 10 strings (0 thru 9) 
.................... /// 
.................... ////////////////////////////////////////////////////////////////// 
....................  
.................... //the offset of the starting location of each string.  offset[0] is the start of string 0, offset[1] is the start of string 1, etc. 
.................... char USB_STRING_DESC_OFFSET[]={0,4,14}; 
....................  
.................... char const USB_STRING_DESC[]={ 
....................    //string 0 
....................          4, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          0x09,0x04,   //Microsoft Defined for US-English 
....................    //string 1 
....................          10, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          'A',0, 
....................          'U',0, 
....................          'R',0, 
....................          'E',0, 
....................    //string 2 
....................          40, //length of string index 
....................          USB_DESC_STRING_TYPE, //descriptor type 0x03 (STRING) 
....................          'A',0, 
....................          'u',0, 
....................          'r',0, 
....................          'e',0, 
....................          'B',0, 
....................          'o',0, 
....................          'a',0, 
....................          'r',0, 
....................          'd',0, 
....................          ' ',0, 
....................          'U',0, 
....................          's',0, 
....................          'b',0, 
....................          '-',0, 
....................          'S',0, 
....................          'e',0, 
....................          'r',0, 
....................          'i',0, 
....................          'e',0,         
.................... }; 
....................  
.................... #ENDIF 
....................  
.................... #include <usb.c>        //handles usb setup tokens and get descriptor reports 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             usb.c                                 //// 
.................... ////                                                                   //// 
.................... //// Standard USB request and token handler code.                      //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... //// Many settings important to the USB API are defined in usb.h.      //// 
.................... //// See the documentation in usb.h about these settings.              //// 
.................... ////                                                                   //// 
.................... //// The majority of this code is called and used by the interrupt     //// 
.................... //// generated by the hardware level, and therefore it is not meant    //// 
.................... //// to be called by the user.  The following functions are of use to  //// 
.................... //// the user (for more docs on the functions, read the comments at    //// 
.................... //// each function):                                                   //// 
.................... ////                                                                   //// 
.................... ////    **********************  FUNCTIONS  ***********************     //// 
.................... ////                                                                   //// 
.................... //// usb_enumerated() - returns TRUE if device has been enumerated     //// 
.................... ////                    (configured) by host, FALSE if it has not.     //// 
.................... ////                    Do not try to use the USB peripheral until you //// 
.................... ////                    are enumerated.                                //// 
.................... ////                                                                   //// 
.................... //// usb_wait_for_enumeration() - Sits in an infinte loop until device //// 
.................... ////                              is enumerated.                       //// 
.................... ////                                                                   //// 
.................... //// usb_kbhit() - Returns true if OUT endpoint contains data from     //// 
.................... ////               host.                                               //// 
.................... ////                                                                   //// 
.................... //// usb_puts() - Sends a multiple packet message to the host          //// 
.................... ////                                                                   //// 
.................... //// usb_gets() - Gets multiple packets from the host                  //// 
.................... ////                                                                   //// 
.................... //// The rest of the functions in this file are part of the USB        //// 
.................... //// interrupt service routine and are not meant to be called by the   //// 
.................... //// user.                                                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////    This code will not create a multiple configuration device.     //// 
.................... ////    If you wish to create a multiple configuration device then you //// 
.................... ////    will have to modify these drivers.                             //// 
.................... ////                                                                   //// 
.................... ////   *************************  NOTE  **************************     //// 
.................... ////   This code does not support Get_Idle or Set_Idle HID-specific    //// 
.................... ////   requests.  These requests are optional.  If you want to support //// 
.................... ////   these requests you must provide the code yourself.  See         //// 
.................... ////   usb_isr_tkn_setup_ClassInterface() if you wish to add this      //// 
.................... ////   support.                                                        //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// If you wish to provide your own USB peripheral hardware layer, it //// 
.................... //// must include the following functions:                             //// 
.................... ////                                                                   //// 
.................... //// void usb_stall_ep(int8 endpoint);                                 //// 
.................... //// void usb_unstall_ep(int8 endpoint);                               //// 
.................... //// int1 usb_endpoint_stalled(int8 endpoint);                         //// 
.................... //// void usb_set_address(int8 address);                               //// 
.................... //// void usb_set_configured(int config);                              //// 
.................... //// int8 usb_get_packet(int8 endpoint, int8 * ptr, int8 max);         //// 
.................... //// int1 usb_put_packet(int endpoint, int * ptr, int len, USB_DTS_BIT toggle); //// 
.................... //// void usb_request_send_response(int8 len);                                //// 
.................... //// int1 usb_kbhit(int8 endpoint);                                    //// 
.................... ////                                                                   //// 
.................... //// CCS provides a USB peripheral hardware layer for PIC16C7x5        //// 
.................... //// (pic_usb.h), 18Fxx5x (pic18_usb.h) and National's USBN960x        //// 
.................... //// (usbn960x.c).  See these files for more documentation.            //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_puts() packet_size and this_packet_len changed to 16bits.    //// 
.................... ////  usb_gets() len, packet_size and this_packet_len to 16bits.       //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release.                                         //// 
.................... ////  usb_kbhit() removed, usb_kbhit() now implemented in hardware     //// 
.................... ////    layer.                                                         //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////  TODO: alot of indexing and length handling for descriptors is    //// 
.................... ////   only 8bit, so make sure all descriptor tables are less than     //// 
.................... ////   256 bytes long.                                                 //// 
.................... ////                                                                   //// 
.................... //// Apr 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_puts() doesn't need max packet size as a paremeter, uses     //// 
.................... ////   usb_ep_tx_size[] defined in usb.h                               //// 
.................... ////  usb_puts() timeout parameter now in ms, not seconds.             //// 
.................... ////  USB Stack no longer buffers incoming data.  If there is data to  //// 
.................... ////   get usb_kbhit(en) will return TRUE and the data will sit in     //// 
.................... ////   the endpoint buffer until you usb_get_packet(), which will      //// 
.................... ////   then free the endpoint buffer for more data.  This affects      //// 
.................... ////   routines such as usb_gets() and usb_kbhit().                    //// 
.................... ////  usb_gets() no longer reads buffered data (see above note),       //// 
.................... ////   now it reads multiple packets in the same way usb_puts()        //// 
.................... ////   writes multiple packets                                         //// 
.................... ////  usb_kbhit() is hardware specific, so has been moved to hardware  //// 
.................... ////   layer.                                                          //// 
.................... ////                                                                   //// 
.................... //// Nov 11th, 2004:                                                   //// 
.................... ////  No longer includes wrong descriptor header.                      //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// December 5th, 2003: Fixed a potential bug where descriptors are   //// 
.................... ////         evenly dividable by 8 (MAX_EP0_PACKET_SIZE)               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Problem with usb_puts and timeout fixed.      //// 
.................... ////                                                                   //// 
.................... //// October 28th, 2002: Typo fixed in get_next_string_character(),    //// 
.................... ////                     although it didn't cause any serious problems //// 
.................... ////                                                                   //// 
.................... //// October 25th, 2002: Another change to usb_puts() was made to fix  //// 
.................... ////                     problems with multiple packet messages        //// 
.................... //// October 29th, 2002: Fixed a problem with multiple packet string   //// 
.................... ////                     descriptors that require a 0 len packet to    //// 
.................... ////                     end message.                                  //// 
.................... ////                                                                   //// 
.................... //// October 23rd, 2002: usb_puts() will bomb out of error quicker     //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #IFNDEF __USB_DRIVER__ 
.................... #DEFINE __USB_DRIVER__ 
....................  
.................... #include <usb.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                              usb.h                                //// 
.................... ////                                                                   //// 
.................... //// Function protypes, defintions and globals used by CCS USB driver  //// 
.................... ////                                                                   //// 
.................... //// This file is part of CCS's PIC USB driver code, which includes:   //// 
.................... ////   usb_desc_*.h - an example set of config and device descriptor   //// 
.................... ////   usb.c - USB token and request handler code                      //// 
.................... ////   usb.h - definitions, prototypes and global variables            //// 
.................... ////                                                                   //// 
.................... //// The following examples are provided by CCS:                       //// 
.................... ////   ex_usb_mouse.c - A HID Mouse.                                   //// 
.................... ////   ex_usb_hid.c - A custom application using HID protocol.         //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      interfaces.                                  //// 
.................... ////   ex_usb_kbmouse.c - A HID Mouse/Keyboard combo using multiple    //// 
.................... ////                      HID Reports.                                 //// 
.................... ////   ex_usb_scope.c - A digital oscilloscope using a custom          //// 
.................... ////                    protocol requiring custom Windows drivers.     //// 
.................... ////                                                                   //// 
.................... ////                   **** DEFINITIONS *****                          //// 
.................... //// The following definitions are declared here, but can be           //// 
.................... //// overwritten in your code.  Unless needed otherwise, leave         //// 
.................... //// to default value.  If confused about a definition read the        //// 
.................... //// comments at each defintion                                        //// 
.................... ////                                                                   //// 
.................... //// USB_HID_IDLE (FALSE) - Set to TRUE if your device supports        //// 
.................... ////                            Set_Idle HID class request.  Set to    //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Idle / Get_Idle command)   //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code.  See            //// 
.................... ////                            usb_isr_tkn_setup_ClassInterface() in  //// 
.................... ////                            usb.c                                  //// 
.................... ////                                                                   //// 
.................... //// USB_HID_BOOT_PROTOCOL (FALSE) - Set to TRUE if your device supports   //// 
.................... ////                            Set_Protocl HID class request. Set to  //// 
.................... ////                            False if you do not (device will       //// 
.................... ////                            send a Wrong-state if computer         //// 
.................... ////                            sends a Set_Protocl / Get_Protocol     //// 
.................... ////                            command).                              //// 
.................... ////                            NOTE: If you set to TRUE you must      //// 
.................... ////                            provide your own code in the           //// 
.................... ////                            application that properly send boot    //// 
.................... ////                            or HID packets.                        //// 
.................... ////                                                                   //// 
.................... //// USB_MAX_EP0_PACKET_LENGTH (8) - Max Packet size for Endpoint 0.   //// 
.................... ////                            Only the 18Fxx5x USB peripheral can    //// 
.................... ////                            have a value larger than 8.            //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this RX (PC to device) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_RX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for receiving    //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_RX_ENABLE defined and    //// 
.................... ////               USB_EPx_RX_SIZE defined (non 0) to enable a RX      //// 
.................... ////               endpoint.                                           //// 
.................... ////  *** NOTE *** Endpoint 0 is always enabled.                       //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_ENABLE (USB_ENABLE_DISABLED) - Where x is the          //// 
.................... ////                         endpoint number. Change this define       //// 
.................... ////                         to specify what kind of transfer method   //// 
.................... ////                         this TX (device to PC) endpoint uses.     //// 
.................... ////                       Here is the list of valid transfer methods: //// 
.................... ////                             USB_ENABLE_CONTROL                    //// 
.................... ////                             USB_ENABLE_ISOCHRONOUS                //// 
.................... ////                             USB_ENABLE_BULK                       //// 
.................... ////                             USB_ENABLE_INTERRUPT                  //// 
.................... ////                             USB_ENABLE_DISABLED                   //// 
.................... ////                        Don't forget that you must specify the     //// 
.................... ////                        transfer method properly in your endpoint  //// 
.................... ////                        descriptor, too.                           //// 
.................... ////                                                                   //// 
.................... //// USB_EPx_TX_SIZE (0) - For some hardware it is important to know   //// 
.................... ////                       how much memory to reserve for transmitting //// 
.................... ////                       packets.                                    //// 
.................... ////                                                                   //// 
.................... ////  *** NOTE *** You must have both USB_EPx_TX_ENABLE defined and    //// 
.................... ////               USB_EPx_TX_SIZE defined (non 0) to enable a TX      //// 
.................... ////               endpoint.                                           //// 
.................... ////                                                                   //// 
.................... ////                                                                   //// 
.................... //// USB_HID_DEVICE (TRUE) - HID devices require extra code to handle  //// 
.................... ////                         HID requests.  You can disable to save    //// 
.................... ////                         ROM space if you are not using a HID      //// 
.................... ////                         device.  If you are not using a HID       //// 
.................... ////                         device you must provide your own O/S      //// 
.................... ////                         (Windows) driver.                         //// 
.................... ////                                                                   //// 
.................... //// The other definitions should not be changed.                      //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                   //// 
.................... //// Version History:                                                  //// 
.................... ////                                                                   //// 
.................... //// July 13th, 2005:                                                  //// 
.................... ////  usb_ep_tx_size[] and usb_ep_rx_size[] changed to 16bits          //// 
.................... ////                                                                   //// 
.................... //// June 20th, 2005:                                                  //// 
.................... ////  Initial 18fxx5x release                                          //// 
.................... ////                                                                   //// 
.................... //// May 13th, 2005:                                                   //// 
.................... ////  Beta release, only works with 18Fxx5x hardware layer.            //// 
.................... ////  Now supports multiple interfaces (many defines in descriptors    //// 
.................... ////   will have to be changed, see examples)                          //// 
.................... ////                                                                   //// 
.................... //// Mar 21st, 2005:                                                   //// 
.................... ////  Initial Alpha Release with PIC18Fxx5x support.  (ONLY TESTED     //// 
.................... ////   WITH 18F4550)                                                   //// 
.................... ////  usb_gets() and usb_puts() changed (see usb.c)                    //// 
.................... ////                                                                   //// 
.................... //// June 24th, 2004:                                                  //// 
.................... ////  Optimization and cleanup.                                        //// 
.................... ////                The following definitions changed:                 //// 
.................... ////  USB_EPx_TX_ENABLE and USB_EPx_RX_ENABLE have changed. See usb.h  //// 
.................... ////  USB_CONFIG_DESCRIPTORS[] removed                                 //// 
.................... ////  USB_CONFIG_DESC_LEN changed to USB_DESC_CONFIG_LEN               //// 
.................... ////  USB_INTERFACE_DESC_LEN changed to USB_DESC_INTERFACE_LEN         //// 
.................... ////  USB_CLASS_DESC_LEN changed to USB_DESC_CLASS_LEN                 //// 
.................... ////  USB_ENDPOINT_DESC_LEN changed to USB_DESC_ENDPOINT_LEN           //// 
.................... ////  USB_CONFIG_DESC_KEY changed to USB_DESC_CONFIG_TYPE              //// 
.................... ////  USB_INTERFACE_DESC_KEY changed to USB_DESC_INTERFACE_TYPE        //// 
.................... ////  USB_CLASS_DESC_KEY changed to USB_DESC_CLASS_TYPE                //// 
.................... ////  USB_ENDPOINT_DESC_KEY changed to USB_DESC_ENDPOINT_TYPE          //// 
.................... ////  USB_STRING_X[] arrays removed, see USB_STRING_DESC[] and         //// 
.................... ////                                 USB_STRING_DESC_OFFSET[]          //// 
.................... ////  dev_req, curr_config, status_device and getdesc_type global      //// 
.................... ////        variables moved into struct USB_stack_status               //// 
.................... ////                                                                   //// 
.................... //// October 15th, 2003: Support for boot protocol added.              //// 
.................... ////         Set USB_HID_BOOT_PROTOCOL to TRUE to support this.        //// 
.................... ////         The array hid_protocol[] saves which protocol mode each   //// 
.................... ////         interface is in.  It is your applications job to send     //// 
.................... ////         data that either fit the boot protocol or HID protocol.   //// 
.................... ////                                                                   //// 
.................... //// May 6th, 2003: Fixed a potential stack overflow using PCM         //// 
.................... ////                                                                   //// 
.................... //// October 29th, 2002: New definition added to USB_STATES            //// 
.................... ////                                                                   //// 
.................... //// August 2nd, 2002: Initial Public Release                          //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2005 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS    //// 
.................... //// C compiler.  This source code may only be distributed to other    //// 
.................... //// licensed users of the CCS C compiler.  No other use,              //// 
.................... //// reproduction or distribution is permitted without written         //// 
.................... //// permission.  Derivative programs created using this software      //// 
.................... //// in object code form are not restricted in any way.                //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... #IFNDEF __USB_PROTOTYPES__ 
.................... #DEFINE __USB_PROTOTYPES__ 
....................  
.................... #IFNDEF USB_HID_BOOT_PROTOCOL 
....................    #DEFINE USB_HID_BOOT_PROTOCOL FALSE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_HID_IDLE 
....................    #DEFINE USB_HID_IDLE FALSE 
.................... #ENDIF 
....................  
.................... //should the compiler add the extra HID handler code?  Defaults to yes. 
.................... #IFNDEF USB_HID_DEVICE 
....................    #DEFINE USB_HID_DEVICE TRUE 
.................... #ENDIF 
....................  
.................... #IFNDEF USB_CDC_DEVICE 
....................    #DEFINE USB_CDC_DEVICE FALSE 
.................... #ENDIF 
....................  
.................... #ifndef USB_OPT_FOR_ROM 
....................    #define USB_OPT_FOR_ROM TRUE  //set to false to opt for less RAM, true to opt for less ROM 
.................... #endif 
....................  
.................... #IFNDEF USB_MAX_EP0_PACKET_LENGTH 
....................   #DEFINE USB_MAX_EP0_PACKET_LENGTH 8 
.................... #ENDIF 
....................  
.................... //CCS only supports one configuration at this time 
.................... #DEFINE USB_NUM_CONFIGURATIONS 1 //DO NOT CHANGE 
....................  
.................... //PID values for tokens (see page 48 of USB Complete ed.1) 
.................... #define PID_IN       0x09  //device to host transactions 
.................... #define PID_OUT      0x01  //host to device transactions 
.................... #define PID_SETUP    0x0D  //host to device setup transaction 
.................... #define PID_ACK      0x02  //receiver accepts error-free data packet 
.................... #define PID_DATA0    0x03  //data packet with even sync bit 
.................... #define PID_SOF      0x05  //start of framer marker and frame number 
.................... #define PID_NAK      0x0A  //receiver can't accept data or sender cant send data or has no data to transmit 
.................... #define PID_DATA1    0x0B  //data packet with odd sync bit 
.................... #define PID_PRE      0x0C  //preamble issued by host.  enables downstream traffic to low-speed device 
.................... #define PID_STALL    0x0E  //a control request isnt supported or the endpoint is halted 
....................  
.................... //Key which identifies descritpors 
.................... #DEFINE USB_DESC_DEVICE_TYPE     0x01  //#DEFINE USB_DEVICE_DESC_KEY      0x01 
.................... #DEFINE USB_DESC_CONFIG_TYPE     0x02  //#DEFINE USB_CONFIG_DESC_KEY      0x02 
.................... #DEFINE USB_DESC_STRING_TYPE     0x03  //#DEFINE USB_STRING_DESC_KEY      0x03 
.................... #DEFINE USB_DESC_INTERFACE_TYPE  0x04  //#DEFINE USB_INTERFACE_DESC_KEY   0x04 
.................... #DEFINE USB_DESC_ENDPOINT_TYPE   0x05  //#DEFINE USB_ENDPOINT_DESC_KEY    0x05 
.................... #DEFINE USB_DESC_CLASS_TYPE      0x21  //#DEFINE USB_CLASS_DESC_KEY       0x21 
.................... #DEFINE USB_DESC_HIDREPORT_TYPE  0x22 
....................  
.................... //The length of each descriptor 
.................... #DEFINE USB_DESC_DEVICE_LEN      18 //#DEFINE USB_DEVICE_DESC_LEN      18 
.................... #DEFINE USB_DESC_CONFIG_LEN      9  //#DEFINE USB_CONFIG_DESC_LEN      9 
.................... #DEFINE USB_DESC_INTERFACE_LEN   9  //#DEFINE USB_INTERFACE_DESC_LEN   9 
.................... #DEFINE USB_DESC_CLASS_LEN       9  //#DEFINE USB_CLASS_DESC_LEN       9 
.................... #DEFINE USB_DESC_ENDPOINT_LEN    7  //#DEFINE USB_ENDPOINT_DESC_LEN    7 
....................  
.................... //Standard USB Setup bRequest Codes 
.................... #define USB_STANDARD_REQUEST_GET_STATUS         0x00 
.................... #define USB_STANDARD_REQUEST_CLEAR_FEATURE      0x01 
.................... #define USB_STANDARD_REQUEST_SET_FEATURE        0x03 
.................... #define USB_STANDARD_REQUEST_SET_ADDRESS        0x05 
.................... #define USB_STANDARD_REQUEST_GET_DESCRIPTOR     0x06 
.................... #define USB_STANDARD_REQUEST_SET_DESCRIPTOR     0x07 
.................... #define USB_STANDARD_REQUEST_GET_CONFIGURATION  0x08 
.................... #define USB_STANDARD_REQUEST_SET_CONFIGURATION  0x09 
.................... #define USB_STANDARD_REQUEST_GET_INTERFACE      0x0A 
.................... #define USB_STANDARD_REQUEST_SET_INTERFACE      0x0B 
.................... #define USB_STANDARD_REQUEST_SYNCH_FRAME        0x0C 
....................  
.................... //HID Class Setup bRequest Codes 
.................... #define USB_HID_REQUEST_GET_REPORT     0x01 
.................... #define USB_HID_REQUEST_GET_IDLE       0x02 
.................... #define USB_HID_REQUEST_GET_PROTOCOL   0x03 
.................... #define USB_HID_REQUEST_SET_REPORT     0x09 
.................... #define USB_HID_REQUEST_SET_IDLE       0x0A 
.................... #define USB_HID_REQUEST_SET_PROTOCOL   0x0B 
....................  
.................... //types of endpoints as defined in the descriptor 
.................... #define USB_ENDPOINT_TYPE_CONTROL      0x00 
.................... #define USB_ENDPOINT_TYPE_ISOCHRONOUS  0x01 
.................... #define USB_ENDPOINT_TYPE_BULK         0x02 
.................... #define USB_ENDPOINT_TYPE_INTERRUPT    0x03 
....................  
.................... //types of endpoints used internally in this api 
.................... #define USB_ENABLE_DISABLED     0 
.................... #define USB_ENABLE_BULK         0x01 
.................... #define USB_ENABLE_ISOCHRONOUS  0x02 
.................... #define USB_ENABLE_INTERRUPT    0x03 
.................... #define USB_ENABLE_CONTROL      0x04 
....................  
.................... //// DO NOT CHANGE THE FOLLOWING VALUES: 
....................  
.................... enum USB_STATES {GET_DESCRIPTOR=1,SET_ADDRESS=2,NONE=0}; 
....................  
.................... enum USB_DTS_BIT {USB_DTS_DATA1=1, USB_DTS_TOGGLE=2, USB_DTS_DATA0=0, 
....................                    USB_DTS_STALL=3, USB_DTS_USERX=4}; 
....................  
.................... enum USB_GETDESC_TYPES {USB_GETDESC_CONFIG_TYPE=0,USB_GETDESC_HIDREPORT_TYPE=1,USB_GETDESC_STRING_TYPE=2,USB_GETDESC_DEVICE_TYPE=3}; 
....................  
.................... #if USB_OPT_FOR_ROM 
.................... struct { 
....................    USB_STATES dev_req;   //what did the last setup token set us up to do?.  init at none 
....................    int  curr_config;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #else 
.................... struct { 
....................    USB_STATES dev_req:2;   //what did the last setup token set us up to do?.  init at none 
....................    int  Curr_config:2;  //our current config.  start at none/powered (NOT THAT THIS LIMITS US TO 3 CONFIGURATIONS) 
....................    int status_device:2; //Holds our state for Set_Feature and Clear_Feature 
....................    USB_GETDESC_TYPES getdesc_type:2;   //which get_descriptor() we are handling 
.................... } USB_stack_status; 
.................... #endif 
....................  
.................... int16 __usb_kbhit_status; 
....................  
.................... /// *** User function prototypes 
.................... void usb_wait_for_enumeration(void); 
.................... int1 usb_unermated(void); 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout); 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout); 
....................  
.................... /// *** Token and request hanlder function prototypes 
.................... void usb_token_reset(); 
....................  
.................... void usb_put_0len_0(void); 
.................... void usb_request_send_response(int len);   //always sends usb_ep0_rx_buffer[] to endpoint 0 with a toggle of DATA 
....................  
.................... void usb_match_registers(int8 endpoint, int16 *status, int16 *buffer, int8 *size); 
....................  
.................... void usb_isr_tok_in_dne(int8 endpoint); 
.................... void usb_isr_tok_out_dne(int8 endpoint); 
.................... void usb_isr_tok_setup_dne(void); 
....................  
.................... void usb_isr_tkn_setup_StandardEndpoint(void); 
.................... void usb_isr_tkn_setup_StandardDevice(void); 
.................... void usb_isr_tkn_setup_StandardInterface(void); 
....................  
.................... #IF USB_HID_DEVICE 
....................    void usb_isr_tkn_setup_ClassInterface(void); 
.................... #ENDIF 
....................  
.................... void usb_Get_Descriptor(void); 
.................... void usb_copy_desc_seg_to_ep(void); 
....................  
.................... void usb_finish_set_address(void); 
....................  
.................... //*** ENABLE RX ENDPOINTS AND BUFFERS 
....................  
.................... //--------- endpoint 0 defines ---------- 
.................... #define USB_EP0_TX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_ENABLE  USB_ENABLE_CONTROL 
.................... #define USB_EP0_RX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
.................... #define USB_EP0_TX_SIZE    USB_MAX_EP0_PACKET_LENGTH  //endpoint 0 is setup, and should always be the MAX_PACKET_LENGTH.  Slow speed specifies 8 
....................  
.................... //--------- endpoint 1 defines ---------- 
.................... #ifndef USB_EP1_TX_ENABLE 
....................  #define USB_EP1_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP1_RX_ENABLE 
....................  #define USB_EP1_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP1_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_RX_SIZE 
....................   #undef USB_EP1_RX_SIZE 
....................  #endif 
....................  #define USB_EP1_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_RX_SIZE 
....................   #error You enabled EP1 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP1_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP1_TX_SIZE 
....................   #undef USB_EP1_TX_SIZE 
....................  #endif 
....................  #define USB_EP1_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP1_TX_SIZE 
....................   #error You enabled EP1 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 2 defines ---------- 
.................... #ifndef USB_EP2_TX_ENABLE 
....................  #define USB_EP2_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP2_RX_ENABLE 
....................  #define USB_EP2_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP2_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_RX_SIZE 
....................   #undef USB_EP2_RX_SIZE 
....................  #endif 
....................  #define USB_EP2_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_RX_SIZE 
....................   #error You enabled EP2 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP2_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP2_TX_SIZE 
....................   #undef USB_EP2_TX_SIZE 
....................  #endif 
....................  #define USB_EP2_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP2_TX_SIZE 
....................   #error You enabled EP2 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 3 defines ---------- 
.................... #ifndef USB_EP3_TX_ENABLE 
....................  #define USB_EP3_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP3_RX_ENABLE 
....................  #define USB_EP3_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP3_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_RX_SIZE 
....................   #undef USB_EP3_RX_SIZE 
....................  #endif 
....................  #define USB_EP3_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_RX_SIZE 
....................   #error You enabled EP3 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP3_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP3_TX_SIZE 
....................   #undef USB_EP3_TX_SIZE 
....................  #endif 
....................  #define USB_EP3_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP3_TX_SIZE 
....................   #error You enabled EP3 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 4 defines ---------- 
.................... #ifndef USB_EP4_TX_ENABLE 
....................  #define USB_EP4_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP4_RX_ENABLE 
....................  #define USB_EP4_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP4_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_RX_SIZE 
....................   #undef USB_EP4_RX_SIZE 
....................  #endif 
....................  #define USB_EP4_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_RX_SIZE 
....................   #error You enabled EP4 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP4_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP4_TX_SIZE 
....................   #undef USB_EP4_TX_SIZE 
....................  #endif 
....................  #define USB_EP4_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP4_TX_SIZE 
....................   #error You enabled EP4 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 5 defines ---------- 
.................... #ifndef USB_EP5_TX_ENABLE 
....................  #define USB_EP5_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP5_RX_ENABLE 
....................  #define USB_EP5_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP5_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_RX_SIZE 
....................   #undef USB_EP5_RX_SIZE 
....................  #endif 
....................  #define USB_EP5_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_RX_SIZE 
....................   #error You enabled EP5 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP5_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP5_TX_SIZE 
....................   #undef USB_EP5_TX_SIZE 
....................  #endif 
....................  #define USB_EP5_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP5_TX_SIZE 
....................   #error You enabled EP5 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 6 defines ---------- 
.................... #ifndef USB_EP6_TX_ENABLE 
....................  #define USB_EP6_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP6_RX_ENABLE 
....................  #define USB_EP6_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP6_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_RX_SIZE 
....................   #undef USB_EP6_RX_SIZE 
....................  #endif 
....................  #define USB_EP6_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_RX_SIZE 
....................   #error You enabled EP6 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP6_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP6_TX_SIZE 
....................   #undef USB_EP6_TX_SIZE 
....................  #endif 
....................  #define USB_EP6_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP6_TX_SIZE 
....................   #error You enabled EP6 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 7 defines ---------- 
.................... #ifndef USB_EP7_TX_ENABLE 
....................  #define USB_EP7_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP7_RX_ENABLE 
....................  #define USB_EP7_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP7_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_RX_SIZE 
....................   #undef USB_EP7_RX_SIZE 
....................  #endif 
....................  #define USB_EP7_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_RX_SIZE 
....................   #error You enabled EP7 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP7_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP7_TX_SIZE 
....................   #undef USB_EP7_TX_SIZE 
....................  #endif 
....................  #define USB_EP7_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP7_TX_SIZE 
....................   #error You enabled EP7 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 8 defines ---------- 
.................... #ifndef USB_EP8_TX_ENABLE 
....................  #define USB_EP8_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP8_RX_ENABLE 
....................  #define USB_EP8_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP8_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_RX_SIZE 
....................   #undef USB_EP8_RX_SIZE 
....................  #endif 
....................  #define USB_EP8_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_RX_SIZE 
....................   #error You enabled EP8 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP8_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP8_TX_SIZE 
....................   #undef USB_EP8_TX_SIZE 
....................  #endif 
....................  #define USB_EP8_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP8_TX_SIZE 
....................   #error You enabled EP8 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 9 defines ---------- 
.................... #ifndef USB_EP9_TX_ENABLE 
....................  #define USB_EP9_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP9_RX_ENABLE 
....................  #define USB_EP9_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP9_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_RX_SIZE 
....................   #undef USB_EP9_RX_SIZE 
....................  #endif 
....................  #define USB_EP9_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_RX_SIZE 
....................   #error You enabled EP9 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP9_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP9_TX_SIZE 
....................   #undef USB_EP9_TX_SIZE 
....................  #endif 
....................  #define USB_EP9_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP9_TX_SIZE 
....................   #error You enabled EP9 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 10 defines ---------- 
.................... #ifndef USB_EP10_TX_ENABLE 
....................  #define USB_EP10_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP10_RX_ENABLE 
....................  #define USB_EP10_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP10_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_RX_SIZE 
....................   #undef USB_EP10_RX_SIZE 
....................  #endif 
....................  #define USB_EP10_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_RX_SIZE 
....................   #error You enabled EP10 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP10_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP10_TX_SIZE 
....................   #undef USB_EP10_TX_SIZE 
....................  #endif 
....................  #define USB_EP10_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP10_TX_SIZE 
....................   #error You enabled EP10 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 11 defines ---------- 
.................... #ifndef USB_EP11_TX_ENABLE 
....................  #define USB_EP11_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP11_RX_ENABLE 
....................  #define USB_EP11_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP11_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_RX_SIZE 
....................   #undef USB_EP11_RX_SIZE 
....................  #endif 
....................  #define USB_EP11_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_RX_SIZE 
....................   #error You enabled EP11 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP11_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP11_TX_SIZE 
....................   #undef USB_EP11_TX_SIZE 
....................  #endif 
....................  #define USB_EP11_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP11_TX_SIZE 
....................   #error You enabled EP11 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 12 defines ---------- 
.................... #ifndef USB_EP12_TX_ENABLE 
....................  #define USB_EP12_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP12_RX_ENABLE 
....................  #define USB_EP12_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP12_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_RX_SIZE 
....................   #undef USB_EP12_RX_SIZE 
....................  #endif 
....................  #define USB_EP12_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_RX_SIZE 
....................   #error You enabled EP12 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP12_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP12_TX_SIZE 
....................   #undef USB_EP12_TX_SIZE 
....................  #endif 
....................  #define USB_EP12_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP12_TX_SIZE 
....................   #error You enabled EP12 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 13 defines ---------- 
.................... #ifndef USB_EP13_TX_ENABLE 
....................  #define USB_EP13_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP13_RX_ENABLE 
....................  #define USB_EP13_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP13_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_RX_SIZE 
....................   #undef USB_EP13_RX_SIZE 
....................  #endif 
....................  #define USB_EP13_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_RX_SIZE 
....................   #error You enabled EP13 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP13_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP13_TX_SIZE 
....................   #undef USB_EP13_TX_SIZE 
....................  #endif 
....................  #define USB_EP13_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP13_TX_SIZE 
....................   #error You enabled EP13 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 14 defines ---------- 
.................... #ifndef USB_EP14_TX_ENABLE 
....................  #define USB_EP14_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP14_RX_ENABLE 
....................  #define USB_EP14_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP14_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_RX_SIZE 
....................   #undef USB_EP14_RX_SIZE 
....................  #endif 
....................  #define USB_EP14_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_RX_SIZE 
....................   #error You enabled EP14 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP14_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP14_TX_SIZE 
....................   #undef USB_EP14_TX_SIZE 
....................  #endif 
....................  #define USB_EP14_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP14_TX_SIZE 
....................   #error You enabled EP14 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
....................  
.................... //--------- endpoint 15 defines ---------- 
.................... #ifndef USB_EP15_TX_ENABLE 
....................  #define USB_EP15_TX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
.................... #ifndef USB_EP15_RX_ENABLE 
....................  #define USB_EP15_RX_ENABLE USB_ENABLE_DISABLED 
.................... #endif 
....................  
.................... #if USB_EP15_RX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_RX_SIZE 
....................   #undef USB_EP15_RX_SIZE 
....................  #endif 
....................  #define USB_EP15_RX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_RX_SIZE 
....................   #error You enabled EP15 for RX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... #if USB_EP15_TX_ENABLE==USB_ENABLE_DISABLED 
....................  #ifdef USB_EP15_TX_SIZE 
....................   #undef USB_EP15_TX_SIZE 
....................  #endif 
....................  #define USB_EP15_TX_SIZE 0 
.................... #else 
....................  #ifndef USB_EP15_TX_SIZE 
....................   #error You enabled EP15 for TX but didn't specify endpoint size 
....................  #endif 
.................... #endif 
....................  
.................... const int8 usb_ep_tx_type[16]={ 
....................   USB_EP0_TX_ENABLE, USB_EP1_TX_ENABLE, USB_EP2_TX_ENABLE, 
....................   USB_EP3_TX_ENABLE, USB_EP4_TX_ENABLE, USB_EP5_TX_ENABLE, 
....................   USB_EP6_TX_ENABLE, USB_EP7_TX_ENABLE, USB_EP8_TX_ENABLE, 
....................   USB_EP9_TX_ENABLE, USB_EP10_TX_ENABLE, USB_EP11_TX_ENABLE, 
....................   USB_EP12_TX_ENABLE, USB_EP13_TX_ENABLE, USB_EP14_TX_ENABLE, 
....................   USB_EP15_TX_ENABLE 
.................... }; 
....................  
.................... const int8 usb_ep_rx_type[16]={ 
....................   USB_EP0_RX_ENABLE, USB_EP1_RX_ENABLE, USB_EP2_RX_ENABLE, 
....................   USB_EP3_RX_ENABLE, USB_EP4_RX_ENABLE, USB_EP5_RX_ENABLE, 
....................   USB_EP6_RX_ENABLE, USB_EP7_RX_ENABLE, USB_EP8_RX_ENABLE, 
....................   USB_EP9_RX_ENABLE, USB_EP10_RX_ENABLE, USB_EP11_RX_ENABLE, 
....................   USB_EP12_RX_ENABLE, USB_EP13_RX_ENABLE, USB_EP14_RX_ENABLE, 
....................   USB_EP15_RX_ENABLE 
.................... }; 
....................  
.................... const int16 usb_ep_tx_size[16]={ 
....................   USB_EP0_TX_SIZE, USB_EP1_TX_SIZE, USB_EP2_TX_SIZE, 
....................   USB_EP3_TX_SIZE, USB_EP4_TX_SIZE, USB_EP5_TX_SIZE, 
....................   USB_EP6_TX_SIZE, USB_EP7_TX_SIZE, USB_EP8_TX_SIZE, 
....................   USB_EP9_TX_SIZE, USB_EP10_TX_SIZE, USB_EP11_TX_SIZE, 
....................   USB_EP12_TX_SIZE, USB_EP13_TX_SIZE, USB_EP14_TX_SIZE, 
....................   USB_EP15_TX_SIZE 
.................... }; 
....................  
.................... const int16 usb_ep_rx_size[16]={ 
....................   USB_EP0_RX_SIZE, USB_EP1_RX_SIZE, USB_EP2_RX_SIZE, 
....................   USB_EP3_RX_SIZE, USB_EP4_RX_SIZE, USB_EP5_RX_SIZE, 
....................   USB_EP6_RX_SIZE, USB_EP7_RX_SIZE, USB_EP8_RX_SIZE, 
....................   USB_EP9_RX_SIZE, USB_EP10_RX_SIZE, USB_EP11_RX_SIZE, 
....................   USB_EP12_RX_SIZE, USB_EP13_RX_SIZE, USB_EP14_RX_SIZE, 
....................   USB_EP15_RX_SIZE 
.................... }; 
....................  
.................... #ENDIF 
....................  
....................  
.................... #IFNDEF __USB_HARDWARE__ 
....................    #ERROR You must include USB hardware driver. 
.................... #ENDIF 
....................  
.................... #IFNDEF __USB_DESCRIPTORS__ 
....................    #ERROR You must include USB descriptors. 
.................... #ENDIF 
....................  
.................... int8 USB_address_pending;                        //save previous state because packets can take several isrs 
.................... int8 usb_getdesc_ptr; int8 usb_getdesc_len=0;             //for reading string and config descriptors 
....................  
.................... #IF USB_HID_BOOT_PROTOCOL 
.................... int8 hid_protocol[USB_NUM_HID_INTERFACES]; 
.................... #ENDIF 
....................  
.................... int8 USB_Interface[USB_MAX_NUM_INTERFACES];              //config state for all of our interfaces, NUM_INTERFACES defined with descriptors 
....................  
.................... /// BEGIN User Functions 
....................  
.................... /**************************************************************************** 
.................... /* usb_kbhit(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check 
.................... /* 
.................... /* Output: TRUE if there is new data in RX buffer, FALSE if there is not. 
.................... /* 
.................... /* Summary: Similar to kbhit(), sees if there is new data in the RX USB buffers. 
.................... /* 
.................... /*****************************************************************************/ 
.................... #define usb_kbhit(x) bit_test(__usb_kbhit_status,x) 
....................  
.................... /************************************************************** 
.................... /* usb_enumerated() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* Returns: Returns a 1 if device is configured / enumerated, 
.................... /*          Returns a 0 if device is un-configured / not enumerated. 
.................... /* 
.................... /* Summary: Use this to see if device is configured / enumerated. 
.................... /***************************************************************/ 
.................... #define usb_enumerated() (USB_stack_status.curr_config) 
....................  
.................... /************************************************************** 
.................... /* usb_wait_for_enumeration() 
.................... /* 
.................... /* Input: Global variable USB_Curr_Config 
.................... /* 
.................... /* Summary: Waits in-definately until device is configured / enumerated. 
.................... /***************************************************************/ 
.................... void usb_wait_for_enumeration(void) { 
....................    while (USB_stack_status.curr_config == 0) {restart_wdt();} 
.................... } 
....................  
.................... /**************************************************************************** 
.................... /* usb_puts(endpoint, *ptr, len, timeout) 
.................... /* 
.................... /* Inputs: endpoint - endpoint to send data out 
.................... /*         ptr - points to array of data to send 
.................... /*         len - amount of data to send 
.................... /*         timeout - time in milli-seconds, for each packet, to wait before timeout. 
.................... /*                   set to 0 for no timeout. 
.................... /* 
.................... /* Summary: Used for sending multiple packets of data as one message.  If sending 
.................... /*          only one packet it is more effecient to use only usb_put_packet() 
.................... /* 
.................... /*****************************************************************************/ 
.................... int1 usb_puts(int8 endpoint, int8 * ptr, int16 len, int8 timeout) { 
....................    int16 i=0; 
....................    int1 res; 
....................    int16 this_packet_len; 
....................    int16 packet_size; 
....................    int32 timeout_1us; 
....................  
....................    packet_size=usb_ep_tx_size[endpoint]; 
....................  
....................    //send data packets until timeout or no more packets to send 
....................    while (i < len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       if ((len - i) > packet_size) {this_packet_len=packet_size;} 
....................       else {this_packet_len=len-i;} 
....................       do { 
....................          res=usb_put_packet(endpoint,ptr + i,this_packet_len,USB_DTS_TOGGLE);   //send 64 byte packets 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................       i+=packet_size; 
....................    } 
....................  
....................  
....................    //send 0len packet if needed 
....................    if (i==len) { 
....................       timeout_1us=(int32)timeout*1000; 
....................       do { 
....................          res=usb_put_packet(endpoint,0,0,USB_DTS_TOGGLE);   //indicate end of message 
....................          if (!res) { 
....................             delay_us(1); 
....................             timeout_1us--; 
....................          } 
....................       } while (!res && timeout_1us); 
....................    } 
....................  
....................    return(res); 
.................... } 
....................  
.................... /**************************************************************************** 
.................... /* usb_gets(endpoint, ptr, max, timeout) 
.................... /* 
.................... /* Input: endpoint - endpoint to get data from 
.................... /*        ptr - place / array to store data to 
.................... /*        max - max amount of data to get from USB and store into ptr 
.................... /*         timeout - time in milliseconds, for each packet, to wait before timeout. 
.................... /*                   set to 0 for no timeout. 
.................... /* 
.................... /* Output: Amount of data returned.  It may be less than max. 
.................... /* 
.................... /* Summary: Gets data from the host.  Will get multiple-packet messages 
.................... /*          and finish when either it receives a 0-len packet or a packet 
.................... /*          of less size than maximum. 
.................... /* 
.................... /* NOTE: NOT THOUROUGHLY TESTED.  I AM NOT EVEN SURE IF THIS IS A GOOD IDEA 
.................... /* 
.................... /*****************************************************************************/ 
.................... int8 usb_gets(int8 endpoint, int8 * ptr, int16 max, int16 timeout) { 
....................    int16 ret=0; 
....................    int16 to; 
....................    int16 len; 
....................    int16 packet_size; 
....................    int16 this_packet_max; 
....................  
....................    packet_size=usb_ep_rx_size[endpoint]; 
....................  
....................    do { 
....................       if (packet_size < max) {this_packet_max=packet_size;} else {this_packet_max=max;} 
....................       to=0; 
....................       do { 
....................          if (usb_kbhit(endpoint)) { 
....................             len=usb_get_packet(endpoint,ptr,this_packet_max); 
....................             ptr+=len; 
....................             max-=len; 
....................             ret+=len; 
....................             break; 
....................          } 
....................          else { 
....................             to++; 
....................             delay_ms(1); 
....................          } 
....................       } while (to!=timeout); 
....................    } while ((len == packet_size) && (to!=timeout) && max); 
....................  
....................    return(ret); 
.................... } 
....................  
.................... /// END User Functions 
....................  
....................  
.................... /// BEGIN USB Token, standard and HID request handler (part of ISR) 
....................  
.................... /************************************************************** 
.................... /* usb_token_reset() 
.................... /* 
.................... /* Output: modifies global variables USB_Interface[], in[], usb_getdesc_ptr, 
.................... /*         usb_getdesc_len, USB_status_device, USB_dev_req 
.................... /* 
.................... /* Summary: Resets the token handler to initial (unconfigured) state. 
.................... /***************************************************************/ 
.................... void usb_token_reset() { 
....................    int i; 
....................  
....................  
....................  
....................       for (i=0;i<USB_MAX_NUM_INTERFACES;i++) { 
*
2022:  CLRF   xE8
2024:  MOVF   xE8,W
2026:  SUBLW  01
2028:  BNC   203E
....................          USB_Interface[i]=0;   //reset each interface to default 
202A:  CLRF   03
202C:  MOVF   xE8,W
202E:  ADDLW  28
2030:  MOVWF  FE9
2032:  MOVLW  00
2034:  ADDWFC 03,W
2036:  MOVWF  FEA
2038:  CLRF   FEF
....................       } 
....................  
....................   #IF USB_HID_BOOT_PROTOCOL 
....................    for (i=0;i<USB_NUM_HID_INTERFACES; i++) { 
....................        hid_protocol[i]=1; 
....................    } 
....................   #endif 
....................  
....................   #if USB_CDC_DEVICE 
203A:  INCF   xE8,F
203C:  BRA    2024
....................    usb_cdc_init(); 
203E:  RCALL  1FFE
....................   #endif 
....................  
....................     USB_stack_status.curr_config=0;      //unconfigured device 
2040:  CLRF   1A
....................  
....................     USB_stack_status.status_device=1;    //previous state.  init at none 
2042:  MOVLW  01
2044:  MOVWF  1B
....................     USB_stack_status.dev_req=NONE;       //previous token request state.  init at none 
2046:  CLRF   19
.................... } 
2048:  RETLW  00
....................  
.................... //send a 0len packet to endpoint 0 (optimization) 
.................... //notice that this doesnt return the status 
.................... #define usb_put_0len_0() usb_request_send_response(0) 
....................  
.................... /************************************************************** 
.................... /* usb_endpoint_is_valid(endpoint) 
.................... /* 
.................... /* Input: endpoint - endpoint to check. 
.................... /*                   bit 7 is direction (set is IN, clear is OUT) 
.................... /* 
.................... /* Output: TRUE if endpoint is valid, FALSE if not 
.................... /* 
.................... /* Summary: Checks the dynamic configuration to see if requested 
.................... /*          endpoint is a valid endpoint. 
.................... /***************************************************************/ 
.................... // 
.................... int1 usb_endpoint_is_valid(int8 endpoint) { 
....................    int1 direction; 
....................    direction = bit_test(endpoint,7); 
*
24BA:  BCF    xEA.0
24BC:  BTFSC  xE9.7
24BE:  BSF    xEA.0
....................    endpoint &= 0x7F; 
24C0:  BCF    xE9.7
....................    if (direction) { //IN 
24C2:  BTFSS  xEA.0
24C4:  BRA    24E8
....................       return(usb_ep_tx_type[endpoint] != USB_ENABLE_DISABLED); 
24C6:  CLRF   03
24C8:  MOVF   xE9,W
24CA:  MOVFF  FF2,EB
24CE:  BCF    FF2.7
24D0:  CALL   18C2
24D4:  BTFSC  xEB.7
24D6:  BSF    FF2.7
24D8:  XORLW  00
24DA:  BNZ   24E0
24DC:  MOVLW  00
24DE:  BRA    24E2
24E0:  MOVLW  01
24E2:  MOVWF  01
24E4:  BRA    2508
....................    } 
....................    else {   //OUT 
24E6:  BRA    2508
....................       return(usb_ep_rx_type[endpoint] != USB_ENABLE_DISABLED); 
24E8:  CLRF   03
24EA:  MOVF   xE9,W
24EC:  MOVFF  FF2,EB
24F0:  BCF    FF2.7
24F2:  CALL   18E2
24F6:  BTFSC  xEB.7
24F8:  BSF    FF2.7
24FA:  XORLW  00
24FC:  BNZ   2502
24FE:  MOVLW  00
2500:  BRA    2504
2502:  MOVLW  01
2504:  MOVWF  01
2506:  BRA    2508
....................    } 
.................... } 
2508:  GOTO   25EC (RETURN)
....................  
.................... ///---------------------------------------------------------------/// 
.................... /// Processing Message stages is the biggest portion of the ISR   /// 
.................... ///---------------------------------------------------------------/// 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_in_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint - which endpoint we are processing a setup token.  Should be 0. 
.................... /* 
.................... /* Summary: When receiving an IN token from the PC on endpoint 0 that means the 
.................... /*          host is asking for a response from a setup token, or the next packet 
.................... /*          from a currently processing token.  (For example, a 24 byte descriptor 
.................... /*          would require 3 IN tokens if the packet size is 8 bytes.)  USB_dev_req 
.................... /*          is a global variable that defines what setup token we are currently processing. 
.................... /* 
.................... /* Part of USB interrupt service routine. 
.................... /* Only checks endpoint 0. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_in_dne(int8 endpoint) { 
....................    if (endpoint==0) { 
*
2A9C:  MOVF   xE9,F
2A9E:  BNZ   2AB4
....................       if (USB_stack_status.dev_req == GET_DESCRIPTOR) {usb_copy_desc_seg_to_ep();} //check this, we are missing report descriptor? 
2AA0:  DECFSZ 19,W
2AA2:  BRA    2AAA
2AA4:  CALL   20E8
....................       else if (USB_stack_status.dev_req == SET_ADDRESS) {usb_finish_set_address();} 
2AA8:  BRA    2AB2
2AAA:  MOVF   19,W
2AAC:  SUBLW  02
2AAE:  BNZ   2AB2
2AB0:  BRA    29BA
....................    } 
....................   #if USB_CDC_DEVICE 
....................   else if (endpoint==USB_CDC_DATA_IN_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
2AB2:  BRA    2ABC
2AB4:  MOVF   xE9,W
2AB6:  SUBLW  02
2AB8:  BNZ   2ABC
....................       usb_isr_tok_in_cdc_data_dne(); 
2ABA:  BRA    2A8E
....................   } 
....................   #endif 
.................... } 
2ABC:  RETLW  00
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_out_dne(endpoint) 
.................... /* 
.................... /* Input: endpoint contains which endpoint we are receiving data. 
.................... /*        This code doesn't allow reception of data from EP0. (Add later) 
.................... /* 
.................... /* Summary: Processes out tokens (out is respective of the host, so actualy incoming 
.................... /*          to the pic), but not out setup tokens.  Data is placed into a 
.................... /*          a buffer if it is empty, and the rx flag is set.  If the buffer 
.................... /*          is not empty then the overrun bit of that EP status byte is set it. 
.................... /***************************************************************/ 
.................... void usb_isr_tok_out_dne(int8 endpoint) { 
....................    //TODO: 
....................    if (endpoint==0) { 
*
2972:  MOVF   xE9,F
2974:  BNZ   297A
....................      debug_usb(debug_putc,"TOUT 0 "); 
....................      #if USB_CDC_DEVICE 
....................       usb_isr_tok_out_cdc_control_dne(); 
2976:  BRA    28DC
....................      #else 
....................       usb_init_ep0_setup(); 
....................      #endif 
....................    } 
....................   #if USB_CDC_DEVICE 
....................    else if (endpoint==USB_CDC_DATA_OUT_ENDPOINT) { //see ex_usb_serial.c example and usb_cdc.h driver 
2978:  BRA    29A2
297A:  MOVF   xE9,W
297C:  SUBLW  02
297E:  BNZ   2984
....................       usb_isr_tok_out_cdc_data_dne(); 
2980:  BRA    2960
....................    } 
....................   #endif 
....................    else { 
2982:  BRA    29A2
....................       bit_set(__usb_kbhit_status,endpoint); 
2984:  CLRF   03
2986:  MOVLW  01
2988:  MOVWF  02
298A:  MOVF   xE9,W
298C:  MOVWF  00
298E:  BZ    299A
2990:  BCF    FD8.0
2992:  RLCF   02,F
2994:  RLCF   03,F
2996:  DECFSZ 00,F
2998:  BRA    2990
299A:  MOVF   02,W
299C:  IORWF  1D,F
299E:  MOVF   03,W
29A0:  IORWF  1E,F
....................    } 
.................... } 
29A2:  RETLW  00
....................  
....................  
.................... //---- process setup message stage -----------// 
.................... ////// HUGE - most of our code is to read setup messages //// 
....................  
.................... /************************************************************** 
.................... /* usb_isr_tok_setup_dne() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[] contains the 8 bytes of the setup packet. 
.................... /* 
.................... /* Output: The DTS we expect for the next packet on OUT 0. 
.................... /* 
.................... /* Summary: This function is the start of code that handles the setup token. 
.................... /*          We must handle all relevant requests, such as Set_Configuration, Get_Descriptor, etc. 
.................... /* 
.................... /*  usb_ep0_rx_buffer[8] now contains setup data packet, which has the following records 
.................... /*  ------------------------------------------------------------------------------------------- 
.................... /*  usb_ep0_rx_buffer[ 0 ]=bmRequestType; Where the setup packet goes 
.................... /*                              bit7   (0) host-to-device 
.................... /*                                     (1) device-to-host 
.................... /*                              bit6-5 (00) usb standard request; 
.................... /*                                     (01) class request; 
.................... /*                                     (10) vendor request 
....................                                        (11) reserved 
.................... /*                              bit4-0 (0000) device 
.................... /*                                     (0001) interface 
.................... /*                                     (0010) endpoint 
.................... /*                                     (0011) other element 
.................... /*                                     (0100) to (1111) reserved 
.................... /*  usb_ep0_rx_buffer[ 1 ]=bRequest ; the request 
.................... /*  usb_ep0_rx_buffer[2,3]=wValue ; a value which corresponds to request 
.................... /*  usb_ep0_rx_buffer[4,5]=wIndex ; could correspond to interface or endpoint... 
.................... /*  usb_ep0_rx_buffer[6,7]=wLength ; number of bytes in next data packet 
.................... /*                        for host-to-device, this exactly how many bytes in data packet 
.................... /*                        for device-to-host, this is the maximum bytes that can fit one packet 
.................... /***************************************************************/ 
.................... void usb_isr_tok_setup_dne(void) { 
....................    USB_stack_status.dev_req=NONE; // clear the device request.. 
*
26EE:  CLRF   19
....................  
....................    switch(usb_ep0_rx_buffer[0] & 0x7F) { 
26F0:  MOVLB  5
26F2:  MOVF   x00,W
26F4:  ANDLW  7F
26F6:  MOVLB  0
26F8:  BZ    2708
26FA:  XORLW  01
26FC:  BZ    270A
26FE:  XORLW  03
2700:  BZ    270C
2702:  XORLW  23
2704:  BZ    270E
2706:  BRA    2710
....................  
....................       case 0x00:  //standard to device 
....................          debug_usb(debug_putc," d"); 
....................          usb_isr_tkn_setup_StandardDevice(); 
2708:  BRA    2380
....................          break; 
....................  
....................       case 0x01:  //standard to interface 
....................          debug_usb(debug_putc," i"); 
....................          usb_isr_tkn_setup_StandardInterface(); 
270A:  BRA    2422
....................          break; 
....................  
....................       case 0x02:  //standard to endpoint 
....................          debug_usb(debug_putc," e"); 
....................          usb_isr_tkn_setup_StandardEndpoint(); 
270C:  BRA    25E6
....................          break; 
....................  
.................... #IF USB_HID_DEVICE 
....................       case 0x21:  //class specific request.  the only class this driver supports is HID 
....................          debug_usb(debug_putc," hid"); 
....................          usb_isr_tkn_setup_ClassInterface(); 
....................          break; 
.................... #endif 
....................  
.................... #if USB_CDC_DEVICE 
....................       case 0x21: 
....................          debug_usb(debug_putc," cdc"); 
....................          usb_isr_tkn_cdc(); 
270E:  BRA    264C
....................          break; 
.................... #endif 
....................       //TODO: IF YOU WANT VENDOR SPECIFC REQUEST SUPPORT YOU MUST ADD IT HERE 
....................  
....................       default: 
....................          usb_request_stall(); 
2710:  RCALL  20E2
....................          break; 
2712:  BRA    2714
....................    } 
.................... } 
2714:  GOTO   2ADE (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardDevice() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Device request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardDevice(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
*
2380:  MOVLB  5
2382:  MOVF   x01,W
2384:  MOVLB  0
2386:  BZ    23A2
2388:  XORLW  01
238A:  BZ    23B4
238C:  XORLW  02
238E:  BZ    23CC
2390:  XORLW  06
2392:  BZ    23E2
2394:  XORLW  03
2396:  BZ    23F0
2398:  XORLW  0E
239A:  BZ    23F2
239C:  XORLW  01
239E:  BZ    23FE
23A0:  BRA    241A
....................  
....................       case USB_STANDARD_REQUEST_GET_STATUS:  //0 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.status_device; 
23A2:  MOVFF  1B,540
....................             usb_ep0_tx_buffer[1]=0; 
23A6:  MOVLB  5
23A8:  CLRF   x41
....................             usb_request_send_response(2); 
23AA:  MOVLW  02
23AC:  MOVLB  0
23AE:  MOVWF  xEC
23B0:  RCALL  20DC
....................             break; 
23B2:  BRA    241E
....................  
....................       case USB_STANDARD_REQUEST_CLEAR_FEATURE:  //1 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
23B4:  MOVLB  5
23B6:  DECFSZ x02,W
23B8:  BRA    23C6
....................                debug_usb(debug_putc,"CF"); 
....................                USB_stack_status.status_device &= 1; 
23BA:  MOVLW  01
23BC:  ANDWF  1B,F
....................                usb_put_0len_0(); 
23BE:  MOVLB  0
23C0:  CLRF   xEC
23C2:  RCALL  20DC
....................             } 
....................             else 
23C4:  BRA    23CA
....................                usb_request_stall(); 
23C6:  MOVLB  0
23C8:  RCALL  20E2
....................             break; 
23CA:  BRA    241E
....................  
....................       case USB_STANDARD_REQUEST_SET_FEATURE: //3 
....................             if (usb_ep0_rx_buffer[2] == 1) { 
23CC:  MOVLB  5
23CE:  DECFSZ x02,W
23D0:  BRA    23DC
....................                debug_usb(debug_putc,"SF"); 
....................                USB_stack_status.status_device |= 2; 
23D2:  BSF    1B.1
....................                usb_put_0len_0(); 
23D4:  MOVLB  0
23D6:  CLRF   xEC
23D8:  RCALL  20DC
....................             } 
....................             else 
23DA:  BRA    23E0
....................                usb_request_stall(); 
23DC:  MOVLB  0
23DE:  RCALL  20E2
....................             break; 
23E0:  BRA    241E
....................  
....................       case USB_STANDARD_REQUEST_SET_ADDRESS: //5 
....................             debug_usb(debug_putc,"SA"); 
....................             USB_stack_status.dev_req=SET_ADDRESS; //currently processing set_address request 
23E2:  MOVLW  02
23E4:  MOVWF  19
....................             USB_address_pending=usb_ep0_rx_buffer[2]; 
23E6:  MOVFF  502,24
....................             #ifdef __USBN__   //NATIONAL part handles this differently than pic16c7x5 
....................             USB_stack_status.dev_req=NONE; //currently processing set_address request 
....................             usb_set_address(USB_address_pending); 
....................          	USB_stack_status.curr_config=0;	// make sure current configuration is 0 
....................             #endif 
....................             usb_put_0len_0(); 
23EA:  CLRF   xEC
23EC:  RCALL  20DC
....................             break; 
23EE:  BRA    241E
....................  
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: //6 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
23F0:  BRA    216C
....................             break; 
....................  
....................       case USB_STANDARD_REQUEST_GET_CONFIGURATION: //8 
....................             debug_usb(debug_putc,"GC"); 
....................             usb_ep0_tx_buffer[0]=USB_stack_status.curr_config; 
23F2:  MOVFF  1A,540
....................             usb_request_send_response(1); 
23F6:  MOVLW  01
23F8:  MOVWF  xEC
23FA:  RCALL  20DC
....................             break; 
23FC:  BRA    241E
....................  
....................       case USB_STANDARD_REQUEST_SET_CONFIGURATION: //9 
....................             if (usb_ep0_rx_buffer[2] <= USB_NUM_CONFIGURATIONS) { 
23FE:  MOVLB  5
2400:  MOVF   x02,W
2402:  SUBLW  01
2404:  BNC   2416
....................                debug_usb(debug_putc,"SC"); 
....................                USB_stack_status.curr_config=usb_ep0_rx_buffer[2]; 
2406:  MOVFF  502,1A
....................                usb_set_configured(usb_ep0_rx_buffer[2]); 
240A:  MOVFF  502,E9
240E:  MOVLB  0
2410:  BRA    21E2
....................                usb_put_0len_0(); 
2412:  CLRF   xEC
2414:  RCALL  20DC
....................             } 
....................             break; 
2416:  MOVLB  0
2418:  BRA    241E
....................  
....................       default: 
....................             usb_request_stall(); 
241A:  RCALL  20E2
....................             break; 
241C:  BRA    241E
....................    } 
.................... } 
241E:  GOTO   2714 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Interface request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardInterface(void) { 
....................    int8 curr_config; 
....................  
....................    curr_config=USB_stack_status.curr_config; 
2422:  MOVFF  1A,E9
....................  
....................    switch (usb_ep0_rx_buffer[1]) { 
2426:  MOVLB  5
2428:  MOVF   x01,W
242A:  MOVLB  0
242C:  BZ    2438
242E:  XORLW  0A
2430:  BZ    2448
2432:  XORLW  01
2434:  BZ    248E
2436:  BRA    24B2
....................       case USB_STANDARD_REQUEST_GET_STATUS: 
....................             debug_usb(debug_putc,"GS"); 
....................             usb_ep0_tx_buffer[0]=0; 
2438:  MOVLB  5
243A:  CLRF   x40
....................             usb_ep0_tx_buffer[1]=0; 
243C:  CLRF   x41
....................             usb_request_send_response(2); 
243E:  MOVLW  02
2440:  MOVLB  0
2442:  MOVWF  xEC
2444:  RCALL  20DC
....................             break; 
2446:  BRA    24B6
....................  
....................       case USB_STANDARD_REQUEST_GET_INTERFACE: 
....................             if ( curr_config && (usb_ep0_rx_buffer[4] < USB_NUM_INTERFACES[curr_config-1]) ) {   //book says only supports configed state 
2448:  MOVF   xE9,F
244A:  BZ    248A
244C:  MOVLW  01
244E:  SUBWF  xE9,W
2450:  CLRF   03
2452:  MOVFF  FF2,EB
2456:  BCF    FF2.7
2458:  CALL   19C8
245C:  BTFSC  xEB.7
245E:  BSF    FF2.7
2460:  MOVWF  01
2462:  MOVLB  5
2464:  SUBWF  x04,W
2466:  BTFSS  FD8.0
2468:  BRA    246E
246A:  MOVLB  0
246C:  BRA    248A
....................                debug_usb(debug_putc,"GI"); 
....................                usb_ep0_tx_buffer[0]=USB_Interface[usb_ep0_rx_buffer[4]];//our new outgoing byte 
246E:  CLRF   03
2470:  MOVF   x04,W
2472:  ADDLW  28
2474:  MOVWF  FE9
2476:  MOVLW  00
2478:  ADDWFC 03,W
247A:  MOVWF  FEA
247C:  MOVFF  FEF,540
....................                usb_request_send_response(1);; //send byte back 
2480:  MOVLW  01
2482:  MOVLB  0
2484:  MOVWF  xEC
2486:  RCALL  20DC
....................             } 
....................             else 
2488:  BRA    248C
....................                usb_request_stall(); 
248A:  RCALL  20E2
....................             break; 
248C:  BRA    24B6
....................  
....................       case USB_STANDARD_REQUEST_SET_INTERFACE: 
....................             if (curr_config) { //if configured state 
248E:  MOVF   xE9,F
2490:  BZ    24AE
....................                debug_usb(debug_putc,"SI"); 
....................                USB_Interface[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
2492:  CLRF   03
2494:  MOVLB  5
2496:  MOVF   x04,W
2498:  ADDLW  28
249A:  MOVWF  FE9
249C:  MOVLW  00
249E:  ADDWFC 03,W
24A0:  MOVWF  FEA
24A2:  MOVFF  502,FEF
....................                usb_put_0len_0(); 
24A6:  MOVLB  0
24A8:  CLRF   xEC
24AA:  RCALL  20DC
....................             } 
....................             else 
24AC:  BRA    24B0
....................                usb_request_stall(); 
24AE:  RCALL  20E2
....................             break; 
24B0:  BRA    24B6
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_STANDARD_REQUEST_GET_DESCRIPTOR: 
....................             debug_usb(debug_putc,"GD"); 
....................             usb_Get_Descriptor(); 
....................             break; 
.................... #endif 
....................  
.................... //      case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
.................... //      case USB_STANDARD_REQUEST_SET_FEATURE: 
.................... //                let default take care of these, goto wrongstate 
....................       default: 
....................             usb_request_stall(); 
24B2:  RCALL  20E2
....................             break; 
24B4:  BRA    24B6
....................    } 
.................... } 
24B6:  GOTO   2714 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_StandardEndpoint() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Standard Endpoint request. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_isr_tkn_setup_StandardEndpoint(void) { 
....................    if (usb_endpoint_is_valid(usb_ep0_rx_buffer[4])) { 
*
25E6:  MOVFF  504,E9
25EA:  BRA    24BA
25EC:  MOVF   01,F
25EE:  BZ    2642
....................       switch(usb_ep0_rx_buffer[1]) { 
25F0:  MOVLB  5
25F2:  MOVF   x01,W
25F4:  XORLW  01
25F6:  MOVLB  0
25F8:  BZ    2604
25FA:  XORLW  02
25FC:  BZ    2610
25FE:  XORLW  03
2600:  BZ    261C
2602:  BRA    263E
....................  
....................          case USB_STANDARD_REQUEST_CLEAR_FEATURE: 
....................                debug_usb(debug_putc,"CF"); 
....................                usb_unstall_ep(usb_ep0_rx_buffer[4]); 
2604:  MOVFF  504,E9
2608:  BRA    250C
....................                usb_put_0len_0(); 
260A:  CLRF   xEC
260C:  RCALL  20DC
....................                break; 
260E:  BRA    2642
....................  
....................          case USB_STANDARD_REQUEST_SET_FEATURE: 
....................                      debug_usb(debug_putc,"SF"); 
....................                      usb_stall_ep(usb_ep0_rx_buffer[4]); 
2610:  MOVFF  504,E9
2614:  BRA    254E
....................                      usb_put_0len_0(); 
2616:  CLRF   xEC
2618:  RCALL  20DC
....................                      break; 
261A:  BRA    2642
....................  
....................          case USB_STANDARD_REQUEST_GET_STATUS: 
....................                debug_usb(debug_putc,"GS"); 
....................                usb_ep0_tx_buffer[0]=0; 
261C:  MOVLB  5
261E:  CLRF   x40
....................                usb_ep0_tx_buffer[1]=0; 
2620:  CLRF   x41
....................                if (usb_endpoint_stalled(usb_ep0_rx_buffer[4])) { 
2622:  MOVFF  504,E9
2626:  MOVLB  0
2628:  BRA    2592
262A:  MOVF   01,F
262C:  BZ    2636
....................                   usb_ep0_tx_buffer[0]=1; 
262E:  MOVLW  01
2630:  MOVLB  5
2632:  MOVWF  x40
2634:  MOVLB  0
....................                } 
....................                usb_request_send_response(2); 
2636:  MOVLW  02
2638:  MOVWF  xEC
263A:  RCALL  20DC
....................                break; 
263C:  BRA    2642
....................  
....................          default: 
....................             usb_request_stall(); 
263E:  RCALL  20E2
....................             break; 
2640:  BRA    2642
....................       } 
....................    } 
.................... } 
2642:  GOTO   2714 (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_isr_tkn_setup_ClassInterface() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[1] == bRequest 
.................... /* 
.................... /* Summary: bmRequestType told us it was a Class request.  The only Class this drivers supports is HID. 
.................... /*          bRequest says which request.  Only certain requests are valid, 
.................... /*          if a non-valid request was made then return with an Wrong-Statue (IDLE) 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /* Only compiled if HID_DEVICE is TRUE 
.................... /***************************************************************/ 
.................... #IF USB_HID_DEVICE 
.................... void usb_isr_tkn_setup_ClassInterface(void) { 
....................    switch(usb_ep0_rx_buffer[1]) { 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_GET_PROTOCOL:  //03 
....................             debug_usb(debug_putc,"GP"); 
....................             usb_ep0_tx_buffer[0]=hid_protocol[usb_ep0_rx_buffer[4]]; 
....................             usb_request_send_response(1); 
....................             break; 
....................     #ENDIF 
....................  
....................     #IF USB_HID_BOOT_PROTOCOL 
....................       case USB_HID_REQUEST_SET_PROTOCOL:  //0b 
....................             debug_usb(debug_putc,"SP"); 
....................             hid_protocol[usb_ep0_rx_buffer[4]]=usb_ep0_rx_buffer[2]; 
....................             usb_put_0len_0(); //send 0len packet69 
....................             break; 
....................     #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_SET_IDLE:   //0a 
....................          #error TODO: if you want to support SET_IDLE, add code here 
....................    #ENDIF 
....................  
....................    #IF USB_HID_IDLE 
....................       case USB_HID_REQUEST_GET_IDLE:   //02 
....................          #error TODO: if you want to support GET_IDLE, add code here 
....................    #ENDIF 
....................  
....................       default: 
....................             usb_request_stall(); 
....................             break; 
....................    } 
.................... } 
.................... #ENDIF 
....................  
.................... /************************************************************** 
.................... /* usb_Get_Descriptor() 
.................... /* 
.................... /* Input: usb_ep0_rx_buffer[3] == wValue, which descriptor we want 
.................... /*        usb_ep0_rx_buffer[6,7] == Max length the host will accept 
.................... /* 
.................... /* Summary: Checks to see if we want a standard descriptor (Interface, Endpoint, Config, Device, String, etc.), 
.................... /*          or a class specific (HID) descriptor.  Since some pics (especially the PIC167x5) doesn't have 
.................... /*          pointers to constants we must simulate or own by setting up global registers that say 
.................... /*          which constant array to deal with, which position to start in this array, and the length. 
.................... /*          Once these globals are setup the first packet is sent.  If a descriptor takes more than one packet 
.................... /*          the PC will send an IN request to endpoint 0, and this will be handled by usb_isr_tok_in_dne() 
.................... /*          which will send the rest of the data. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
.................... void usb_Get_Descriptor() { 
....................    usb_getdesc_ptr=0; 
*
216C:  CLRF   26
....................    USB_stack_status.getdesc_type=USB_GETDESC_CONFIG_TYPE; 
216E:  CLRF   1C
....................  
....................    switch(usb_ep0_rx_buffer[3]) { 
2170:  MOVLB  5
2172:  MOVF   x03,W
2174:  XORLW  01
2176:  MOVLB  0
2178:  BZ    2184
217A:  XORLW  03
217C:  BZ    218E
217E:  XORLW  01
2180:  BZ    2194
2182:  BRA    21C2
....................       case USB_DESC_DEVICE_TYPE:    //1 
....................             usb_getdesc_len=USB_DESC_DEVICE_LEN; 
2184:  MOVLW  12
2186:  MOVWF  27
....................             USB_stack_status.getdesc_type=USB_GETDESC_DEVICE_TYPE; 
2188:  MOVLW  03
218A:  MOVWF  1C
....................             break; 
218C:  BRA    21C6
....................  
....................       //windows hosts will send a FF max len and expect you to send all configs without asking for them individually. 
....................       case USB_DESC_CONFIG_TYPE:   //2 
....................             usb_getdesc_len=USB_TOTAL_CONFIG_LEN; 
218E:  MOVLW  43
2190:  MOVWF  27
....................             break; 
2192:  BRA    21C6
....................  
....................       case USB_DESC_STRING_TYPE: //3 
....................             USB_stack_status.getdesc_type=USB_GETDESC_STRING_TYPE; 
2194:  MOVLW  02
2196:  MOVWF  1C
....................             usb_getdesc_ptr=USB_STRING_DESC_OFFSET[usb_ep0_rx_buffer[2]]; 
2198:  CLRF   03
219A:  MOVLB  5
219C:  MOVF   x02,W
219E:  ADDLW  21
21A0:  MOVWF  FE9
21A2:  MOVLW  00
21A4:  ADDWFC 03,W
21A6:  MOVWF  FEA
21A8:  MOVFF  FEF,26
....................             usb_getdesc_len=USB_STRING_DESC[usb_getdesc_ptr]; 
21AC:  CLRF   03
21AE:  MOVF   26,W
21B0:  MOVFF  FF2,E9
21B4:  BCF    FF2.7
21B6:  MOVLB  0
21B8:  RCALL  19FC
21BA:  BTFSC  xE9.7
21BC:  BSF    FF2.7
21BE:  MOVWF  27
....................             break; 
21C0:  BRA    21C6
....................  
.................... #IF USB_HID_DEVICE 
....................       case USB_DESC_CLASS_TYPE:  //0x21 
....................             usb_getdesc_ptr=USB_CLASS_DESCRIPTORS[0][0][0]; 
....................             if (usb_getdesc_ptr!=0xFF) { 
....................                usb_getdesc_len=USB_CONFIG_DESC[usb_getdesc_ptr]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
....................  
....................  
....................       case USB_DESC_HIDREPORT_TYPE: //0x22 
....................             usb_getdesc_ptr=USB_CLASS_SPECIFIC_DESC_LOOKUP[0][usb_ep0_rx_buffer[4]]; 
....................             if (usb_getdesc_ptr !=0xFF) { 
....................                USB_stack_status.getdesc_type=USB_GETDESC_HIDREPORT_TYPE; 
....................                usb_getdesc_len=USB_CLASS_SPECIFIC_DESC_LOOKUP_SIZE[0][usb_ep0_rx_buffer[4]]; 
....................                break; 
....................             } 
....................             else { 
....................                usb_request_stall(); 
....................                return; 
....................             } 
.................... #endif 
....................  
....................       default: 
....................             usb_request_stall(); 
21C2:  RCALL  20E2
....................             return; 
21C4:  BRA    21DE
....................    } 
....................    if (usb_ep0_rx_buffer[7]==0) { 
21C6:  MOVLB  5
21C8:  MOVF   x07,F
21CA:  BNZ   21D6
....................       if (usb_getdesc_len > usb_ep0_rx_buffer[6]) 
21CC:  MOVF   27,W
21CE:  SUBWF  x06,W
21D0:  BC    21D6
....................          usb_getdesc_len = usb_ep0_rx_buffer[6]; 
21D2:  MOVFF  506,27
....................    } 
....................    USB_stack_status.dev_req=GET_DESCRIPTOR; 
21D6:  MOVLW  01
21D8:  MOVWF  19
....................    usb_copy_desc_seg_to_ep(); 
21DA:  MOVLB  0
21DC:  RCALL  20E8
.................... } 
21DE:  GOTO   241E (RETURN)
....................  
.................... /************************************************************** 
.................... /* usb_finish_set_address() 
.................... /* 
.................... /* Input: USB_address_pending holds the address we were asked to set to. 
.................... /* 
.................... /* Summary: Sets the address. 
.................... /* 
.................... /* This code should only be run on the PIC USB peripheral, and not the 
.................... /* National peripheral. 
.................... /* 
.................... /* Part of usb_isr_tok_setup_dne() 
.................... /***************************************************************/ 
....................  void usb_finish_set_address() { 
....................    debug_usb(debug_putc," FSA "); 
.................... 	USB_stack_status.curr_config=0;	// make sure current configuration is 0 
*
29BA:  CLRF   1A
....................  
....................    #ifdef __PIC__ 
.................... 	USB_stack_status.dev_req=NONE;  // no request pending 
29BC:  CLRF   19
....................    usb_set_address(USB_address_pending); 
29BE:  MOVFF  24,EA
29C2:  BRA    29A4
....................    #endif 
.................... } 
29C4:  GOTO   2AB2 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... /// 
.................... /// The following function retrieve data from constant arrays.  This may 
.................... /// look un-optimized, but remember that you can't create a pointer to 
.................... /// a constant array. 
.................... /// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... void usb_copy_desc_seg_to_ep(void) { 
....................    int i=0; 
*
20E8:  CLRF   xEA
....................    char c; 
....................  
....................    while ((usb_getdesc_len)&&(i<USB_MAX_EP0_PACKET_LENGTH)) 
....................    { 
20EA:  MOVF   27,F
20EC:  BZ    2158
20EE:  MOVF   xEA,W
20F0:  SUBLW  3F
20F2:  BNC   2158
....................       switch(USB_stack_status.getdesc_type) { 
20F4:  MOVF   1C,W
20F6:  BZ    2102
20F8:  XORLW  02
20FA:  BZ    2116
20FC:  XORLW  01
20FE:  BZ    212A
2100:  BRA    213E
....................          case USB_GETDESC_CONFIG_TYPE: 
....................             c=USB_CONFIG_DESC[usb_getdesc_ptr]; 
2102:  CLRF   03
2104:  MOVF   26,W
2106:  MOVFF  FF2,EC
210A:  BCF    FF2.7
210C:  RCALL  1974
210E:  BTFSC  xEC.7
2110:  BSF    FF2.7
2112:  MOVWF  xEB
....................             break; 
2114:  BRA    213E
....................  
....................         #IF USB_HID_DEVICE 
....................          case USB_GETDESC_HIDREPORT_TYPE: 
....................             c=USB_CLASS_SPECIFIC_DESC[usb_getdesc_ptr]; 
....................             break; 
....................         #endif 
....................  
....................          case USB_GETDESC_STRING_TYPE: 
....................             c=USB_STRING_DESC[usb_getdesc_ptr]; 
2116:  CLRF   03
2118:  MOVF   26,W
211A:  MOVFF  FF2,EC
211E:  BCF    FF2.7
2120:  RCALL  19FC
2122:  BTFSC  xEC.7
2124:  BSF    FF2.7
2126:  MOVWF  xEB
....................             break; 
2128:  BRA    213E
....................  
....................          case USB_GETDESC_DEVICE_TYPE: 
....................             c=USB_DEVICE_DESC[usb_getdesc_ptr]; 
212A:  CLRF   03
212C:  MOVF   26,W
212E:  MOVFF  FF2,EC
2132:  BCF    FF2.7
2134:  RCALL  19DA
2136:  BTFSC  xEC.7
2138:  BSF    FF2.7
213A:  MOVWF  xEB
....................             break; 
213C:  BRA    213E
....................       } 
....................       usb_getdesc_ptr++; 
213E:  INCF   26,F
....................       usb_getdesc_len--; 
2140:  DECF   27,F
....................       usb_ep0_tx_buffer[i++]=c; 
2142:  MOVF   xEA,W
2144:  INCF   xEA,F
2146:  CLRF   03
2148:  ADDLW  40
214A:  MOVWF  FE9
214C:  MOVLW  05
214E:  ADDWFC 03,W
2150:  MOVWF  FEA
2152:  MOVFF  EB,FEF
....................    } 
2156:  BRA    20EA
....................  
....................    if ((!usb_getdesc_len)&&(i!=USB_MAX_EP0_PACKET_LENGTH)) { 
2158:  MOVF   27,F
215A:  BNZ   2164
215C:  MOVF   xEA,W
215E:  SUBLW  40
2160:  BZ    2164
....................          USB_stack_status.dev_req = NONE; 
2162:  CLRF   19
....................    } 
....................  
....................    usb_request_send_response(i); 
2164:  MOVFF  EA,EC
2168:  RCALL  20DC
.................... } 
216A:  RETLW  00
....................  
.................... #ENDIF 
....................  
....................  
.................... struct { 
....................         int32   dwDTERrate;   //data terminal rate, in bits per second 
....................         int8    bCharFormat;  //num of stop bits (0=1, 1=1.5, 2=2) 
....................         int8    bParityType;  //parity (0=none, 1=odd, 2=even, 3=mark, 4=space) 
....................         int8    bDataBits;    //data bits (5,6,7,8 or 16) 
.................... } usb_cdc_line_coding; 
....................  
.................... //length of time, in ms, of break signal as we received in a SendBreak message. 
.................... //if ==0xFFFF, send break signal until we receive a 0x0000. 
.................... int16 usb_cdc_break; 
....................  
.................... int8 usb_cdc_encapsulated_cmd[8]; 
....................  
.................... int8 usb_cdc_put_buffer[USB_CDC_DATA_IN_SIZE]; 
.................... int1 usb_cdc_put_buffer_free; 
.................... #if USB_CDC_DATA_IN_SIZE>=0x100 
....................  int16 usb_cdc_put_buffer_nextin=0; 
.................... // int16 usb_cdc_last_data_packet_size; 
.................... #else 
....................  int8 usb_cdc_put_buffer_nextin=0; 
.................... // int8 usb_cdc_last_data_packet_size; 
.................... #endif 
....................  
.................... struct { 
....................    int1 got; 
....................   #if USB_CDC_DATA_OUT_SIZE>=0x100 
....................    int16 len; 
....................    int16 index; 
....................   #else 
....................    int8 len; 
....................    int8 index; 
....................   #endif 
.................... } usb_cdc_get_buffer_status; 
....................  
.................... int8 usb_cdc_get_buffer_status_buffer[USB_CDC_DATA_OUT_SIZE]; 
.................... #if (defined(__PIC__)) 
....................  #if __PIC__ 
....................   //#locate usb_cdc_get_buffer_status_buffer=0x500+(2*USB_MAX_EP0_PACKET_LENGTH)+USB_CDC_COMM_IN_SIZE 
....................   #if USB_MAX_EP0_PACKET_LENGTH==8 
....................      #locate usb_cdc_get_buffer_status_buffer=0x500+24 
....................   #elif USB_MAX_EP0_PACKET_LENGTH==64 
....................      #locate usb_cdc_get_buffer_status_buffer=0x500+136 
....................   #else 
....................    #error CCS BUG WONT LET ME USE MATH IN LOCATE 
....................   #endif 
....................  #endif 
.................... #endif 
....................  
.................... int1 usb_cdc_got_set_line_coding; 
....................  
.................... struct  { 
....................    int1 dte_present; //1=DTE present, 0=DTE not present 
....................    int1 active;      //1=activate carrier, 0=deactivate carrier 
....................    int reserved:6; 
.................... } usb_cdc_carrier; 
....................  
.................... enum {USB_CDC_OUT_NOTHING=0, USB_CDC_OUT_COMMAND=1, USB_CDC_OUT_LINECODING=2, USB_CDC_WAIT_0LEN=3} __usb_cdc_state=0; 
....................  
.................... #byte INTCON=0xFF2 
.................... #bit INT_GIE=INTCON.7 
....................  
.................... //handle OUT token done interrupt on endpoint 0 [read encapsulated cmd and line coding data] 
.................... void usb_isr_tok_out_cdc_control_dne(void) { 
....................    debug_usb(debug_putc,"CDC %X ",__usb_cdc_state); 
....................  
....................    switch (__usb_cdc_state) { 
*
28DC:  MOVF   x81,W
28DE:  XORLW  01
28E0:  BZ    28E8
28E2:  XORLW  03
28E4:  BZ    290A
28E6:  BRA    292C
....................       //printf(putc_tbe,"@%X@\r\n", __usb_cdc_state); 
....................       case USB_CDC_OUT_COMMAND: 
....................          //usb_get_packet(0, usb_cdc_encapsulated_cmd, 8); 
....................          memcpy(usb_cdc_encapsulated_cmd, usb_ep0_rx_buffer,8); 
28E8:  CLRF   FEA
28EA:  MOVLW  33
28EC:  MOVWF  FE9
28EE:  MOVLW  05
28F0:  MOVWF  FE2
28F2:  CLRF   FE1
28F4:  MOVLW  08
28F6:  MOVWF  01
28F8:  MOVFF  FE6,FEE
28FC:  DECFSZ 01,F
28FE:  BRA    28F8
....................         #if USB_MAX_EP0_PACKET_LENGTH==8 
....................          __usb_cdc_state=USB_CDC_WAIT_0LEN; 
....................          usb_request_get_data(); 
....................         #else 
....................          usb_put_0len_0(); 
2900:  CLRF   xEC
2902:  CALL   20DC
....................          __usb_cdc_state=0; 
2906:  CLRF   x81
....................         #endif 
....................          break; 
2908:  BRA    2934
....................  
....................     #if USB_MAX_EP0_PACKET_LENGTH==8 
....................       case USB_CDC_WAIT_0LEN: 
....................          usb_put_0len_0(); 
....................          __usb_cdc_state=0; 
....................          break; 
....................     #endif 
....................  
....................       case USB_CDC_OUT_LINECODING: 
....................          //usb_get_packet(0, &usb_cdc_line_coding, 7); 
....................          //printf(putc_tbe,"\r\n!GSLC FIN!\r\n"); 
....................          memcpy(&usb_cdc_line_coding, usb_ep0_rx_buffer,7); 
290A:  CLRF   FEA
290C:  MOVLW  2A
290E:  MOVWF  FE9
2910:  MOVLW  05
2912:  MOVWF  FE2
2914:  CLRF   FE1
2916:  MOVLW  07
2918:  MOVWF  01
291A:  MOVFF  FE6,FEE
291E:  DECFSZ 01,F
2920:  BRA    291A
....................          __usb_cdc_state=0; 
2922:  CLRF   x81
....................          usb_put_0len_0(); 
2924:  CLRF   xEC
2926:  CALL   20DC
....................          break; 
292A:  BRA    2934
....................  
....................       default: 
....................          __usb_cdc_state=0; 
292C:  CLRF   x81
....................          usb_init_ep0_setup(); 
292E:  CALL   2076
....................          break; 
2932:  BRA    2934
....................    } 
.................... } 
2934:  GOTO   2978 (RETURN)
....................  
.................... //handle IN token on 0 (setup packet) 
.................... void usb_isr_tkn_cdc(void) { 
....................    //make sure the request goes to a CDC interface 
....................    if ((usb_ep0_rx_buffer[4] == 1) || (usb_ep0_rx_buffer[4] == 0)) { 
*
264C:  MOVLB  5
264E:  DECFSZ x04,W
2650:  BRA    2654
2652:  BRA    2658
2654:  MOVF   x04,F
2656:  BNZ   26E8
....................       //printf(putc_tbe,"!%X!\r\n", usb_ep0_rx_buffer[1]); 
....................       switch(usb_ep0_rx_buffer[1]) { 
2658:  MOVF   x01,W
265A:  MOVLB  0
265C:  BZ    2674
265E:  XORLW  01
2660:  BZ    267C
2662:  XORLW  21
2664:  BZ    269E
2666:  XORLW  01
2668:  BZ    26A8
266A:  XORLW  03
266C:  BZ    26CA
266E:  XORLW  01
2670:  BZ    26D4
2672:  BRA    26E2
....................          case 0x00:  //send_encapsulated_command 
....................             __usb_cdc_state=USB_CDC_OUT_COMMAND; 
2674:  MOVLW  01
2676:  MOVWF  x81
....................             usb_request_get_data(); 
2678:  RCALL  2646
....................             break; 
267A:  BRA    26E6
....................  
....................          case 0x01:  //get_encapsulated_command 
....................             memcpy(usb_ep0_tx_buffer, usb_cdc_encapsulated_cmd, 8); 
267C:  MOVLW  05
267E:  MOVWF  FEA
2680:  MOVLW  40
2682:  MOVWF  FE9
2684:  CLRF   FE2
2686:  MOVLW  33
2688:  MOVWF  FE1
268A:  MOVLW  08
268C:  MOVWF  01
268E:  MOVFF  FE6,FEE
2692:  DECFSZ 01,F
2694:  BRA    268E
....................             usb_request_send_response(usb_ep0_rx_buffer[6]);  //send wLength bytes 
2696:  MOVFF  506,EC
269A:  RCALL  20DC
....................             break; 
269C:  BRA    26E6
....................  
....................          case 0x20:  //set_line_coding 
....................             debug_usb(debug_putc,"!GSLC!"); 
....................             __usb_cdc_state=USB_CDC_OUT_LINECODING; 
269E:  MOVLW  02
26A0:  MOVWF  x81
....................             usb_cdc_got_set_line_coding=TRUE; 
26A2:  BSF    x7B.1
....................             usb_request_get_data(); 
26A4:  RCALL  2646
....................             break; 
26A6:  BRA    26E6
....................  
....................          case 0x21:  //get_line_coding 
....................             memcpy(usb_ep0_tx_buffer, &usb_cdc_line_coding, sizeof(usb_cdc_line_coding)); 
26A8:  MOVLW  05
26AA:  MOVWF  FEA
26AC:  MOVLW  40
26AE:  MOVWF  FE9
26B0:  CLRF   FE2
26B2:  MOVLW  2A
26B4:  MOVWF  FE1
26B6:  MOVLW  07
26B8:  MOVWF  01
26BA:  MOVFF  FE6,FEE
26BE:  DECFSZ 01,F
26C0:  BRA    26BA
....................             usb_request_send_response(sizeof(usb_cdc_line_coding)); //send wLength bytes 
26C2:  MOVLW  07
26C4:  MOVWF  xEC
26C6:  RCALL  20DC
....................             break; 
26C8:  BRA    26E6
....................  
....................          case 0x22:  //set_control_line_state 
....................             usb_cdc_carrier=usb_ep0_rx_buffer[2]; 
26CA:  MOVFF  502,80
....................             usb_put_0len_0(); 
26CE:  CLRF   xEC
26D0:  RCALL  20DC
....................             break; 
26D2:  BRA    26E6
....................  
....................          case 0x23:  //send_break 
....................             usb_cdc_break=make16(usb_ep0_rx_buffer[2],usb_ep0_rx_buffer[3]); 
26D4:  MOVFF  502,32
26D8:  MOVFF  503,31
....................             usb_put_0len_0(); 
26DC:  CLRF   xEC
26DE:  RCALL  20DC
....................             break; 
26E0:  BRA    26E6
....................  
....................          default: 
....................             usb_request_stall(); 
26E2:  RCALL  20E2
....................             break; 
26E4:  BRA    26E6
26E6:  MOVLB  5
....................       } 
....................    } 
.................... } 
26E8:  MOVLB  0
26EA:  GOTO   2714 (RETURN)
....................  
.................... //handle OUT token done interrupt on endpoint 3 [buffer incoming received chars] 
.................... void usb_isr_tok_out_cdc_data_dne(void) { 
....................    usb_cdc_get_buffer_status.got=TRUE; 
*
2960:  BSF    x7D.0
....................    usb_cdc_get_buffer_status.index=0; 
2962:  CLRF   x7F
.................... #if (defined(__PIC__)) 
....................    #if __PIC__ 
....................     usb_cdc_get_buffer_status.len=usb_rx_packet_size(USB_CDC_DATA_OUT_ENDPOINT); 
2964:  MOVLW  02
2966:  MOVWF  xEA
2968:  BRA    2938
296A:  MOVFF  01,7E
....................    #else 
....................     usb_cdc_get_buffer_status.len=usb_get_packet_buffer( 
....................        USB_CDC_DATA_OUT_ENDPOINT,&usb_cdc_get_buffer_status_buffer[0],USB_CDC_DATA_OUT_SIZE); 
....................    #endif 
.................... #else 
....................    usb_cdc_get_buffer_status.len=usb_get_packet_buffer( 
....................       USB_CDC_DATA_OUT_ENDPOINT,&usb_cdc_get_buffer_status_buffer[0],USB_CDC_DATA_OUT_SIZE); 
.................... #endif 
.................... } 
296E:  GOTO   2982 (RETURN)
....................  
.................... //handle IN token done interrupt on endpoint 2 [transmit buffered characters] 
.................... void usb_isr_tok_in_cdc_data_dne(void) { 
....................    if (usb_cdc_put_buffer_nextin) { 
*
2A8E:  MOVF   x7C,F
2A90:  BZ    2A96
....................       usb_cdc_flush_out_buffer(); 
2A92:  RCALL  2A6E
....................    } 
....................    //send a 0len packet if needed 
.................... //   else if (usb_cdc_last_data_packet_size==USB_CDC_DATA_IN_SIZE) { 
.................... //      usb_cdc_last_data_packet_size=0; 
.................... //      printf(putc_tbe, "FL 0\r\n"); 
.................... //      usb_put_packet(USB_CDC_DATA_IN_ENDPOINT,0,0,USB_DTS_TOGGLE); 
.................... //   } 
....................    else { 
2A94:  BRA    2A98
....................       usb_cdc_put_buffer_free=TRUE; 
2A96:  BSF    x7B.0
....................       //printf(putc_tbe, "FL DONE\r\n"); 
....................    } 
.................... } 
2A98:  GOTO   2ABC (RETURN)
....................  
.................... void usb_cdc_flush_out_buffer(void) { 
....................    if (usb_cdc_put_buffer_nextin) { 
*
2A6E:  MOVF   x7C,F
2A70:  BZ    2A8C
....................       usb_cdc_put_buffer_free=FALSE; 
2A72:  BCF    x7B.0
....................       //usb_cdc_last_data_packet_size=usb_cdc_put_buffer_nextin; 
....................       //printf(putc_tbe, "FL %U\r\n", usb_cdc_put_buffer_nextin); 
....................       usb_put_packet(USB_CDC_DATA_IN_ENDPOINT,usb_cdc_put_buffer,usb_cdc_put_buffer_nextin,USB_DTS_TOGGLE); 
2A74:  MOVLW  02
2A76:  MOVWF  xEA
2A78:  CLRF   xEC
2A7A:  MOVLW  3B
2A7C:  MOVWF  xEB
2A7E:  CLRF   xEE
2A80:  MOVFF  7C,ED
2A84:  MOVLW  02
2A86:  MOVWF  xEF
2A88:  RCALL  29C8
....................       usb_cdc_put_buffer_nextin=0; 
2A8A:  CLRF   x7C
....................    } 
.................... } 
2A8C:  RETLW  00
....................  
.................... void usb_cdc_init(void) { 
....................    usb_cdc_line_coding.dwDTERrate=9600; 
*
1FFE:  CLRF   2D
2000:  CLRF   2C
2002:  MOVLW  25
2004:  MOVWF  2B
2006:  MOVLW  80
2008:  MOVWF  2A
....................    usb_cdc_line_coding.bCharFormat=0; 
200A:  CLRF   2E
....................    usb_cdc_line_coding.bParityType=0; 
200C:  CLRF   2F
....................    usb_cdc_line_coding.bDataBits=8; 
200E:  MOVLW  08
2010:  MOVWF  30
....................    (int8)usb_cdc_carrier=0; 
2012:  CLRF   x80
....................    usb_cdc_got_set_line_coding=FALSE; 
2014:  BCF    x7B.1
....................    usb_cdc_break=0; 
2016:  CLRF   32
2018:  CLRF   31
....................    usb_cdc_put_buffer_nextin=0; 
201A:  CLRF   x7C
....................    usb_cdc_get_buffer_status.got=0; 
201C:  BCF    x7D.0
....................    usb_cdc_put_buffer_free=TRUE; 
201E:  BSF    x7B.0
.................... } 
2020:  RETLW  00
....................  
.................... ////////////////// END USB CONTROL HANDLING ////////////////////////////////// 
....................  
.................... ////////////////// BEGIN USB<->RS232 CDC LIBRARY ///////////////////////////// 
....................  
.................... char usb_cdc_getc(void) { 
....................    char c; 
....................  
....................    while (!usb_cdc_kbhit()) {} 
*
318A:  BTFSC  x7D.0
318C:  BRA    3190
318E:  BRA    318A
....................  
....................    c=usb_cdc_get_buffer_status_buffer[usb_cdc_get_buffer_status.index++]; 
3190:  MOVF   x7F,W
3192:  INCF   x7F,F
3194:  CLRF   03
3196:  ADDLW  88
3198:  MOVWF  FE9
319A:  MOVLW  05
319C:  ADDWFC 03,W
319E:  MOVWF  FEA
31A0:  MOVFF  FEF,C2
....................    if (usb_cdc_get_buffer_status.index >= usb_cdc_get_buffer_status.len) { 
31A4:  MOVF   x7E,W
31A6:  SUBWF  x7F,W
31A8:  BNC   31C2
....................       usb_cdc_get_buffer_status.got=FALSE; 
31AA:  BCF    x7D.0
31AC:  CLRF   18
31AE:  BTFSC  FF2.7
31B0:  BSF    18.7
31B2:  BCF    FF2.7
....................       usb_flush_out(USB_CDC_DATA_OUT_ENDPOINT, USB_DTS_TOGGLE); 
31B4:  MOVLW  02
31B6:  MOVWF  xE9
31B8:  MOVWF  xEA
31BA:  CALL   2718
31BE:  BTFSC  18.7
31C0:  BSF    FF2.7
....................    } 
....................  
....................    return(c); 
31C2:  MOVFF  C2,01
.................... } 
31C6:  GOTO   31CC (RETURN)
....................  
.................... void usb_cdc_putc_fast(char c) { 
....................    int1 old_gie; 
....................  
....................    //disable global interrupts 
....................    old_gie=INT_GIE; 
*
31EA:  BCF    xD5.0
31EC:  BTFSC  FF2.7
31EE:  BSF    xD5.0
....................    INT_GIE=0; 
31F0:  BCF    FF2.7
....................  
....................    if (usb_cdc_put_buffer_nextin >= USB_CDC_DATA_IN_SIZE) { 
31F2:  MOVF   x7C,W
31F4:  SUBLW  3F
31F6:  BC    31FC
....................       usb_cdc_put_buffer_nextin=USB_CDC_DATA_IN_SIZE-1;  //we just overflowed the buffer! 
31F8:  MOVLW  3F
31FA:  MOVWF  x7C
....................    } 
....................    usb_cdc_put_buffer[usb_cdc_put_buffer_nextin++]=c; 
31FC:  MOVF   x7C,W
31FE:  INCF   x7C,F
3200:  CLRF   03
3202:  ADDLW  3B
3204:  MOVWF  FE9
3206:  MOVLW  00
3208:  ADDWFC 03,W
320A:  MOVWF  FEA
320C:  MOVFF  D4,FEF
....................  
....................    //renable global interrupts 
....................    INT_GIE=old_gie; 
3210:  BCF    FF2.7
3212:  BTFSC  xD5.0
3214:  BSF    FF2.7
....................  
....................    /* 
....................    if (usb_tbe(USB_CDC_DATA_IN_ENDPOINT)) { 
....................       if (usb_cdc_put_buffer_nextin) 
....................          usb_cdc_flush_out_buffer(); 
....................    } 
....................    */ 
....................    if (usb_cdc_put_buffer_free) { 
3216:  BTFSS  x7B.0
3218:  BRA    3228
321A:  CLRF   18
321C:  BTFSC  FF2.7
321E:  BSF    18.7
3220:  BCF    FF2.7
....................       usb_cdc_flush_out_buffer(); 
3222:  RCALL  2A6E
3224:  BTFSC  18.7
3226:  BSF    FF2.7
....................    } 
.................... } 
3228:  GOTO   324C (RETURN)
....................  
.................... void usb_cdc_putc(char c) { 
....................    while (!usb_cdc_putready()) { 
322C:  MOVF   x7C,W
322E:  SUBLW  3F
3230:  BC    3246
....................       if (usb_cdc_put_buffer_free) { 
3232:  BTFSS  x7B.0
3234:  BRA    3244
3236:  CLRF   18
3238:  BTFSC  FF2.7
323A:  BSF    18.7
323C:  BCF    FF2.7
....................          usb_cdc_flush_out_buffer(); 
323E:  RCALL  2A6E
3240:  BTFSC  18.7
3242:  BSF    FF2.7
....................       } 
....................       //delay_ms(500); 
....................       //printf(putc_tbe,"TBE=%U CNT=%U LST=%U\r\n",usb_tbe(USB_CDC_DATA_IN_ENDPOINT), usb_cdc_put_buffer_nextin, usb_cdc_last_data_packet_size); 
....................    } 
3244:  BRA    322C
....................    usb_cdc_putc_fast(c); 
3246:  MOVFF  D3,D4
324A:  BRA    31EA
.................... } 
324C:  RETLW  00
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
.................... BYTE gethex1_usb() { 
....................    char digit; 
....................  
....................    digit = usb_cdc_getc(); 
....................  
....................    usb_cdc_putc(digit); 
....................  
....................    if(digit<='9') 
....................      return(digit-'0'); 
....................    else 
....................      return((toupper(digit)-'A')+10); 
.................... } 
....................  
.................... BYTE gethex_usb() { 
....................    int lo,hi; 
....................  
....................    hi = gethex1_usb(); 
....................    lo = gethex1_usb(); 
....................    if(lo==0xdd) 
....................      return(hi); 
....................    else 
....................      return( hi*16+lo ); 
.................... } 
....................  
.................... void get_string_usb(char* s, int max) { 
....................    int len; 
....................    char c; 
....................  
....................    --max; 
....................    len=0; 
....................    do { 
....................      c=usb_cdc_getc(); 
....................      if(c==8) {  // Backspace 
....................         if(len>0) { 
....................           len--; 
....................           usb_cdc_putc(c); 
....................           usb_cdc_putc(' '); 
....................           usb_cdc_putc(c); 
....................         } 
....................      } else if ((c>=' ')&&(c<='~')) 
....................        if(len<max) { 
....................          s[len++]=c; 
....................          usb_cdc_putc(c); 
....................        } 
....................    } while(c!=13); 
....................    s[len]=0; 
.................... } 
....................  
....................  
.................... // stdlib.h is required for the ato_ conversions 
.................... // in the following functions 
.................... #ifdef _STDLIB 
....................  
.................... signed int get_int_usb() { 
....................   char s[5]; 
....................   signed int i; 
....................  
....................   get_string_usb(s, 5); 
....................  
....................   i=atoi(s); 
....................   return(i); 
.................... } 
....................  
.................... signed long get_long_usb() { 
....................   char s[7]; 
....................   signed long l; 
....................  
....................   get_string_usb(s, 7); 
....................   l=atol(s); 
....................   return(l); 
.................... } 
....................  
.................... float get_float_usb() { 
....................   char s[20]; 
....................   float f; 
....................  
....................   get_string_usb(s, 20); 
....................   f = atof(s); 
....................   return(f); 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... //Creamos el puerto serie (96008N1) 
.................... #use rs232 (baud=9600,XMIT=PIN_C6,RCV=PIN_C7,BITS=8) 
....................  
.................... #USE STANDARD_IO (e) 
....................  
....................  
.................... // Configuramos los dispositivos incluidos en la placa. 
.................... #define LED PIN_C2 
.................... #define PULSADOR PIN_A4 
....................  
.................... // Alias de funciones 
.................... #define ENCENDER  output_high 
.................... #define APAGAR    output_low 
.................... #define CONMUTAR  output_toggle 
....................  
.................... // Para configurar el usb si esperar al host 
.................... void aure_configurar_usb_sinespera() 
.................... { 
....................    usb_cdc_init(); 
*
2D16:  CALL   1FFE
....................    usb_init(); 
2D1A:  BRA    2D08
.................... } 
2D1C:  GOTO   2D92 (RETURN)
....................  
....................  
.................... // Devuelve 1 si el dispositivo cdc está conectado 
.................... int aure_configurar_usb_comprobar() 
.................... { 
....................    if (usb_cdc_connected() && usb_enumerated()) return 1; 
....................    return 0; 
.................... } 
....................  
.................... // Configura el usb y espera al host 
.................... void aure_configurar_usb() 
.................... { 
....................    usb_cdc_init(); 
....................    usb_init(); 
....................    while(!usb_cdc_connected()) { 
....................    } 
....................    printf(usb_cdc_putc, "\r\n\n-AureBoard ¡Lista!\r\n"); 
.................... } 
....................  
....................  
.................... // Inicializa el PIC 
.................... void aure_configurar() 
.................... { 
....................    int t=0; 
2D20:  CLRF   xC1
....................    printf ("\r\nAUREBOT\r\n_______\r\n\r\nIniciando...\r\n"); 
2D22:  CLRF   xC2
2D24:  MOVF   xC2,W
2D26:  CALL   1A42
2D2A:  INCF   xC2,F
2D2C:  MOVWF  00
2D2E:  MOVF   00,W
2D30:  BTFSS  F9E.4
2D32:  BRA    2D30
2D34:  MOVWF  FAD
2D36:  MOVLW  24
2D38:  SUBWF  xC2,W
2D3A:  BNZ   2D24
....................    printf("[Delay 50 ms]\r\n"); 
2D3C:  CLRF   xC2
2D3E:  MOVF   xC2,W
2D40:  CALL   1A82
2D44:  INCF   xC2,F
2D46:  MOVWF  00
2D48:  MOVF   00,W
2D4A:  BTFSS  F9E.4
2D4C:  BRA    2D4A
2D4E:  MOVWF  FAD
2D50:  MOVLW  0F
2D52:  SUBWF  xC2,W
2D54:  BNZ   2D3E
....................    delay_ms(50); 
2D56:  MOVLW  32
2D58:  MOVWF  xC9
2D5A:  RCALL  2C72
....................    printf("[Ok]\r\n"); 
2D5C:  CLRF   xC2
2D5E:  MOVF   xC2,W
2D60:  CALL   1AAC
2D64:  INCF   xC2,F
2D66:  MOVWF  00
2D68:  MOVF   00,W
2D6A:  BTFSS  F9E.4
2D6C:  BRA    2D6A
2D6E:  MOVWF  FAD
2D70:  MOVLW  06
2D72:  SUBWF  xC2,W
2D74:  BNZ   2D5E
....................  
....................  
....................    /* 
....................       Configuramos el usb-serie 
....................       -aure_configurar_usb() 
....................          Espera a que el host configure el dispositivo, la ejecución del 
....................          programa no comienza hasta ese momento. 
....................       -aure_configurar_usb_sinespera() 
....................          No espera a que el host configure el dispositivo. Se puede usar la  
....................          función aure_configurar_usb_comprobar() para saber si el dispositivo 
....................          esta conectado (f()==1 conectado, f()==0 desconectado) 
....................    */ 
....................    printf("-USB CDC\r\n"); 
2D76:  CLRF   xC2
2D78:  MOVF   xC2,W
2D7A:  CALL   1ACE
2D7E:  INCF   xC2,F
2D80:  MOVWF  00
2D82:  MOVF   00,W
2D84:  BTFSS  F9E.4
2D86:  BRA    2D84
2D88:  MOVWF  FAD
2D8A:  MOVLW  0A
2D8C:  SUBWF  xC2,W
2D8E:  BNZ   2D78
....................       aure_configurar_usb_sinespera(); 
2D90:  BRA    2D16
....................       //delay_ms(500); 
....................    printf("-Led Verde\r\n"); 
2D92:  CLRF   xC2
2D94:  MOVF   xC2,W
2D96:  CALL   1AF4
2D9A:  INCF   xC2,F
2D9C:  MOVWF  00
2D9E:  MOVF   00,W
2DA0:  BTFSS  F9E.4
2DA2:  BRA    2DA0
2DA4:  MOVWF  FAD
2DA6:  MOVLW  0C
2DA8:  SUBWF  xC2,W
2DAA:  BNZ   2D94
....................    //Configuramos los registros TRIS 
....................    //set_tris_a(0b00000111); 
....................    //set_tris_b(0x00); 
....................    //set_tris_c(0x00); 
....................    //set_tris_d(0x00); 
....................    //set_tris_e(0x00);       
....................    //printf("-Registros TRIS\r\n"); 
....................  
....................    //Configuramos las resistencias de pullup del puerto B 
....................    port_b_pullups(FALSE); 
2DAC:  BSF    FF1.7
....................   // printf(usb_cdc_putc, "-Pull up's         [OFF]\r\n"); 
....................  
....................    //Todos los puertos a nivel bajo 
....................    //output_a (0x00); 
....................    //output_b (0x00); 
....................    //output_c (0xff); 
....................    //output_d (0x00); 
....................    //output_e (0x00); 
....................    //printf("-Puertos a 0\r\n"); 
....................  
....................  
....................    //Configuramos el ADC 
....................    //Todas las entradas analogicas activas y rango 0-Vdd 
....................    //setup_adc_ports( ALL_ANALOG|VSS_VDD ); 
....................    setup_adc_ports(NO_ANALOGS); 
2DAE:  MOVF   FC1,W
2DB0:  ANDLW  C0
2DB2:  IORLW  0F
2DB4:  MOVWF  FC1
....................    setup_adc(ADC_OFF); 
2DB6:  BCF    FC2.0
....................    //Reloj interno 
....................    //setup_adc(ADC_CLOCK_INTERNAL ); 
....................    //set_adc_channel(0); 
....................    //printf("usb_cdc_putc, "-ADC      [ON]\r\n"); 
....................    //printf(usb_cdc_putc, "-ADC         [OFF]\r\n"); 
....................  
....................    disable_interrupts(global); 
2DB8:  BCF    FF2.6
2DBA:  BCF    FF2.7
2DBC:  BTFSC  FF2.7
2DBE:  BRA    2DBA
....................  
....................  
....................    setup_spi(FALSE); 
2DC0:  BCF    FC6.5
2DC2:  BCF    F94.7
2DC4:  BSF    F93.0
2DC6:  BCF    F93.1
2DC8:  MOVLW  00
2DCA:  MOVWF  FC6
2DCC:  MOVWF  FC7
....................    //   printf(usb_cdc_putc, "-SPI          [OFF]\r\n"); 
....................    setup_psp(PSP_DISABLED); 
2DCE:  BCF    F96.4
....................    //   printf(usb_cdc_putc, "-PSP          [OFF]\r\n"); 
....................    // Habilitamos el TIMER1 
....................    //enable_interrupts(INT_TIMER1); 
....................    setup_timer_0(RTCC_OFF); 
2DD0:  CLRF   FD5
....................    //   printf(usb_cdc_putc, "-Timer0       [OFF]\r\n"); 
....................    setup_timer_1(T1_DISABLED| T1_DIV_BY_1); 
2DD2:  CLRF   FCD
....................    //   printf(usb_cdc_putc, "-Timer1       [OFF]\r\n"); 
....................    setup_timer_2(T2_DISABLED,0,1); 
2DD4:  MOVWF  FCA
2DD6:  MOVLW  00
2DD8:  MOVWF  FCB
....................    //   printf(usb_cdc_putc, "-Timer2       [OFF]\r\n"); 
....................    setup_timer_3(T3_DISABLED); 
2DDA:  MOVF   FB1,W
2DDC:  ANDLW  48
2DDE:  MOVWF  FB1
....................    //   printf(usb_cdc_putc, "-Timer3       [OFF]\r\n"); 
....................    setup_comparator(NC_NC_NC_NC); 
2DE0:  MOVLW  07
2DE2:  MOVWF  FB4
2DE4:  MOVF   F92,W
2DE6:  MOVLW  27
2DE8:  MOVWF  00
2DEA:  DECFSZ 00,F
2DEC:  BRA    2DEA
2DEE:  BRA    2DF0
2DF0:  MOVF   FB4,W
2DF2:  BCF    FA1.6
....................    //   printf(usb_cdc_putc, "-Comparador   [OFF]\r\n"); 
....................    setup_vref(FALSE); 
2DF4:  CLRF   FB5
....................  
....................    //Habilitamos la interrupcion serie 
....................    enable_interrupts(int_rda);  
2DF6:  BSF    F9D.5
....................    //   printf(usb_cdc_putc, "-Int SERIE   [ON]\r\n"); 
....................  
....................    // Habilitamos las interrupciones globales 
....................    enable_interrupts(GLOBAL); 
2DF8:  MOVLW  C0
2DFA:  IORWF  FF2,F
....................    //   printf (usb_cdc_putc, "-Int GLOB   [ON]\r\n"); 
....................     
....................    //printf (usb_cdc_putc, "¡Lista!\r\n\r\n"); 
.................... } 
2DFC:  GOTO   4BCE (RETURN)
....................  
....................  
.................... //Interrupción y gestión serie 
.................... int keypress=0; 
.................... void aure_serie(); 
.................... void aure_usb_serie_int(); 
....................  
.................... void aure_usb() 
.................... { 
....................    // Si usamos el USB 
....................    // usb_task(); 
....................    // Comprobamos si tenemos algún caracter en el buffer serie/usb, si lo 
....................    // tenemos llamamos a aure_usb_serie_int() que nos lo guardará en keypress 
....................    if (usb_cdc_kbhit()) 
*
4188:  BTFSS  x7D.0
418A:  BRA    4196
....................    { 
....................       aure_usb_serie_int(); 
418C:  GOTO   31CA
....................       if (keypress!=0x00) aure_serie(); 
4190:  MOVF   x82,F
4192:  BZ    4196
4194:  RCALL  3B64
....................    } 
.................... } 
4196:  GOTO   4BE8 (RETURN)
....................  
.................... #int_rda 
.................... void aure_serie_int() 
.................... { 
....................    int key; 
....................    key=getc(); 
*
2BF2:  BTFSS  F9E.5
2BF4:  BRA    2BF2
2BF6:  MOVFF  FAE,E8
....................     if (key!=0x00 && key!=0xFF) 
2BFA:  MOVF   xE8,F
2BFC:  BZ    2C14
2BFE:  INCFSZ xE8,W
2C00:  BRA    2C04
2C02:  BRA    2C14
....................     { 
....................       output_toggle(LED); 
2C04:  BCF    F94.2
2C06:  BTG    F8B.2
....................       keypress=key; 
2C08:  MOVFF  E8,82
....................       //printf ("\rRX:%u->%c\r\n", key,key); 
....................       if (key==27) reset_cpu(); 
2C0C:  MOVF   xE8,W
2C0E:  SUBLW  1B
2C10:  BTFSC  FD8.2
2C12:  RESET
....................     } 
.................... } 
....................  
....................  
2C14:  BCF    F9E.5
2C16:  GOTO   187C
.................... void aure_usb_serie_int() 
.................... { 
....................    int key; 
....................    key=usb_cdc_getc(); 
*
31CA:  BRA    318A
31CC:  MOVFF  01,C1
....................     if (key!=0x00 && key!=0xFF) 
31D0:  MOVF   xC1,F
31D2:  BZ    31E6
31D4:  INCFSZ xC1,W
31D6:  BRA    31DA
31D8:  BRA    31E6
....................     { 
....................       keypress=key; 
31DA:  MOVFF  C1,82
....................       //printf ("\rUSB RX:%u->%c\r\n", key,key); 
....................       if (key==27) reset_cpu(); 
31DE:  MOVF   xC1,W
31E0:  SUBLW  1B
31E2:  BTFSC  FD8.2
31E4:  RESET
....................     } 
.................... } 
31E6:  GOTO   4190 (RETURN)
....................  
.................... void barra(int valor) 
.................... { 
....................    float lectura; 
....................    int j, lec[25]; 
....................          lectura=valor; 
....................          lectura=lectura/10; 
....................          for (j=0; j<25; j++) if (j<=lectura) { lec[j]='O'; } else {lec[j]=' ';} 
....................          lec[24]='\0'; 
....................          printf (usb_cdc_putc, "%s | (%u)\r\n", lec, valor); 
.................... } 
....................  
.................... #inline 
.................... int leeradc(int canal) 
.................... { 
....................    set_adc_channel(canal); 
....................    canal=read_adc(); 
....................    return canal; 
.................... } 
....................  
....................  
.................... #include <../lib/i2c.h> 
.................... // lib-i2c.h   i2c library routines 
....................  
.................... // routines for: 
.................... //   dallas ds1624 eeprom+thermometer 
.................... //   philips pcf8574 (and pcf8574a) 8port i/o expander 
.................... //   generic 24cXX eeproms with 16bit address support 
.................... // 
....................  
.................... // (C) copyright 2003 j.d.sandoz / jds-pic !at! losdos.dyndns.org  
....................  
.................... // released under the GNU GENERAL PUBLIC LICENSE (GPL) 
.................... // refer to http://www.gnu.org/licenses/gpl.txt 
....................  
.................... // This program is free software; you can redistribute it and/or modify 
.................... // it under the terms of the GNU General Public License as published by 
.................... // the Free Software Foundation; either version 2 of the License, or 
.................... // (at your option) any later version. 
....................  
.................... // This program is distributed in the hope that it will be useful, 
.................... // but WITHOUT ANY WARRANTY; without even the implied warranty of 
.................... // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
.................... // GNU General Public License for more details. 
....................  
.................... // You should have received a copy of the GNU General Public License 
.................... // along with this program; if not, write to the Free Software 
.................... // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
....................  
.................... // note: CCS's C compiler doesn't accept compile-time directives 
.................... //       to change the i2c pin definitions.  thus, if you have 
.................... //       multiple i2c buses in your application, every function 
.................... //       needs to be replicated for each of the i2c bus definitions, 
.................... //       with an appropriate use_i2c() directive preceeding it. 
....................  
.................... #use I2C(master, sda=PIN_B0, scl=PIN_B1, slow) 
*
2EB8:  MOVLW  08
2EBA:  MOVWF  01
2EBC:  MOVLW  11
2EBE:  MOVWF  00
2EC0:  DECFSZ 00,F
2EC2:  BRA    2EC0
2EC4:  BCF    F8A.1
2EC6:  BCF    F93.1
2EC8:  MOVLW  11
2ECA:  MOVWF  00
2ECC:  DECFSZ 00,F
2ECE:  BRA    2ECC
2ED0:  RLCF   xCA,F
2ED2:  BCF    F8A.0
2ED4:  BTFSC  FD8.0
2ED6:  BSF    F93.0
2ED8:  BTFSS  FD8.0
2EDA:  BCF    F93.0
2EDC:  BSF    F93.1
2EDE:  BTFSS  F81.1
2EE0:  BRA    2EDE
2EE2:  DECFSZ 01,F
2EE4:  BRA    2EBC
2EE6:  MOVLW  11
2EE8:  MOVWF  00
2EEA:  DECFSZ 00,F
2EEC:  BRA    2EEA
2EEE:  BCF    F8A.1
2EF0:  BCF    F93.1
2EF2:  NOP   
2EF4:  BSF    F93.0
2EF6:  MOVLW  11
2EF8:  MOVWF  00
2EFA:  DECFSZ 00,F
2EFC:  BRA    2EFA
2EFE:  MOVLW  11
2F00:  MOVWF  00
2F02:  DECFSZ 00,F
2F04:  BRA    2F02
2F06:  BSF    F93.1
2F08:  BTFSS  F81.1
2F0A:  BRA    2F08
2F0C:  CLRF   01
2F0E:  MOVLW  11
2F10:  MOVWF  00
2F12:  DECFSZ 00,F
2F14:  BRA    2F12
2F16:  BTFSC  F81.0
2F18:  BSF    01.0
2F1A:  BCF    F8A.1
2F1C:  BCF    F93.1
2F1E:  BCF    F8A.0
2F20:  BCF    F93.0
2F22:  RETLW  00
*
2FE4:  MOVLW  08
2FE6:  MOVWF  xC6
2FE8:  MOVFF  00,C7
2FEC:  BSF    F93.0
2FEE:  MOVLW  11
2FF0:  MOVWF  00
2FF2:  DECFSZ 00,F
2FF4:  BRA    2FF2
2FF6:  BSF    F93.1
2FF8:  BTFSS  F81.1
2FFA:  BRA    2FF8
2FFC:  BTFSC  F81.0
2FFE:  BSF    FD8.0
3000:  BTFSS  F81.0
3002:  BCF    FD8.0
3004:  RLCF   01,F
3006:  MOVLW  11
3008:  MOVWF  00
300A:  DECFSZ 00,F
300C:  BRA    300A
300E:  BCF    F93.1
3010:  BCF    F8A.1
3012:  DECFSZ xC6,F
3014:  BRA    2FEC
3016:  BSF    F93.0
3018:  MOVLW  11
301A:  MOVWF  00
301C:  DECFSZ 00,F
301E:  BRA    301C
3020:  BCF    F8A.0
3022:  MOVF   xC7,W
3024:  BTFSS  FD8.2
3026:  BCF    F93.0
3028:  NOP   
302A:  BSF    F93.1
302C:  BTFSS  F81.1
302E:  BRA    302C
3030:  MOVLW  11
3032:  MOVWF  00
3034:  DECFSZ 00,F
3036:  BRA    3034
3038:  BCF    F8A.1
303A:  BCF    F93.1
303C:  MOVLW  11
303E:  MOVWF  00
3040:  DECFSZ 00,F
3042:  BRA    3040
3044:  BCF    F8A.0
3046:  BCF    F93.0
3048:  RETLW  00
.................... #define I2CWRITE     0b00000000 
.................... #define I2CREAD      0b00000001 
....................  
.................... // this is a handy function for taking the i2c physical address 
.................... // and shifting the bits left so that the address can simply be 
.................... // OR'd with an i2c write command... 
....................  
.................... int i2c_addr_mask(int device_addr) { 
....................    /* xxxxxIJK --> 00000IJK, then 00000IJK --> 0000IJK0 */ 
....................    return((device_addr & 0x07)<<1); 
*
2EA8:  MOVF   xC5,W
2EAA:  ANDLW  07
2EAC:  MOVWF  00
2EAE:  BCF    FD8.0
2EB0:  RLCF   00,F
2EB2:  MOVFF  00,01
.................... } 
2EB6:  RETLW  00
....................  
....................  
....................  
.................... // note: due to a production screw-up, some PCB assy's were delivered with 
.................... //       the "A" version of the pcf8574 device; while the responsible parties 
.................... //       were in fact tortured by being forced to consume large quantites 
.................... //       of a popular laxative, it was nevertheless necessary to implement 
.................... //       a scheme by which the FW could detect which flavor pcf8574 was on 
.................... //       the board.  hence the following function... call it using either 
.................... //       PCF8574_ID or PCF8574A_ID and test the return value.  this function 
.................... //       is actually not pcf8574-specific; you can use it to test for the 
.................... //       presence of any type of i2c device at any i2c physical address. 
....................  
.................... short int i2c_device_exists(int device_type, int device_addr) { 
....................    short int result=FALSE; 
....................    int addr_mask; 
....................    int testbyte; 
....................    addr_mask=i2c_addr_mask(device_addr); 
....................    testbyte=(device_type | addr_mask | I2CWRITE); // mode is write 
....................    i2c_start(); 
....................    if (i2c_write(testbyte))  // if the ACK error bit is set, target is absent 
....................         result=FALSE; 
....................      else 
....................         result=TRUE; 
....................    i2c_stop(); 
....................    return(result); 
.................... } 
....................  
.................... BYTE bin2bcd(BYTE binary_value) 
.................... { 
....................   BYTE temp; 
....................   BYTE retval; 
....................  
....................   temp = binary_value; 
*
38A4:  MOVFF  C8,C9
....................   retval = 0; 
38A8:  CLRF   xCA
....................  
....................   while(1) 
....................   { 
....................     // Get the tens digit by doing multiple subtraction 
....................     // of 10 from the binary value. 
....................     if(temp >= 10) 
38AA:  MOVF   xC9,W
38AC:  SUBLW  09
38AE:  BC    38BA
....................     { 
....................       temp -= 10; 
38B0:  MOVLW  0A
38B2:  SUBWF  xC9,F
....................       retval += 0x10; 
38B4:  MOVLW  10
38B6:  ADDWF  xCA,F
....................     } 
....................     else // Get the ones digit by adding the remainder. 
38B8:  BRA    38C0
....................     { 
....................       retval += temp; 
38BA:  MOVF   xC9,W
38BC:  ADDWF  xCA,F
....................       break; 
38BE:  BRA    38C2
....................     } 
....................   } 
38C0:  BRA    38AA
....................  
....................   return(retval); 
38C2:  MOVFF  CA,01
.................... } 
38C6:  RETLW  00
....................  
....................  
.................... // Input range - 00 to 99. 
.................... BYTE bcd2bin(BYTE bcd_value) 
.................... { 
....................   BYTE temp; 
....................  
....................   temp = bcd_value; 
*
304A:  MOVFF  C7,C8
....................   // Shifting upper digit right by 1 is same as multiplying by 8. 
....................   temp >>= 1; 
304E:  BCF    FD8.0
3050:  RRCF   xC8,F
....................   // Isolate the bits for the upper digit. 
....................   temp &= 0x78; 
3052:  MOVLW  78
3054:  ANDWF  xC8,F
....................  
....................   // Now return: (Tens * 8) + (Tens * 2) + Ones 
....................  
....................   return(temp + (temp >> 2) + (bcd_value & 0x0f)); 
3056:  RRCF   xC8,W
3058:  MOVWF  00
305A:  RRCF   00,F
305C:  MOVLW  3F
305E:  ANDWF  00,F
3060:  MOVF   00,W
3062:  ADDWF  xC8,W
3064:  MOVWF  xC9
3066:  MOVF   xC7,W
3068:  ANDLW  0F
306A:  ADDWF  xC9,W
306C:  MOVWF  01
.................... } 
306E:  RETLW  00
....................  
.................... #include <../lib/ds1307.h> 
.................... void ds1307_init(void) 
.................... { 
....................    BYTE seconds = 0; 
3070:  CLRF   xC1
....................  
....................    i2c_start(); 
3072:  BSF    F93.0
3074:  MOVLW  11
3076:  MOVWF  00
3078:  DECFSZ 00,F
307A:  BRA    3078
307C:  BSF    F93.1
307E:  MOVLW  11
3080:  MOVWF  00
3082:  DECFSZ 00,F
3084:  BRA    3082
3086:  BCF    F8A.0
3088:  BCF    F93.0
308A:  MOVLW  11
308C:  MOVWF  00
308E:  DECFSZ 00,F
3090:  BRA    308E
3092:  BCF    F8A.1
3094:  BCF    F93.1
....................    i2c_write(0xD0);      // WR to RTC 
3096:  MOVLW  D0
3098:  MOVWF  xCA
309A:  RCALL  2EB8
....................    i2c_write(0x00);      // REG 0 
309C:  CLRF   xCA
309E:  RCALL  2EB8
....................    i2c_start(); 
30A0:  BSF    F93.0
30A2:  MOVLW  11
30A4:  MOVWF  00
30A6:  DECFSZ 00,F
30A8:  BRA    30A6
30AA:  BSF    F93.1
30AC:  MOVLW  11
30AE:  MOVWF  00
30B0:  DECFSZ 00,F
30B2:  BRA    30B0
30B4:  BTFSS  F81.1
30B6:  BRA    30B4
30B8:  BCF    F8A.0
30BA:  BCF    F93.0
30BC:  MOVLW  11
30BE:  MOVWF  00
30C0:  DECFSZ 00,F
30C2:  BRA    30C0
30C4:  BCF    F8A.1
30C6:  BCF    F93.1
....................    i2c_write(0xD1);      // RD from RTC 
30C8:  MOVLW  D1
30CA:  MOVWF  xCA
30CC:  RCALL  2EB8
....................    seconds = bcd2bin(i2c_read(0)); // Read current "seconds" in DS1307 
30CE:  CLRF   00
30D0:  RCALL  2FE4
30D2:  MOVFF  01,C2
30D6:  MOVFF  01,C7
30DA:  RCALL  304A
30DC:  MOVFF  01,C1
....................    i2c_stop(); 
30E0:  BCF    F93.0
30E2:  NOP   
30E4:  BSF    F93.1
30E6:  BTFSS  F81.1
30E8:  BRA    30E6
30EA:  MOVLW  11
30EC:  MOVWF  00
30EE:  DECFSZ 00,F
30F0:  BRA    30EE
30F2:  BRA    30F4
30F4:  NOP   
30F6:  BSF    F93.0
30F8:  MOVLW  11
30FA:  MOVWF  00
30FC:  DECFSZ 00,F
30FE:  BRA    30FC
....................    seconds &= 0x7F; 
3100:  BCF    xC1.7
....................  
....................    delay_us(3); 
3102:  MOVLW  0B
3104:  MOVWF  00
3106:  DECFSZ 00,F
3108:  BRA    3106
310A:  BRA    310C
....................  
....................    //i2c_start(); 
....................    //i2c_write(0xD0);      // WR to RTC 
....................    //i2c_write(0x00);      // REG 0 
....................    //i2c_write(bin2bcd(seconds));     // Start oscillator with current "seconds value 
....................    i2c_start(); 
310C:  BSF    F93.0
310E:  MOVLW  11
3110:  MOVWF  00
3112:  DECFSZ 00,F
3114:  BRA    3112
3116:  BSF    F93.1
3118:  MOVLW  11
311A:  MOVWF  00
311C:  DECFSZ 00,F
311E:  BRA    311C
3120:  BCF    F8A.0
3122:  BCF    F93.0
3124:  MOVLW  11
3126:  MOVWF  00
3128:  DECFSZ 00,F
312A:  BRA    3128
312C:  BCF    F8A.1
312E:  BCF    F93.1
....................    i2c_write(0xD0);      // WR to RTC 
3130:  MOVLW  D0
3132:  MOVWF  xCA
3134:  RCALL  2EB8
....................    i2c_write(0x07);      // Control Register 
3136:  MOVLW  07
3138:  MOVWF  xCA
313A:  RCALL  2EB8
....................    i2c_write(0x80);     // Disable squarewave output pin 
313C:  MOVLW  80
313E:  MOVWF  xCA
3140:  RCALL  2EB8
....................    i2c_stop(); 
3142:  BCF    F93.0
3144:  NOP   
3146:  BSF    F93.1
3148:  BTFSS  F81.1
314A:  BRA    3148
314C:  MOVLW  11
314E:  MOVWF  00
3150:  DECFSZ 00,F
3152:  BRA    3150
3154:  BRA    3156
3156:  NOP   
3158:  BSF    F93.0
315A:  MOVLW  11
315C:  MOVWF  00
315E:  DECFSZ 00,F
3160:  BRA    315E
....................  
.................... } 
3162:  GOTO   4BE0 (RETURN)
....................  
.................... void ds1307_set_date_time(BYTE day, BYTE mth, BYTE year, BYTE dow, BYTE hr, BYTE min, BYTE sec) 
.................... { 
....................   sec &= 0x7F; 
*
38C8:  BCF    xC7.7
....................   hr &= 0x3F; 
38CA:  MOVLW  3F
38CC:  ANDWF  xC5,F
....................  
....................   i2c_start(); 
38CE:  BSF    F93.0
38D0:  MOVLW  11
38D2:  MOVWF  00
38D4:  DECFSZ 00,F
38D6:  BRA    38D4
38D8:  BSF    F93.1
38DA:  MOVLW  11
38DC:  MOVWF  00
38DE:  DECFSZ 00,F
38E0:  BRA    38DE
38E2:  BCF    F8A.0
38E4:  BCF    F93.0
38E6:  MOVLW  11
38E8:  MOVWF  00
38EA:  DECFSZ 00,F
38EC:  BRA    38EA
38EE:  BCF    F8A.1
38F0:  BCF    F93.1
....................   i2c_write(0xD0);            // I2C write address 
38F2:  MOVLW  D0
38F4:  MOVWF  xCA
38F6:  CALL   2EB8
....................   i2c_write(0x00);            // Start at REG 0 - Seconds 
38FA:  CLRF   xCA
38FC:  CALL   2EB8
....................   i2c_write(bin2bcd(sec));      // REG 0 
3900:  MOVFF  C7,C8
3904:  RCALL  38A4
3906:  MOVFF  01,C8
390A:  MOVFF  01,CA
390E:  CALL   2EB8
....................   i2c_write(bin2bcd(min));      // REG 1 
3912:  MOVFF  C6,C8
3916:  RCALL  38A4
3918:  MOVFF  01,C8
391C:  MOVFF  01,CA
3920:  CALL   2EB8
....................   i2c_write(bin2bcd(hr));      // REG 2 
3924:  MOVFF  C5,C8
3928:  RCALL  38A4
392A:  MOVFF  01,C8
392E:  MOVFF  01,CA
3932:  CALL   2EB8
....................   i2c_write(bin2bcd(dow));      // REG 3 
3936:  MOVFF  C4,C8
393A:  RCALL  38A4
393C:  MOVFF  01,C8
3940:  MOVFF  01,CA
3944:  CALL   2EB8
....................   i2c_write(bin2bcd(day));      // REG 4 
3948:  MOVFF  C1,C8
394C:  RCALL  38A4
394E:  MOVFF  01,C8
3952:  MOVFF  01,CA
3956:  CALL   2EB8
....................   i2c_write(bin2bcd(mth));      // REG 5 
395A:  MOVFF  C2,C8
395E:  RCALL  38A4
3960:  MOVFF  01,C8
3964:  MOVFF  01,CA
3968:  CALL   2EB8
....................   i2c_write(bin2bcd(year));      // REG 6 
396C:  MOVFF  C3,C8
3970:  RCALL  38A4
3972:  MOVFF  01,C8
3976:  MOVFF  01,CA
397A:  CALL   2EB8
....................   i2c_write(0x80);            // REG 7 - Disable squarewave output pin 
397E:  MOVLW  80
3980:  MOVWF  xCA
3982:  CALL   2EB8
....................   i2c_stop(); 
3986:  BCF    F93.0
3988:  NOP   
398A:  BSF    F93.1
398C:  BTFSS  F81.1
398E:  BRA    398C
3990:  MOVLW  11
3992:  MOVWF  00
3994:  DECFSZ 00,F
3996:  BRA    3994
3998:  BRA    399A
399A:  NOP   
399C:  BSF    F93.0
399E:  MOVLW  11
39A0:  MOVWF  00
39A2:  DECFSZ 00,F
39A4:  BRA    39A2
.................... } 
39A6:  GOTO   3D5E (RETURN)
....................  
.................... void ds1307_get_date(BYTE &day, BYTE &mth, BYTE &year, BYTE &dow) 
.................... { 
....................   i2c_start(); 
*
4CCC:  BSF    F93.0
4CCE:  MOVLW  11
4CD0:  MOVWF  00
4CD2:  DECFSZ 00,F
4CD4:  BRA    4CD2
4CD6:  BSF    F93.1
4CD8:  MOVLW  11
4CDA:  MOVWF  00
4CDC:  DECFSZ 00,F
4CDE:  BRA    4CDC
4CE0:  BCF    F8A.0
4CE2:  BCF    F93.0
4CE4:  MOVLW  11
4CE6:  MOVWF  00
4CE8:  DECFSZ 00,F
4CEA:  BRA    4CE8
4CEC:  BCF    F8A.1
4CEE:  BCF    F93.1
....................   i2c_write(0xD0); 
4CF0:  MOVLW  D0
4CF2:  MOVWF  xCA
4CF4:  CALL   2EB8
....................   i2c_write(0x03);            // Start at REG 3 - Day of week 
4CF8:  MOVLW  03
4CFA:  MOVWF  xCA
4CFC:  CALL   2EB8
....................   i2c_start(); 
4D00:  BSF    F93.0
4D02:  MOVLW  11
4D04:  MOVWF  00
4D06:  DECFSZ 00,F
4D08:  BRA    4D06
4D0A:  BSF    F93.1
4D0C:  MOVLW  11
4D0E:  MOVWF  00
4D10:  DECFSZ 00,F
4D12:  BRA    4D10
4D14:  BTFSS  F81.1
4D16:  BRA    4D14
4D18:  BCF    F8A.0
4D1A:  BCF    F93.0
4D1C:  MOVLW  11
4D1E:  MOVWF  00
4D20:  DECFSZ 00,F
4D22:  BRA    4D20
4D24:  BCF    F8A.1
4D26:  BCF    F93.1
....................   i2c_write(0xD1); 
4D28:  MOVLW  D1
4D2A:  MOVWF  xCA
4D2C:  CALL   2EB8
....................   dow  = bcd2bin(i2c_read() & 0x7f);   // REG 3 
4D30:  MOVLW  01
4D32:  MOVWF  00
4D34:  CALL   2FE4
4D38:  MOVF   01,W
4D3A:  ANDLW  7F
4D3C:  MOVWF  xC2
4D3E:  MOVWF  xC7
4D40:  CALL   304A
4D44:  MOVFF  01,A1
....................   day  = bcd2bin(i2c_read() & 0x3f);   // REG 4 
4D48:  MOVLW  01
4D4A:  MOVWF  00
4D4C:  CALL   2FE4
4D50:  MOVF   01,W
4D52:  ANDLW  3F
4D54:  MOVWF  xC2
4D56:  MOVWF  xC7
4D58:  CALL   304A
4D5C:  MOVFF  01,A5
....................   mth  = bcd2bin(i2c_read() & 0x1f);   // REG 5 
4D60:  MOVLW  01
4D62:  MOVWF  00
4D64:  CALL   2FE4
4D68:  MOVF   01,W
4D6A:  ANDLW  1F
4D6C:  MOVWF  xC2
4D6E:  MOVWF  xC7
4D70:  CALL   304A
4D74:  MOVFF  01,A6
....................   year = bcd2bin(i2c_read(0));            // REG 6 
4D78:  CLRF   00
4D7A:  CALL   2FE4
4D7E:  MOVFF  01,C1
4D82:  MOVFF  01,C7
4D86:  CALL   304A
4D8A:  MOVFF  01,A7
....................   i2c_stop(); 
4D8E:  BCF    F93.0
4D90:  NOP   
4D92:  BSF    F93.1
4D94:  BTFSS  F81.1
4D96:  BRA    4D94
4D98:  MOVLW  11
4D9A:  MOVWF  00
4D9C:  DECFSZ 00,F
4D9E:  BRA    4D9C
4DA0:  BRA    4DA2
4DA2:  NOP   
4DA4:  BSF    F93.0
4DA6:  MOVLW  11
4DA8:  MOVWF  00
4DAA:  DECFSZ 00,F
4DAC:  BRA    4DAA
.................... } 
....................  
.................... void ds1307_get_time(BYTE &hr, BYTE &min, BYTE &sec) 
.................... { 
....................   i2c_start(); 
4DAE:  BSF    F93.0
4DB0:  MOVLW  11
4DB2:  MOVWF  00
4DB4:  DECFSZ 00,F
4DB6:  BRA    4DB4
4DB8:  BSF    F93.1
4DBA:  MOVLW  11
4DBC:  MOVWF  00
4DBE:  DECFSZ 00,F
4DC0:  BRA    4DBE
4DC2:  BCF    F8A.0
4DC4:  BCF    F93.0
4DC6:  MOVLW  11
4DC8:  MOVWF  00
4DCA:  DECFSZ 00,F
4DCC:  BRA    4DCA
4DCE:  BCF    F8A.1
4DD0:  BCF    F93.1
....................   i2c_write(0xD0); 
4DD2:  MOVLW  D0
4DD4:  MOVWF  xCA
4DD6:  CALL   2EB8
....................   i2c_write(0x00);            // Start at REG 0 - Seconds 
4DDA:  CLRF   xCA
4DDC:  CALL   2EB8
....................   i2c_start(); 
4DE0:  BSF    F93.0
4DE2:  MOVLW  11
4DE4:  MOVWF  00
4DE6:  DECFSZ 00,F
4DE8:  BRA    4DE6
4DEA:  BSF    F93.1
4DEC:  MOVLW  11
4DEE:  MOVWF  00
4DF0:  DECFSZ 00,F
4DF2:  BRA    4DF0
4DF4:  BTFSS  F81.1
4DF6:  BRA    4DF4
4DF8:  BCF    F8A.0
4DFA:  BCF    F93.0
4DFC:  MOVLW  11
4DFE:  MOVWF  00
4E00:  DECFSZ 00,F
4E02:  BRA    4E00
4E04:  BCF    F8A.1
4E06:  BCF    F93.1
....................   i2c_write(0xD1); 
4E08:  MOVLW  D1
4E0A:  MOVWF  xCA
4E0C:  CALL   2EB8
....................   sec = bcd2bin(i2c_read() & 0x7f); 
4E10:  MOVLW  01
4E12:  MOVWF  00
4E14:  CALL   2FE4
4E18:  MOVF   01,W
4E1A:  ANDLW  7F
4E1C:  MOVWF  xC2
4E1E:  MOVWF  xC7
4E20:  CALL   304A
4E24:  MOVFF  01,A4
....................   min = bcd2bin(i2c_read() & 0x7f); 
4E28:  MOVLW  01
4E2A:  MOVWF  00
4E2C:  CALL   2FE4
4E30:  MOVF   01,W
4E32:  ANDLW  7F
4E34:  MOVWF  xC2
4E36:  MOVWF  xC7
4E38:  CALL   304A
4E3C:  MOVFF  01,A3
....................   hr  = bcd2bin(i2c_read(0) & 0x3f); 
4E40:  CLRF   00
4E42:  CALL   2FE4
4E46:  MOVF   01,W
4E48:  ANDLW  3F
4E4A:  MOVWF  xC2
4E4C:  MOVWF  xC7
4E4E:  CALL   304A
4E52:  MOVFF  01,A2
....................   i2c_stop(); 
4E56:  BCF    F93.0
4E58:  NOP   
4E5A:  BSF    F93.1
4E5C:  BTFSS  F81.1
4E5E:  BRA    4E5C
4E60:  MOVLW  11
4E62:  MOVWF  00
4E64:  DECFSZ 00,F
4E66:  BRA    4E64
4E68:  BRA    4E6A
4E6A:  NOP   
4E6C:  BSF    F93.0
4E6E:  MOVLW  11
4E70:  MOVWF  00
4E72:  DECFSZ 00,F
4E74:  BRA    4E72
....................  
.................... } 
....................  
.................... #include <../lib/ds1624.h> 
.................... // lib-i2c.h   i2c library routines 
....................  
.................... // routines for: 
.................... //   dallas ds1624 eeprom+thermometer 
.................... // 
....................  
.................... // (C) copyright 2003 j.d.sandoz / jds-pic !at! losdos.dyndns.org  
....................  
.................... // released under the GNU GENERAL PUBLIC LICENSE (GPL) 
.................... // refer to http://www.gnu.org/licenses/gpl.txt 
....................  
.................... // This program is free software; you can redistribute it and/or modify 
.................... // it under the terms of the GNU General Public License as published by 
.................... // the Free Software Foundation; either version 2 of the License, or 
.................... // (at your option) any later version. 
....................  
.................... // This program is distributed in the hope that it will be useful, 
.................... // but WITHOUT ANY WARRANTY; without even the implied warranty of 
.................... // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
.................... // GNU General Public License for more details. 
....................  
.................... // You should have received a copy of the GNU General Public License 
.................... // along with this program; if not, write to the Free Software 
.................... // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
....................  
.................... // ---------------------------------------------------------------------------- 
....................  
.................... // routines for the dallas DS1624 i2c-based (temp + 256b eeprom) ic 
.................... //   essentials: 
.................... //   ds1624_init();   initializes device for continous temperature readings 
.................... //   ds1624_read_temperature_c();    reads temperature in deg C 
.................... //   ds1624_eeprom_read();           reads a byte from address        
.................... //   ds1624_eeprom_write();          writes a byte into address      
.................... //   ds1624_eeprom_clear();          clears the contents of the eeprom 
....................  
.................... #define DS1624_ID                      0b10010000 
.................... #define DS1624_CMD_ACCESSCONFIG        0xAC 
.................... #define DS1624_CMD_INITIATECONVERT     0xEE 
.................... #define DS1624_CMD_ACCESSTEMPERATURE   0xAA 
.................... #define DS1624_CMD_ACCESSMEMORY        0x17 
....................  
.................... void ds1624_init(int device_addr) { 
....................    int addr_mask; 
....................    addr_mask=i2c_addr_mask(device_addr); 
*
2F24:  MOVFF  C1,C5
2F28:  RCALL  2EA8
2F2A:  MOVFF  01,C2
....................    i2c_start(); 
2F2E:  BSF    F93.0
2F30:  MOVLW  11
2F32:  MOVWF  00
2F34:  DECFSZ 00,F
2F36:  BRA    2F34
2F38:  BSF    F93.1
2F3A:  MOVLW  11
2F3C:  MOVWF  00
2F3E:  DECFSZ 00,F
2F40:  BRA    2F3E
2F42:  BCF    F8A.0
2F44:  BCF    F93.0
2F46:  MOVLW  11
2F48:  MOVWF  00
2F4A:  DECFSZ 00,F
2F4C:  BRA    2F4A
2F4E:  BCF    F8A.1
2F50:  BCF    F93.1
....................    i2c_write(DS1624_ID | addr_mask | I2CWRITE); /* mode is write */ 
2F52:  MOVF   xC2,W
2F54:  IORLW  90
2F56:  MOVWF  xC4
2F58:  MOVWF  xCA
2F5A:  RCALL  2EB8
....................    i2c_write(DS1624_CMD_ACCESSCONFIG);          /* send access config command */ 
2F5C:  MOVLW  AC
2F5E:  MOVWF  xCA
2F60:  RCALL  2EB8
....................    i2c_write(0x00);       /* set up for continuous temp conversions */ 
2F62:  CLRF   xCA
2F64:  RCALL  2EB8
....................    i2c_stop(); 
2F66:  BCF    F93.0
2F68:  NOP   
2F6A:  BSF    F93.1
2F6C:  BTFSS  F81.1
2F6E:  BRA    2F6C
2F70:  MOVLW  11
2F72:  MOVWF  00
2F74:  DECFSZ 00,F
2F76:  BRA    2F74
2F78:  BRA    2F7A
2F7A:  NOP   
2F7C:  BSF    F93.0
2F7E:  MOVLW  11
2F80:  MOVWF  00
2F82:  DECFSZ 00,F
2F84:  BRA    2F82
....................    delay_ms(20);          /* wait for the data to be written */ 
2F86:  MOVLW  14
2F88:  MOVWF  xC9
2F8A:  RCALL  2C72
....................    i2c_start(); 
2F8C:  BSF    F93.0
2F8E:  MOVLW  11
2F90:  MOVWF  00
2F92:  DECFSZ 00,F
2F94:  BRA    2F92
2F96:  BSF    F93.1
2F98:  MOVLW  11
2F9A:  MOVWF  00
2F9C:  DECFSZ 00,F
2F9E:  BRA    2F9C
2FA0:  BCF    F8A.0
2FA2:  BCF    F93.0
2FA4:  MOVLW  11
2FA6:  MOVWF  00
2FA8:  DECFSZ 00,F
2FAA:  BRA    2FA8
2FAC:  BCF    F8A.1
2FAE:  BCF    F93.1
....................    i2c_write(DS1624_ID | addr_mask | I2CWRITE);   /* mode is write */ 
2FB0:  MOVF   xC2,W
2FB2:  IORLW  90
2FB4:  MOVWF  xC4
2FB6:  MOVWF  xCA
2FB8:  RCALL  2EB8
....................    i2c_write(DS1624_CMD_INITIATECONVERT);   /* initiate temperature conversions */ 
2FBA:  MOVLW  EE
2FBC:  MOVWF  xCA
2FBE:  RCALL  2EB8
....................    i2c_stop(); 
2FC0:  BCF    F93.0
2FC2:  NOP   
2FC4:  BSF    F93.1
2FC6:  BTFSS  F81.1
2FC8:  BRA    2FC6
2FCA:  MOVLW  11
2FCC:  MOVWF  00
2FCE:  DECFSZ 00,F
2FD0:  BRA    2FCE
2FD2:  BRA    2FD4
2FD4:  NOP   
2FD6:  BSF    F93.0
2FD8:  MOVLW  11
2FDA:  MOVWF  00
2FDC:  DECFSZ 00,F
2FDE:  BRA    2FDC
.................... } 
2FE0:  GOTO   4BDC (RETURN)
....................  
.................... int ds1624_read_temp_c(int device_addr) { 
....................    int datah, datal; 
....................    int addr_mask; 
....................    addr_mask=i2c_addr_mask(device_addr); 
*
4930:  MOVFF  C1,C5
4934:  CALL   2EA8
4938:  MOVFF  01,C4
....................    i2c_start(); 
493C:  BSF    F93.0
493E:  MOVLW  11
4940:  MOVWF  00
4942:  DECFSZ 00,F
4944:  BRA    4942
4946:  BSF    F93.1
4948:  MOVLW  11
494A:  MOVWF  00
494C:  DECFSZ 00,F
494E:  BRA    494C
4950:  BCF    F8A.0
4952:  BCF    F93.0
4954:  MOVLW  11
4956:  MOVWF  00
4958:  DECFSZ 00,F
495A:  BRA    4958
495C:  BCF    F8A.1
495E:  BCF    F93.1
....................    i2c_write(DS1624_ID | addr_mask | I2CWRITE); /* mode is write */ 
4960:  MOVF   xC4,W
4962:  IORLW  90
4964:  MOVWF  xC6
4966:  MOVWF  xCA
4968:  CALL   2EB8
....................    i2c_write(DS1624_CMD_ACCESSTEMPERATURE); /* send access temperature command */ 
496C:  MOVLW  AA
496E:  MOVWF  xCA
4970:  CALL   2EB8
....................    i2c_start(); 
4974:  BSF    F93.0
4976:  MOVLW  11
4978:  MOVWF  00
497A:  DECFSZ 00,F
497C:  BRA    497A
497E:  BSF    F93.1
4980:  MOVLW  11
4982:  MOVWF  00
4984:  DECFSZ 00,F
4986:  BRA    4984
4988:  BTFSS  F81.1
498A:  BRA    4988
498C:  BCF    F8A.0
498E:  BCF    F93.0
4990:  MOVLW  11
4992:  MOVWF  00
4994:  DECFSZ 00,F
4996:  BRA    4994
4998:  BCF    F8A.1
499A:  BCF    F93.1
....................    i2c_write(DS1624_ID | addr_mask | I2CREAD);  /* mode is read */ 
499C:  MOVF   xC4,W
499E:  IORLW  90
49A0:  IORLW  01
49A2:  MOVWF  xC6
49A4:  MOVWF  xCA
49A6:  CALL   2EB8
....................    datah=i2c_read();                  /* msb */ 
49AA:  MOVLW  01
49AC:  MOVWF  00
49AE:  CALL   2FE4
49B2:  MOVFF  01,C2
....................    datal=i2c_read(0);                 /* lsb (=0.5 deg C) & No Ack */ 
49B6:  CLRF   00
49B8:  CALL   2FE4
49BC:  MOVFF  01,C3
....................    i2c_stop(); 
49C0:  BCF    F93.0
49C2:  NOP   
49C4:  BSF    F93.1
49C6:  BTFSS  F81.1
49C8:  BRA    49C6
49CA:  MOVLW  11
49CC:  MOVWF  00
49CE:  DECFSZ 00,F
49D0:  BRA    49CE
49D2:  BRA    49D4
49D4:  NOP   
49D6:  BSF    F93.0
49D8:  MOVLW  11
49DA:  MOVWF  00
49DC:  DECFSZ 00,F
49DE:  BRA    49DC
....................    if (BIT_TEST(datah,7)) /* defeat the two's complement data output; */ 
49E0:  BTFSS  xC2.7
49E2:  BRA    49EC
....................       return(0);          /* this means NO negative temps are returned */ 
49E4:  MOVLW  00
49E6:  MOVWF  01
49E8:  BRA    49FC
....................    else                   /* if datal is > 0.5C, round up the value */ 
49EA:  BRA    49FC
....................       return( ((datal & 0b10000000) ? datah+1 : datah) ); /* returns 0->125 deg C */ 
49EC:  BTFSS  xC3.7
49EE:  BRA    49F6
49F0:  MOVLW  01
49F2:  ADDWF  xC2,W
49F4:  BRA    49F8
49F6:  MOVF   xC2,W
49F8:  MOVWF  01
49FA:  BRA    49FC
.................... } 
49FC:  GOTO   4E94 (RETURN)
....................  
.................... int ds1624_eeprom_read(int device_addr, int address) { 
....................    int data; 
....................    int addr_mask; 
....................    addr_mask=i2c_addr_mask(device_addr); 
....................    i2c_start(); 
....................    i2c_write(DS1624_ID | addr_mask | I2CWRITE); /* mode is write */ 
....................    i2c_write(DS1624_CMD_ACCESSMEMORY);  /* access memory command */ 
....................    i2c_write(address);                  /* address of memory to read from */ 
....................    i2c_start();                         /* repeated start */ 
....................    i2c_write(DS1624_ID | addr_mask | I2CREAD); /* mode is read */ 
....................    data=i2c_read(0);                    /* read the data, No Ack the read */ 
....................    i2c_stop(); 
....................    return(data); 
.................... } 
....................  
.................... int ds1624_eeprom_write(int device_addr, int address, int data) { 
....................    int addr_mask; 
....................    addr_mask=i2c_addr_mask(device_addr); 
....................    i2c_start(); 
....................    i2c_write(DS1624_ID | addr_mask | I2CWRITE); /* mode is write */ 
....................    i2c_write(DS1624_CMD_ACCESSMEMORY);  /* access memory command */ 
....................    i2c_write(address);                  /* address of memory to write to */ 
....................    i2c_write(data);                     /* data to be written */ 
....................    i2c_stop(); 
....................    delay_ms(20); /* worst case write time for the eeprom */ 
....................    return (ds1624_eeprom_read(device_addr, address)); 
.................... } 
....................  
.................... long ds1624_eeprom_clear(int device_addr, int fill_byte) { 
....................    long i, memsum=0; 
....................    for (i=0;i<=255;i++) {    /* mind the (int) rollover! */ 
....................       ds1624_eeprom_write(device_addr,(int)i,fill_byte); 
....................       memsum+=ds1624_eeprom_read(device_addr,(int)i); 
....................       restart_wdt(); 
....................       } 
....................    return(memsum); 
.................... } 
....................  
.................... #include <../lib/reloj_c4.h> 
....................  
.................... void relojc4_display(byte d, byte num) 
.................... { 
....................       //d=d-'0'; 
....................       //numero=numero-'0'; 
....................       i2c_start();      //condicion de inicio 
*
4502:  BSF    F93.0
4504:  MOVLW  11
4506:  MOVWF  00
4508:  DECFSZ 00,F
450A:  BRA    4508
450C:  BSF    F93.1
450E:  MOVLW  11
4510:  MOVWF  00
4512:  DECFSZ 00,F
4514:  BRA    4512
4516:  BCF    F8A.0
4518:  BCF    F93.0
451A:  MOVLW  11
451C:  MOVWF  00
451E:  DECFSZ 00,F
4520:  BRA    451E
4522:  BCF    F8A.1
4524:  BCF    F93.1
....................       i2c_write(0xb0);  //direccion del esclavo con el que haremos la comunicacion 
4526:  MOVLW  B0
4528:  MOVWF  xCA
452A:  CALL   2EB8
....................       i2c_write(d);  //enviamos display 
452E:  MOVFF  C7,CA
4532:  CALL   2EB8
....................       i2c_stop();    //finalizacion de la comunicacion 
4536:  BCF    F93.0
4538:  NOP   
453A:  BSF    F93.1
453C:  BTFSS  F81.1
453E:  BRA    453C
4540:  MOVLW  11
4542:  MOVWF  00
4544:  DECFSZ 00,F
4546:  BRA    4544
4548:  BRA    454A
454A:  NOP   
454C:  BSF    F93.0
454E:  MOVLW  11
4550:  MOVWF  00
4552:  DECFSZ 00,F
4554:  BRA    4552
....................  
....................       delay_ms(1); 
4556:  MOVLW  01
4558:  MOVWF  xC9
455A:  CALL   2C72
....................       i2c_start();      //condicion de inicio 
455E:  BSF    F93.0
4560:  MOVLW  11
4562:  MOVWF  00
4564:  DECFSZ 00,F
4566:  BRA    4564
4568:  BSF    F93.1
456A:  MOVLW  11
456C:  MOVWF  00
456E:  DECFSZ 00,F
4570:  BRA    456E
4572:  BCF    F8A.0
4574:  BCF    F93.0
4576:  MOVLW  11
4578:  MOVWF  00
457A:  DECFSZ 00,F
457C:  BRA    457A
457E:  BCF    F8A.1
4580:  BCF    F93.1
....................       i2c_write(0xb0);  //direccion del esclavo con el que haremos la comunicacion 
4582:  MOVLW  B0
4584:  MOVWF  xCA
4586:  CALL   2EB8
....................       //if (num<0 || num>9) num=0; 
....................       i2c_write(num+'0');  //enviamos display 
458A:  MOVLW  30
458C:  ADDWF  xC8,W
458E:  MOVWF  xC9
4590:  MOVWF  xCA
4592:  CALL   2EB8
....................       i2c_stop();    //finalizacion de la comunicacion 
4596:  BCF    F93.0
4598:  NOP   
459A:  BSF    F93.1
459C:  BTFSS  F81.1
459E:  BRA    459C
45A0:  MOVLW  11
45A2:  MOVWF  00
45A4:  DECFSZ 00,F
45A6:  BRA    45A4
45A8:  BRA    45AA
45AA:  NOP   
45AC:  BSF    F93.0
45AE:  MOVLW  11
45B0:  MOVWF  00
45B2:  DECFSZ 00,F
45B4:  BRA    45B2
....................       delay_ms(1); 
45B6:  MOVLW  01
45B8:  MOVWF  xC9
45BA:  CALL   2C72
.................... } 
45BE:  RETLW  00
....................  
.................... void relojc4_enviar_comando(byte d) 
.................... { 
....................       i2c_start();      //condicion de inicio 
*
3B0E:  BSF    F93.0
3B10:  MOVLW  11
3B12:  MOVWF  00
3B14:  DECFSZ 00,F
3B16:  BRA    3B14
3B18:  BSF    F93.1
3B1A:  MOVLW  11
3B1C:  MOVWF  00
3B1E:  DECFSZ 00,F
3B20:  BRA    3B1E
3B22:  BCF    F8A.0
3B24:  BCF    F93.0
3B26:  MOVLW  11
3B28:  MOVWF  00
3B2A:  DECFSZ 00,F
3B2C:  BRA    3B2A
3B2E:  BCF    F8A.1
3B30:  BCF    F93.1
....................       i2c_write(0xb0);  //direccion del esclavo con el que haremos la comunicacion 
3B32:  MOVLW  B0
3B34:  MOVWF  xCA
3B36:  CALL   2EB8
....................       i2c_write(d);  //enviamos display 
3B3A:  MOVFF  C6,CA
3B3E:  CALL   2EB8
....................       i2c_stop();    //finalizacion de la comunicacion 
3B42:  BCF    F93.0
3B44:  NOP   
3B46:  BSF    F93.1
3B48:  BTFSS  F81.1
3B4A:  BRA    3B48
3B4C:  MOVLW  11
3B4E:  MOVWF  00
3B50:  DECFSZ 00,F
3B52:  BRA    3B50
3B54:  BRA    3B56
3B56:  NOP   
3B58:  BSF    F93.0
3B5A:  MOVLW  11
3B5C:  MOVWF  00
3B5E:  DECFSZ 00,F
3B60:  BRA    3B5E
.................... } 
3B62:  RETLW  00
....................  
....................  
.................... #include <../lib/sonido.h> 
.................... #define sonido 1 
.................... //PIN del altavoz 
.................... #define ALTAVOZ PIN_C0 
....................  
.................... void sdsa() 
.................... { 
....................    int j=0; 
....................    for (j=0; j<255; j++) 
....................    { 
....................    output_low(ALTAVOZ); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(ALTAVOZ); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
....................  
....................    for (j=255; j>0; j--) 
....................    { 
....................    output_low(ALTAVOZ); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(ALTAVOZ); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
.................... } 
....................  
.................... void sonido_beep() 
.................... { 
....................    int j=0; 
....................    for (j=0; j<150; j++) 
....................    { 
....................       output_high(ALTAVOZ); 
....................       delay_us(200); 
....................       output_low(ALTAVOZ); 
....................       delay_us(200); 
....................    } 
....................  
.................... } 
.................... void sonido_dolordecabeza() 
.................... { 
....................    int j=0; 
....................    for (j=0; j<1000; j++) 
....................    { 
....................       output_high(ALTAVOZ); 
....................       delay_us(20); 
....................       output_low(ALTAVOZ); 
....................       delay_us(20); 
....................    } 
....................  
.................... } 
....................  
.................... void sonido_voipvoip() 
.................... { 
....................    int i=0,j=0; 
*
2E20:  CLRF   xC1
2E22:  CLRF   xC2
....................    for (i=0; i<2; i++) 
2E24:  CLRF   xC1
2E26:  MOVF   xC1,W
2E28:  SUBLW  01
2E2A:  BNC   2E5C
....................    { 
....................  
....................    for (j=255; j>0; j--) 
2E2C:  MOVLW  FF
2E2E:  MOVWF  xC2
2E30:  MOVF   xC2,F
2E32:  BZ    2E58
....................    { 
....................    output_low(ALTAVOZ); 
2E34:  BCF    F94.0
2E36:  BCF    F8B.0
....................    delay_us(j); 
2E38:  MOVFF  C2,CC
2E3C:  RCALL  2E00
....................    delay_us(250); 
2E3E:  MOVLW  FA
2E40:  MOVWF  xCC
2E42:  RCALL  2E00
....................    output_high(ALTAVOZ); 
2E44:  BCF    F94.0
2E46:  BSF    F8B.0
....................    delay_us(j); 
2E48:  MOVFF  C2,CC
2E4C:  RCALL  2E00
....................    delay_us(150); 
2E4E:  MOVLW  96
2E50:  MOVWF  xCC
2E52:  RCALL  2E00
....................    } 
2E54:  DECF   xC2,F
2E56:  BRA    2E30
....................     
....................    } 
2E58:  INCF   xC1,F
2E5A:  BRA    2E26
.................... } 
2E5C:  GOTO   4BD2 (RETURN)
....................  
.................... void sonido_sirena() 
.................... { 
....................    int j=0; 
....................    for (j=255; j>0; j--) 
....................    { 
....................    output_low(ALTAVOZ); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(ALTAVOZ); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
....................    for (j=0; j<255; j++) 
....................    { 
....................    output_low(ALTAVOZ); 
....................    delay_us(j); 
....................    delay_us(250); 
....................    output_high(ALTAVOZ); 
....................    delay_us(j); 
....................    delay_us(150); 
....................    } 
.................... } 
....................  
....................  
.................... void sonido_laser() 
.................... { 
....................    int j=0; 
....................    for (j=440; j<1000; j++) 
....................    { 
....................       output_low(ALTAVOZ); 
....................       delay_us(j); 
....................       output_high(ALTAVOZ); 
....................       delay_us(j); 
....................    } 
.................... } 
....................  
.................... #include <../lib/1-wire.h> 
.................... #ifndef ONE_WIRE_C 
.................... #define ONE_WIRE_C 
....................  
.................... /* 
....................  * One wire (1-wire) driver for CCS C compiler. Suitable for use with devices 
....................  * such as the DS18B20 1-wire digital temperature sensor. 
....................  */ 
....................  
.................... #define ONE_WIRE_PIN PIN_A0 
....................  
.................... /* 
....................  * onewire_reset() 
....................  * Description: Initiates the one wire bus. 
....................  */ 
.................... // OK if just using a single permanently connected device 
.................... void onewire_reset() { 
....................     output_low(ONE_WIRE_PIN);       // pull the bus low for reset 
*
327E:  BCF    F92.0
3280:  BCF    F89.0
....................     delay_us(500); 
3282:  MOVLW  02
3284:  MOVWF  xCA
3286:  MOVLW  FA
3288:  MOVWF  xCC
328A:  RCALL  2E00
328C:  DECFSZ xCA,F
328E:  BRA    3286
....................     output_float(ONE_WIRE_PIN);     // float the bus high 
3290:  BSF    F92.0
....................     delay_us(500);                  // wait-out remaining initialisation window 
3292:  MOVLW  02
3294:  MOVWF  xCA
3296:  MOVLW  FA
3298:  MOVWF  xCC
329A:  RCALL  2E00
329C:  DECFSZ xCA,F
329E:  BRA    3296
....................     output_float(ONE_WIRE_PIN); 
32A0:  BSF    F92.0
.................... } 
32A2:  RETLW  00
....................  
....................  
.................... /* 
....................  * onewire_write(int8 data) 
....................  * Arguments: a byte of data. 
....................  * Description: writes a byte of data to the device. 
....................  */ 
.................... void onewire_write(int8 data) { 
....................     int8 count; 
....................  
....................     for(count = 0; count < 8; ++count) { 
32A4:  CLRF   xCB
32A6:  MOVF   xCB,W
32A8:  SUBLW  07
32AA:  BNC   32E2
....................         output_low(ONE_WIRE_PIN); 
32AC:  BCF    F92.0
32AE:  BCF    F89.0
....................         delay_us(2);                // pull 1-wire low to initiate write time-slot. 
32B0:  MOVLW  07
32B2:  MOVWF  00
32B4:  DECFSZ 00,F
32B6:  BRA    32B4
32B8:  BRA    32BA
....................         output_bit(ONE_WIRE_PIN, shift_right(&data, 1, 0)); // set output bit on 1-wire 
32BA:  BCF    FD8.0
32BC:  RRCF   xCA,F
32BE:  BC    32C4
32C0:  BCF    F89.0
32C2:  BRA    32C6
32C4:  BSF    F89.0
32C6:  BCF    F92.0
....................         delay_us(60);               // wait until end of write slot. 
32C8:  MOVLW  EF
32CA:  MOVWF  00
32CC:  DECFSZ 00,F
32CE:  BRA    32CC
32D0:  BRA    32D2
....................         output_float(ONE_WIRE_PIN); // set 1-wire high again, 
32D2:  BSF    F92.0
....................         delay_us(2);                // for more than 1us minimum. 
32D4:  MOVLW  07
32D6:  MOVWF  00
32D8:  DECFSZ 00,F
32DA:  BRA    32D8
32DC:  BRA    32DE
....................     } 
32DE:  INCF   xCB,F
32E0:  BRA    32A6
.................... } 
32E2:  RETLW  00
....................  
.................... /* 
....................  * onewire_read() 
....................  * Description: reads and returns a byte of data from the device. 
....................  */ 
.................... int onewire_read() { 
....................     int count, data; 
....................  
....................     for(count = 0; count < 8; ++count) { 
32E4:  CLRF   xCA
32E6:  MOVF   xCA,W
32E8:  SUBLW  07
32EA:  BNC   331E
....................         output_low(ONE_WIRE_PIN); 
32EC:  BCF    F92.0
32EE:  BCF    F89.0
....................         delay_us(2);                // pull 1-wire low to initiate read time-slot. 
32F0:  MOVLW  07
32F2:  MOVWF  00
32F4:  DECFSZ 00,F
32F6:  BRA    32F4
32F8:  BRA    32FA
....................         output_float(ONE_WIRE_PIN); // now let 1-wire float high, 
32FA:  BSF    F92.0
....................         delay_us(8);                // let device state stabilise, 
32FC:  MOVLW  1F
32FE:  MOVWF  00
3300:  DECFSZ 00,F
3302:  BRA    3300
3304:  BRA    3306
....................         shift_right(&data, 1, input(ONE_WIRE_PIN)); // and load result. 
3306:  BSF    F92.0
3308:  BTFSC  F80.0
330A:  BRA    3310
330C:  BCF    FD8.0
330E:  BRA    3312
3310:  BSF    FD8.0
3312:  RRCF   xCB,F
....................         delay_us(120);              // wait until end of read slot. 
3314:  MOVLW  78
3316:  MOVWF  xCC
3318:  RCALL  2E00
....................     } 
331A:  INCF   xCA,F
331C:  BRA    32E6
....................     return data; 
331E:  MOVFF  CB,01
.................... }  
3322:  RETLW  00
....................  
.................... #endif /*ONE_WIRE_C*/ 
....................  
.................... #include <../lib/ds18b20.h> 
.................... #ifndef DS1820_C 
.................... #define DS1820_C 
....................  
....................  
.................... float ds1820_read(); 
.................... void ds1820_configure(int8 TH, int8 TL, int8 config); 
....................  
.................... /* 
....................  * ds1820_read() 
....................  * Description: reads the ds18x20 device on the 1-wire bus and returns 
....................  *              the temperature 
....................  */ 
....................  
.................... float ds1820_read() { 
....................     int8 busy=0, temp1, temp2; 
*
34CA:  CLRF   xC1
....................     signed int16 temp3; 
....................     float result; 
....................  
....................     //ds1820_configure(0x00, 0x00, 0x00);     //9 bit resolution 
....................       
....................     onewire_reset(); 
34CC:  RCALL  327E
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
34CE:  MOVLW  CC
34D0:  MOVWF  xCA
34D2:  RCALL  32A4
....................     onewire_write(0x44);            //Start temperature conversion 
34D4:  MOVLW  44
34D6:  MOVWF  xCA
34D8:  RCALL  32A4
....................     
....................     while(busy == 0)                //Wait while busy (bus is low) 
....................     { 
34DA:  MOVF   xC1,F
34DC:  BNZ   34E6
....................         busy = onewire_read(); 
34DE:  RCALL  32E4
34E0:  MOVFF  01,C1
....................     } 
34E4:  BRA    34DA
....................  
....................     onewire_reset(); 
34E6:  RCALL  327E
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
34E8:  MOVLW  CC
34EA:  MOVWF  xCA
34EC:  RCALL  32A4
....................     onewire_write(0xBE);            //Read scratchpad 
34EE:  MOVLW  BE
34F0:  MOVWF  xCA
34F2:  RCALL  32A4
....................     temp1 = onewire_read(); 
34F4:  RCALL  32E4
34F6:  MOVFF  01,C2
....................     temp2 = onewire_read(); 
34FA:  RCALL  32E4
34FC:  MOVFF  01,C3
....................     temp3 = make16(temp2, temp1); 
3500:  MOVFF  C3,C5
3504:  MOVFF  C2,C4
....................  
....................     result = (float) temp3 / 2.0;   //Calculation for DS18S20 with 0.5 deg C resolution 
3508:  MOVFF  C5,CB
350C:  MOVFF  C4,CA
3510:  BRA    3324
3512:  MOVFF  00,CA
3516:  MOVFF  01,CB
351A:  MOVFF  02,CC
351E:  MOVFF  03,CD
3522:  MOVFF  03,D1
3526:  MOVFF  02,D0
352A:  MOVFF  01,CF
352E:  MOVFF  00,CE
3532:  CLRF   xD5
3534:  CLRF   xD4
3536:  CLRF   xD3
3538:  MOVLW  80
353A:  MOVWF  xD2
353C:  BRA    336E
353E:  MOVFF  03,C9
3542:  MOVFF  02,C8
3546:  MOVFF  01,C7
354A:  MOVFF  00,C6
....................     //result = (float) temp3 / 16.0;    //Calculation for DS18B20 
....................     return(result); 
354E:  MOVFF  C6,00
3552:  MOVFF  C7,01
3556:  MOVFF  C8,02
355A:  MOVFF  C9,03
.................... } 
355E:  RETLW  00
....................  
.................... /* 
....................  * ds1820_configure(int8 TH, int8 LH, int8 config) 
....................  * Description: writes configuration data to the DS18x20 device 
....................  * Arguments: alarm trigger high, alarm trigger low, configuration 
....................  */ 
....................  
.................... void ds1820_configure(int8 TH, int8 TL, int8 config) { 
....................     onewire_reset(); 
....................     onewire_write(0xCC);            //Skip ROM, address all devices 
....................     onewire_write(0x4E);            //Write to scratchpad 
....................     onewire_write(TH); 
....................     onewire_write(TL); 
....................     onewire_write(config); 
.................... } 
....................  
.................... #endif /*DS1820_C*/ 
....................  
.................... #include <../aplicacion_incubadora/incubadora.h> 
.................... #define VENT_1 PIN_D5 
.................... #define VENT_2 PIN_D4 
.................... #define CALEC_1 PIN_D7 
.................... #define CALEC_2 PIN_D6 
....................  
.................... void incubadora_ventilador(int1 encender) 
.................... { 
....................    if (encender==1) { 
*
324E:  DECFSZ xC1,W
3250:  BRA    325C
....................       output_bit(VENT_1,0); 
3252:  BCF    F8C.5
3254:  BCF    F95.5
....................       output_bit(VENT_2,1); 
3256:  BSF    F8C.4
3258:  BCF    F95.4
....................    } else { 
325A:  BRA    3264
....................       output_bit(VENT_1,0); 
325C:  BCF    F8C.5
325E:  BCF    F95.5
....................       output_bit(VENT_2,0); 
3260:  BCF    F8C.4
3262:  BCF    F95.4
....................    } 
.................... } 
3264:  RETLW  00
....................  
.................... void incubadora_calefaccion(int1 encender) 
.................... { 
....................    if (encender==1) { 
3266:  DECFSZ xC1,W
3268:  BRA    3274
....................       output_bit(CALEC_1,0); 
326A:  BCF    F8C.7
326C:  BCF    F95.7
....................       output_bit(CALEC_2,1); 
326E:  BSF    F8C.6
3270:  BCF    F95.6
....................    } else { 
3272:  BRA    327C
....................       output_bit(CALEC_1,0); 
3274:  BCF    F8C.7
3276:  BCF    F95.7
....................       output_bit(CALEC_2,0); 
3278:  BCF    F8C.6
327A:  BCF    F95.6
....................    } 
.................... } 
327C:  RETLW  00
....................  
.................... #include <../lib/servos.h> 
.................... #define servos 1 
.................... #define servos_A PIN_D2 
.................... #define servos_B PIN_D3 
....................  
.................... /* 
.................... 179-15 
.................... */ 
....................  
.................... #define servos_numero   2 
....................  
.................... int servos_p[servos_numero]={90,90}; 
.................... int16 servos_contador=0; 
.................... int int_servo=0; 
....................  
.................... void servos_off() 
.................... { 
....................    // Reloj a 48 Mhz. 
....................    //    -> Objetivo: Interrupcion cada 10 uS (10e-6) 
....................    //    -> ciclo cada 48000000/4 -> 83 nS (83.333e-9) 
....................    //    -> 120=0x78 ciclos. 
....................    //Configuramos el TIMER2 
....................  
....................    disable_interrupts(int_timer2); 
....................    printf ("-TIMER2 desconfigurado\r\n"); 
....................    printf ("-Servos desconectados\r\n"); 
.................... } 
....................  
.................... void servos_configurar() 
.................... { 
....................    // Reloj a 48 Mhz. 
....................    //    -> Objetivo: Interrupcion cada 10 uS (10e-6) 
....................    //    -> ciclo cada 48000000/4 -> 83 nS (83.333e-9) 
....................    //    -> 120=0x78 ciclos. 
....................    //Configuramos el TIMER2 
....................  
....................    servos_contador=0; 
*
2E60:  CLRF   x86
2E62:  CLRF   x85
....................    setup_timer_2(T2_DIV_BY_1,0x78,1); 
2E64:  MOVLW  00
2E66:  IORLW  04
2E68:  MOVWF  FCA
2E6A:  MOVLW  78
2E6C:  MOVWF  FCB
....................    enable_interrupts(int_timer2); 
2E6E:  BSF    F9D.1
....................    printf ("-TIMER2 Configurado\r\n"); 
2E70:  CLRF   xC1
2E72:  MOVF   xC1,W
2E74:  CALL   1B1C
2E78:  INCF   xC1,F
2E7A:  MOVWF  00
2E7C:  MOVF   00,W
2E7E:  BTFSS  F9E.4
2E80:  BRA    2E7E
2E82:  MOVWF  FAD
2E84:  MOVLW  15
2E86:  SUBWF  xC1,W
2E88:  BNZ   2E72
....................    printf ("-Servos configurados\r\n"); 
2E8A:  CLRF   xC1
2E8C:  MOVF   xC1,W
2E8E:  CALL   1B4C
2E92:  INCF   xC1,F
2E94:  MOVWF  00
2E96:  MOVF   00,W
2E98:  BTFSS  F9E.4
2E9A:  BRA    2E98
2E9C:  MOVWF  FAD
2E9E:  MOVLW  16
2EA0:  SUBWF  xC1,W
2EA2:  BNZ   2E8C
.................... } 
2EA4:  GOTO   4BD6 (RETURN)
....................  
....................  
.................... #int_timer2 
.................... void servos_inttimer() 
.................... { 
....................  
....................    servos_contador++; 
*
2C1A:  INCF   x85,F
2C1C:  BTFSC  FD8.2
2C1E:  INCF   x86,F
....................    //Servos Futaba 3003 
....................    // Pulso minimo 0.3 mS 
....................    // Pulso maximo 2.1 mS 
....................    if (servos_contador>servos_p[0]+45) output_low(servos_A); 
2C20:  MOVLW  2D
2C22:  ADDWF  x83,W
2C24:  MOVF   x86,F
2C26:  BNZ   2C2E
2C28:  SUBWF  x85,W
2C2A:  BZ    2C32
2C2C:  BNC   2C32
2C2E:  BCF    F95.2
2C30:  BCF    F8C.2
....................    if (servos_contador>servos_p[1]+45) output_low(servos_B); 
2C32:  MOVLW  2D
2C34:  ADDWF  x84,W
2C36:  MOVF   x86,F
2C38:  BNZ   2C40
2C3A:  SUBWF  x85,W
2C3C:  BZ    2C44
2C3E:  BNC   2C44
2C40:  BCF    F95.3
2C42:  BCF    F8C.3
....................    if (servos_contador>1998) 
2C44:  MOVF   x86,W
2C46:  SUBLW  06
2C48:  BC    2C62
2C4A:  XORLW  FF
2C4C:  BNZ   2C54
2C4E:  MOVF   x85,W
2C50:  SUBLW  CE
2C52:  BC    2C62
....................    { 
....................       output_high(servos_A); 
2C54:  BCF    F95.2
2C56:  BSF    F8C.2
....................       output_high(servos_B); 
2C58:  BCF    F95.3
2C5A:  BSF    F8C.3
....................       servos_contador=0; 
2C5C:  CLRF   x86
2C5E:  CLRF   x85
....................       int_servo++; 
2C60:  INCF   x87,F
....................    } 
.................... } 
....................  
2C62:  BCF    F9E.1
2C64:  GOTO   187C
.................... void servos_mover_a(int grados, int servo) 
.................... { 
....................    switch (servo) 
....................    { 
*
388A:  MOVF   xC2,W
388C:  XORLW  01
388E:  BZ    3896
3890:  XORLW  03
3892:  BZ    389C
3894:  BRA    38A2
....................       case 1: 
....................          servos_p[0]=grados; 
3896:  MOVFF  C1,83
....................          break; 
389A:  BRA    38A2
....................       case 2: 
....................          servos_p[1]=grados; 
389C:  MOVFF  C1,84
....................          break; 
38A0:  BRA    38A2
....................    } 
....................    //int_servo=0; 
....................    //while (int_servo<50) 
....................    //{ 
....................    //} 
....................    //servos_off(); 
.................... } 
38A2:  RETLW  00
....................  
.................... void servos_modificar(int grados, int servo, int direccion) 
.................... { 
....................    int posicion; 
....................  
....................  
....................    switch (servo) 
....................    { 
....................       case 1: 
....................          posicion=grados*direccion+servos_p[0]; 
....................          servos_mover_a(posicion,servo); 
....................          break; 
....................       case 2: 
....................          posicion=grados*direccion+servos_p[1]; 
....................          servos_mover_a(posicion,servo); 
....................          break; 
....................    } 
.................... } 
....................  
....................  
....................  
.................... void servos_control_auto() 
.................... { 
....................    int espera=0; 
....................    int grados; 
....................    int direccion=10; 
....................    while(true) 
....................    { 
....................       if (espera>10) 
....................       { 
....................          espera=0; 
....................          grados=grados+direccion; 
....................          if (grados>180) {grados=180; direccion=-direccion;} 
....................          if (grados<=1) {grados=1; direccion=-direccion;} 
....................          servos_mover_a(grados,1); 
....................          servos_mover_a(180-grados,2); 
....................          printf("Servo: %u    \r",grados); 
....................       } else { 
....................          delay_ms(10); 
....................          espera++; 
....................          //printf ("E:%u\r\n",espera); 
....................       } 
....................    } 
.................... } 
....................  
.................... void servos_comprobar() 
.................... { 
....................    int j=0; 
....................    printf (usb_cdc_putc, "Comprobando servos...\r\n"); 
....................    servos_configurar(); 
....................    servos_mover_a(0, 1); 
....................    servos_mover_a(0, 0); 
....................    delay_ms(100); 
....................  
....................    while (!usb_cdc_kbhit()) 
....................    { 
....................       for (  j=0; j<180; j+=10) 
....................       { 
....................          servos_mover_a(j, 1); 
....................          servos_mover_a(180-j, 2); 
....................          printf ("Servos a %u y %u respectivamente.\r\n", j, 180-j); 
....................          delay_ms(100); 
....................          if (usb_cdc_kbhit()) break; 
....................       } 
....................  
....................    } 
.................... } 
....................  
....................  
....................  
.................... char comando[21]; 
.................... int ah=0; 
.................... int am=0; 
.................... int alarma=0; 
.................... int buffer=0; 
.................... int j=0; 
.................... byte horas=0; 
.................... byte minutos=0; 
.................... byte segundos=0; 
.................... byte dia=0; 
.................... byte mes=0; 
.................... byte ano=0; 
.................... int temp; 
.................... int inter=0; 
.................... int dig[4]; 
.................... float objetivo,temp2,tmp; 
.................... int tempt=0, calefaccion=0, ventilador=0, grados=30, direccion=1; 
....................  
.................... // Rutina de gestión de pulsaciones serie 
.................... void aure_serie() 
.................... { 
....................    switch(keypress) 
....................    { 
*
3B64:  MOVF   x82,W
3B66:  XORLW  55
3B68:  BZ    3BB2
3B6A:  XORLW  20
3B6C:  BZ    3BB2
3B6E:  XORLW  0F
3B70:  BZ    3BCC
3B72:  XORLW  20
3B74:  BZ    3BCC
3B76:  XORLW  22
3B78:  BZ    3BD6
3B7A:  XORLW  20
3B7C:  BZ    3BD6
3B7E:  XORLW  3B
3B80:  BZ    3BDE
3B82:  XORLW  20
3B84:  BZ    3BDE
3B86:  XORLW  35
3B88:  BZ    3BE8
3B8A:  XORLW  20
3B8C:  BZ    3BE8
3B8E:  XORLW  34
3B90:  BZ    3BF0
3B92:  XORLW  20
3B94:  BZ    3BF0
3B96:  XORLW  69
3B98:  BZ    3C5C
3B9A:  XORLW  06
3B9C:  BZ    3C6C
3B9E:  XORLW  20
3BA0:  BTFSC  FD8.2
3BA2:  BRA    3C7C
3BA4:  XORLW  16
3BA6:  BTFSC  FD8.2
3BA8:  BRA    3FFE
3BAA:  XORLW  A1
3BAC:  BTFSC  FD8.2
3BAE:  BRA    403A
3BB0:  BRA    40C8
....................       //Si recibimos 'U' o 'u'imprimimos "Hola mundo" por el puerto USB 
....................       case 'U': 
....................       case 'u': 
....................          printf (usb_cdc_putc, "\r\n¡¡Hola mundo!!\r\n"); 
3BB2:  CLRF   xC1
3BB4:  MOVF   xC1,W
3BB6:  CALL   1B7E
3BBA:  INCF   xC1,F
3BBC:  MOVWF  00
3BBE:  MOVWF  xD3
3BC0:  CALL   322C
3BC4:  MOVLW  12
3BC6:  SUBWF  xC1,W
3BC8:  BNZ   3BB4
....................          break; 
3BCA:  BRA    4180
....................       case 'z': 
....................       case 'Z': 
....................          incubadora_ventilador(1); 
3BCC:  MOVLW  01
3BCE:  MOVWF  xC1
3BD0:  CALL   324E
....................          break; 
3BD4:  BRA    4180
....................       case 'x': 
....................       case 'X': 
....................          incubadora_ventilador(0); 
3BD6:  CLRF   xC1
3BD8:  CALL   324E
....................          break; 
3BDC:  BRA    4180
....................       case 'c': 
....................       case 'C': 
....................          incubadora_calefaccion(1); 
3BDE:  MOVLW  01
3BE0:  MOVWF  xC1
3BE2:  CALL   3266
....................          break; 
3BE6:  BRA    4180
....................       case 'v': 
....................       case 'V': 
....................          incubadora_calefaccion(0); 
3BE8:  CLRF   xC1
3BEA:  CALL   3266
....................          break; 
3BEE:  BRA    4180
....................       case 'b': 
....................       case 'B': 
....................          printf(usb_cdc_putc,"Leyendo...\r\n"); 
3BF0:  CLRF   xC1
3BF2:  MOVF   xC1,W
3BF4:  CALL   1BAC
3BF8:  INCF   xC1,F
3BFA:  MOVWF  00
3BFC:  MOVWF  xD3
3BFE:  CALL   322C
3C02:  MOVLW  0C
3C04:  SUBWF  xC1,W
3C06:  BNZ   3BF2
....................          printf(usb_cdc_putc,"Sensor:%2.1f\r\n", ds1820_read()); 
3C08:  RCALL  34CA
3C0A:  MOVFF  00,C1
3C0E:  MOVFF  01,C2
3C12:  MOVFF  02,C3
3C16:  MOVFF  03,C4
3C1A:  CLRF   xC5
3C1C:  MOVF   xC5,W
3C1E:  CALL   1BD4
3C22:  INCF   xC5,F
3C24:  MOVWF  00
3C26:  MOVWF  xD3
3C28:  CALL   322C
3C2C:  MOVLW  07
3C2E:  SUBWF  xC5,W
3C30:  BNZ   3C1C
3C32:  MOVLW  01
3C34:  MOVWF  FE9
3C36:  MOVFF  C4,C9
3C3A:  MOVFF  C3,C8
3C3E:  MOVFF  C2,C7
3C42:  MOVFF  C1,C6
3C46:  MOVWF  xCA
3C48:  BRA    370A
3C4A:  MOVLW  0D
3C4C:  MOVWF  xD3
3C4E:  CALL   322C
3C52:  MOVLW  0A
3C54:  MOVWF  xD3
3C56:  CALL   322C
....................          break; 
3C5A:  BRA    4180
....................       case '+': 
....................          grados=grados+10; 
3C5C:  MOVLW  0A
3C5E:  ADDWF  xBD,F
....................          servos_mover_a(grados, 2); 
3C60:  MOVFF  BD,C1
3C64:  MOVLW  02
3C66:  MOVWF  xC2
3C68:  RCALL  388A
....................          break; 
3C6A:  BRA    4180
....................        case '-': 
....................          grados=grados-10; 
3C6C:  MOVLW  0A
3C6E:  SUBWF  xBD,F
....................          servos_mover_a(grados, 2); 
3C70:  MOVFF  BD,C1
3C74:  MOVLW  02
3C76:  MOVWF  xC2
3C78:  RCALL  388A
....................          break;   
3C7A:  BRA    4180
....................       case 0x0D: printf(usb_cdc_putc, "[CR]\r\n"); // Si he pulsado la tecla [Intro] 
3C7C:  CLRF   xC1
3C7E:  MOVF   xC1,W
3C80:  CALL   1BFE
3C84:  INCF   xC1,F
3C86:  MOVWF  00
3C88:  MOVWF  xD3
3C8A:  CALL   322C
3C8E:  MOVLW  06
3C90:  SUBWF  xC1,W
3C92:  BNZ   3C7E
....................          switch(comando[0]) 
....................          { 
3C94:  MOVF   x88,W
3C96:  XORLW  48
3C98:  BZ    3CB8
3C9A:  XORLW  09
3C9C:  BZ    3D78
3C9E:  XORLW  15
3CA0:  BTFSC  FD8.2
3CA2:  BRA    3E00
3CA4:  XORLW  35
3CA6:  BTFSC  FD8.2
3CA8:  BRA    3EB2
3CAA:  XORLW  31
3CAC:  BTFSC  FD8.2
3CAE:  BRA    3EEA
3CB0:  XORLW  03
3CB2:  BTFSC  FD8.2
3CB4:  BRA    3F46
3CB6:  BRA    3F96
....................             case 'H': 
....................                // 13:58:13|12/34/04 
....................                horas=(comando[1]-'0')*10+comando[2]-'0'; 
3CB8:  MOVLW  30
3CBA:  SUBWF  x89,W
3CBC:  MULLW  0A
3CBE:  MOVF   FF3,W
3CC0:  ADDWF  x8A,W
3CC2:  ADDLW  D0
3CC4:  MOVWF  xA2
....................                minutos=(comando[4]-'0')*10+comando[5]-'0'; 
3CC6:  MOVLW  30
3CC8:  SUBWF  x8C,W
3CCA:  MULLW  0A
3CCC:  MOVF   FF3,W
3CCE:  ADDWF  x8D,W
3CD0:  ADDLW  D0
3CD2:  MOVWF  xA3
....................                segundos=(comando[7]-'0')*10+comando[8]-'0'; printf("[HA]\r\n"); 
3CD4:  MOVLW  30
3CD6:  SUBWF  x8F,W
3CD8:  MULLW  0A
3CDA:  MOVF   FF3,W
3CDC:  ADDWF  x90,W
3CDE:  ADDLW  D0
3CE0:  MOVWF  xA4
3CE2:  CLRF   xC1
3CE4:  MOVF   xC1,W
3CE6:  CALL   1C20
3CEA:  INCF   xC1,F
3CEC:  MOVWF  00
3CEE:  MOVF   00,W
3CF0:  BTFSS  F9E.4
3CF2:  BRA    3CF0
3CF4:  MOVWF  FAD
3CF6:  MOVLW  06
3CF8:  SUBWF  xC1,W
3CFA:  BNZ   3CE4
....................                dia=(comando[10]-'0')*10+comando[11]-'0'; 
3CFC:  MOVLW  30
3CFE:  SUBWF  x92,W
3D00:  MULLW  0A
3D02:  MOVF   FF3,W
3D04:  ADDWF  x93,W
3D06:  ADDLW  D0
3D08:  MOVWF  xA5
....................                mes=(comando[13]-'0')*10+comando[14]-'0'; 
3D0A:  MOVLW  30
3D0C:  SUBWF  x95,W
3D0E:  MULLW  0A
3D10:  MOVF   FF3,W
3D12:  ADDWF  x96,W
3D14:  ADDLW  D0
3D16:  MOVWF  xA6
....................                ano=(comando[16]-'0')*10+comando[17]-'0'; printf("[FA]\r\n"); 
3D18:  MOVLW  30
3D1A:  SUBWF  x98,W
3D1C:  MULLW  0A
3D1E:  MOVF   FF3,W
3D20:  ADDWF  x99,W
3D22:  ADDLW  D0
3D24:  MOVWF  xA7
3D26:  CLRF   xC1
3D28:  MOVF   xC1,W
3D2A:  CALL   1C42
3D2E:  INCF   xC1,F
3D30:  MOVWF  00
3D32:  MOVF   00,W
3D34:  BTFSS  F9E.4
3D36:  BRA    3D34
3D38:  MOVWF  FAD
3D3A:  MOVLW  06
3D3C:  SUBWF  xC1,W
3D3E:  BNZ   3D28
....................                ds1307_set_date_time(dia, mes, ano, 1, horas, minutos, segundos); 
3D40:  MOVFF  A5,C1
3D44:  MOVFF  A6,C2
3D48:  MOVFF  A7,C3
3D4C:  MOVLW  01
3D4E:  MOVWF  xC4
3D50:  MOVFF  A2,C5
3D54:  MOVFF  A3,C6
3D58:  MOVFF  A4,C7
3D5C:  BRA    38C8
....................                printf(usb_cdc_putc, "[OK]\r\n"); 
3D5E:  CLRF   xC1
3D60:  MOVF   xC1,W
3D62:  CALL   1C64
3D66:  INCF   xC1,F
3D68:  MOVWF  00
3D6A:  MOVWF  xD3
3D6C:  CALL   322C
3D70:  MOVLW  06
3D72:  SUBWF  xC1,W
3D74:  BNZ   3D60
....................                break; 
3D76:  BRA    3FF6
....................             case 'A': 
....................                alarma=1; 
3D78:  MOVLW  01
3D7A:  MOVWF  x9F
....................                // 13:58:13|12/34/04 
....................                ah=(comando[1]-'0')*10+comando[2]-'0'; 
3D7C:  MOVLW  30
3D7E:  SUBWF  x89,W
3D80:  MULLW  0A
3D82:  MOVF   FF3,W
3D84:  ADDWF  x8A,W
3D86:  ADDLW  D0
3D88:  MOVWF  x9D
....................                am=(comando[4]-'0')*10+comando[5]-'0'; 
3D8A:  MOVLW  30
3D8C:  SUBWF  x8C,W
3D8E:  MULLW  0A
3D90:  MOVF   FF3,W
3D92:  ADDWF  x8D,W
3D94:  ADDLW  D0
3D96:  MOVWF  x9E
....................                printf(usb_cdc_putc, "Alarma conectada y configurada a las %02d:%02d.\r\n",ah,am); 
3D98:  CLRF   xC1
3D9A:  MOVF   xC1,W
3D9C:  CALL   1C86
3DA0:  INCF   xC1,F
3DA2:  MOVWF  00
3DA4:  MOVWF  xD3
3DA6:  CALL   322C
3DAA:  MOVLW  25
3DAC:  SUBWF  xC1,W
3DAE:  BNZ   3D9A
3DB0:  MOVFF  9D,C2
3DB4:  MOVLW  01
3DB6:  MOVWF  xC3
3DB8:  RCALL  39D2
3DBA:  MOVLW  3A
3DBC:  MOVWF  xD3
3DBE:  CALL   322C
3DC2:  MOVFF  9E,C2
3DC6:  MOVLW  01
3DC8:  MOVWF  xC3
3DCA:  RCALL  39D2
3DCC:  MOVLW  2E
3DCE:  MOVWF  xD3
3DD0:  CALL   322C
3DD4:  MOVLW  0D
3DD6:  MOVWF  xD3
3DD8:  CALL   322C
3DDC:  MOVLW  0A
3DDE:  MOVWF  xD3
3DE0:  CALL   322C
....................                printf("[OK]\r\n"); 
3DE4:  CLRF   xC1
3DE6:  MOVF   xC1,W
3DE8:  CALL   1C64
3DEC:  INCF   xC1,F
3DEE:  MOVWF  00
3DF0:  MOVF   00,W
3DF2:  BTFSS  F9E.4
3DF4:  BRA    3DF2
3DF6:  MOVWF  FAD
3DF8:  MOVLW  06
3DFA:  SUBWF  xC1,W
3DFC:  BNZ   3DE6
....................                break; 
3DFE:  BRA    3FF6
....................             case 'T': 
....................                printf (usb_cdc_putc, "Volcado de temperaturas:\r\n"); 
3E00:  CLRF   xC1
3E02:  MOVF   xC1,W
3E04:  CALL   1CD2
3E08:  INCF   xC1,F
3E0A:  MOVWF  00
3E0C:  MOVWF  xD3
3E0E:  CALL   322C
3E12:  MOVLW  1A
3E14:  SUBWF  xC1,W
3E16:  BNZ   3E02
....................                for (j=0; j<235; j++) 
3E18:  CLRF   xA1
3E1A:  MOVF   xA1,W
3E1C:  SUBLW  EA
3E1E:  BNC   3E9A
....................                { 
....................                   printf (usb_cdc_putc, "<BO:%04u-%04u>",j,read_eeprom(j)); 
3E20:  MOVFF  FF2,C1
3E24:  BCF    FF2.7
3E26:  MOVFF  A1,FA9
3E2A:  BCF    FA6.6
3E2C:  BCF    FA6.7
3E2E:  BSF    FA6.0
3E30:  MOVF   FA8,W
3E32:  BTFSC  xC1.7
3E34:  BSF    FF2.7
3E36:  MOVWF  xC2
3E38:  CLRF   xC3
3E3A:  MOVF   xC3,W
3E3C:  CALL   1D08
3E40:  INCF   xC3,F
3E42:  MOVWF  00
3E44:  MOVFF  00,D3
3E48:  CALL   322C
3E4C:  MOVLW  04
3E4E:  SUBWF  xC3,W
3E50:  BNZ   3E3A
3E52:  MOVLW  01
3E54:  MOVWF  xC4
3E56:  MOVLW  30
3E58:  MOVWF  xD3
3E5A:  CALL   322C
3E5E:  DECFSZ xC4,F
3E60:  BRA    3E56
3E62:  MOVFF  A1,C6
3E66:  MOVLW  03
3E68:  MOVWF  xC7
3E6A:  RCALL  3AA2
3E6C:  MOVLW  2D
3E6E:  MOVWF  xD3
3E70:  CALL   322C
3E74:  MOVLW  01
3E76:  MOVWF  xC5
3E78:  MOVLW  30
3E7A:  MOVWF  xD3
3E7C:  CALL   322C
3E80:  DECFSZ xC5,F
3E82:  BRA    3E78
3E84:  MOVFF  C2,C6
3E88:  MOVLW  03
3E8A:  MOVWF  xC7
3E8C:  RCALL  3AA2
3E8E:  MOVLW  3E
3E90:  MOVWF  xD3
3E92:  CALL   322C
....................                } 
3E96:  INCF   xA1,F
3E98:  BRA    3E1A
....................                printf(usb_cdc_putc, "[OK]\r\n"); 
3E9A:  CLRF   xC1
3E9C:  MOVF   xC1,W
3E9E:  CALL   1C64
3EA2:  INCF   xC1,F
3EA4:  MOVWF  00
3EA6:  MOVWF  xD3
3EA8:  CALL   322C
3EAC:  MOVLW  06
3EAE:  SUBWF  xC1,W
3EB0:  BNZ   3E9C
....................             case 'a': 
....................                alarma=0; 
3EB2:  CLRF   x9F
....................                printf("usb_cdc_putc, Alarma apagada.\r\n"); 
3EB4:  CLRF   xC1
3EB6:  MOVF   xC1,W
3EB8:  CALL   1D32
3EBC:  INCF   xC1,F
3EBE:  MOVWF  00
3EC0:  MOVF   00,W
3EC2:  BTFSS  F9E.4
3EC4:  BRA    3EC2
3EC6:  MOVWF  FAD
3EC8:  MOVLW  1F
3ECA:  SUBWF  xC1,W
3ECC:  BNZ   3EB6
....................                printf("usb_cdc_putc, [OK]\r\n"); 
3ECE:  CLRF   xC1
3ED0:  MOVF   xC1,W
3ED2:  CALL   1D6C
3ED6:  INCF   xC1,F
3ED8:  MOVWF  00
3EDA:  MOVF   00,W
3EDC:  BTFSS  F9E.4
3EDE:  BRA    3EDC
3EE0:  MOVWF  FAD
3EE2:  MOVLW  14
3EE4:  SUBWF  xC1,W
3EE6:  BNZ   3ED0
....................                break; 
3EE8:  BRA    3FF6
....................              case 'P': 
....................                disable_interrupts(GLOBAL); 
3EEA:  BCF    FF2.6
3EEC:  BCF    FF2.7
3EEE:  BTFSC  FF2.7
3EF0:  BRA    3EEC
....................                printf(usb_cdc_putc, "Ejecutando prueba...\r\n"); 
3EF2:  CLRF   xC1
3EF4:  MOVF   xC1,W
3EF6:  CALL   1D9C
3EFA:  INCF   xC1,F
3EFC:  MOVWF  00
3EFE:  MOVWF  xD3
3F00:  CALL   322C
3F04:  MOVLW  16
3F06:  SUBWF  xC1,W
3F08:  BNZ   3EF4
....................                relojc4_enviar_comando(0x06); 
3F0A:  MOVLW  06
3F0C:  MOVWF  xC6
3F0E:  RCALL  3B0E
....................                printf (usb_cdc_putc, "Prueba ejecutada.\r\n"); 
3F10:  CLRF   xC1
3F12:  MOVF   xC1,W
3F14:  CALL   1DCE
3F18:  INCF   xC1,F
3F1A:  MOVWF  00
3F1C:  MOVWF  xD3
3F1E:  CALL   322C
3F22:  MOVLW  13
3F24:  SUBWF  xC1,W
3F26:  BNZ   3F12
....................                printf(usb_cdc_putc, "[OK]\r\n"); 
3F28:  CLRF   xC1
3F2A:  MOVF   xC1,W
3F2C:  CALL   1C64
3F30:  INCF   xC1,F
3F32:  MOVWF  00
3F34:  MOVWF  xD3
3F36:  CALL   322C
3F3A:  MOVLW  06
3F3C:  SUBWF  xC1,W
3F3E:  BNZ   3F2A
....................                enable_interrupts(GLOBAL); 
3F40:  MOVLW  C0
3F42:  IORWF  FF2,F
....................                break; 
3F44:  BRA    3FF6
....................              case 'S': 
....................                printf(usb_cdc_putc, "Ejecutando sirena...\r\n"); 
3F46:  CLRF   xC1
3F48:  MOVF   xC1,W
3F4A:  CALL   1DFC
3F4E:  INCF   xC1,F
3F50:  MOVWF  00
3F52:  MOVWF  xD3
3F54:  CALL   322C
3F58:  MOVLW  16
3F5A:  SUBWF  xC1,W
3F5C:  BNZ   3F48
....................                relojc4_enviar_comando(0x05); 
3F5E:  MOVLW  05
3F60:  MOVWF  xC6
3F62:  RCALL  3B0E
....................                printf (usb_cdc_putc, "Sirena ejecutada.\r\n"); 
3F64:  CLRF   xC1
3F66:  MOVF   xC1,W
3F68:  CALL   1E2E
3F6C:  INCF   xC1,F
3F6E:  MOVWF  00
3F70:  MOVWF  xD3
3F72:  CALL   322C
3F76:  MOVLW  13
3F78:  SUBWF  xC1,W
3F7A:  BNZ   3F66
....................                printf(usb_cdc_putc, "[OK]\r\n"); 
3F7C:  CLRF   xC1
3F7E:  MOVF   xC1,W
3F80:  CALL   1C64
3F84:  INCF   xC1,F
3F86:  MOVWF  00
3F88:  MOVWF  xD3
3F8A:  CALL   322C
3F8E:  MOVLW  06
3F90:  SUBWF  xC1,W
3F92:  BNZ   3F7E
....................                break; 
3F94:  BRA    3FF6
....................              default: 
....................                comando[20]=0x00; 
3F96:  CLRF   x9C
....................                printf (usb_cdc_putc, "Comando desconocido (%s)\r\n",comando); 
3F98:  CLRF   xC1
3F9A:  MOVF   xC1,W
3F9C:  CALL   1E5C
3FA0:  INCF   xC1,F
3FA2:  MOVWF  00
3FA4:  MOVWF  xD3
3FA6:  CALL   322C
3FAA:  MOVLW  15
3FAC:  SUBWF  xC1,W
3FAE:  BNZ   3F9A
3FB0:  CLRF   FEA
3FB2:  MOVLW  88
3FB4:  MOVWF  FE9
3FB6:  MOVLW  00
3FB8:  IORWF  FEF,W
3FBA:  BZ    3FDC
3FBC:  MOVFF  FEA,C3
3FC0:  MOVFF  FE9,C2
3FC4:  MOVFF  FEF,D3
3FC8:  CALL   322C
3FCC:  MOVFF  C3,FEA
3FD0:  MOVFF  C2,FE9
3FD4:  INCF   FE9,F
3FD6:  BTFSC  FD8.2
3FD8:  INCF   FEA,F
3FDA:  BRA    3FB6
3FDC:  MOVLW  29
3FDE:  MOVWF  xD3
3FE0:  CALL   322C
3FE4:  MOVLW  0D
3FE6:  MOVWF  xD3
3FE8:  CALL   322C
3FEC:  MOVLW  0A
3FEE:  MOVWF  xD3
3FF0:  CALL   322C
....................              break; 
3FF4:  BRA    3FF6
....................          } 
....................          comando[0]='0'; 
3FF6:  MOVLW  30
3FF8:  MOVWF  x88
....................          buffer=0; 
3FFA:  CLRF   xA0
....................          break; 
3FFC:  BRA    4180
....................       case 0x1B: 
....................          printf(usb_cdc_putc, "[Esc] Reset de cpu...\r\n"); // Si he pulsado la tecla [Escape] 
3FFE:  CLRF   xC1
4000:  MOVF   xC1,W
4002:  CALL   1E92
4006:  INCF   xC1,F
4008:  MOVWF  00
400A:  MOVWF  xD3
400C:  CALL   322C
4010:  MOVLW  17
4012:  SUBWF  xC1,W
4014:  BNZ   4000
....................          delay_ms(250); 
4016:  MOVLW  FA
4018:  MOVWF  xC9
401A:  CALL   2C72
....................          printf(usb_cdc_putc, "Reseteando..."); 
401E:  CLRF   xC1
4020:  MOVF   xC1,W
4022:  CALL   1EC4
4026:  INCF   xC1,F
4028:  MOVWF  00
402A:  MOVWF  xD3
402C:  CALL   322C
4030:  MOVLW  0D
4032:  SUBWF  xC1,W
4034:  BNZ   4020
....................          reset_cpu(); 
4036:  RESET
....................          break; 
4038:  BRA    4180
....................       case 'º': 
....................          printf(usb_cdc_putc, "Reset a bootloader\r\n"); 
403A:  CLRF   xC1
403C:  MOVF   xC1,W
403E:  CALL   1EEC
4042:  INCF   xC1,F
4044:  MOVWF  00
4046:  MOVWF  xD3
4048:  CALL   322C
404C:  MOVLW  14
404E:  SUBWF  xC1,W
4050:  BNZ   403C
....................          write_eeprom(0,'B'); 
4052:  CLRF   FA9
4054:  MOVLW  42
4056:  MOVWF  FA8
4058:  BCF    FA6.6
405A:  BCF    FA6.7
405C:  BSF    FA6.2
405E:  MOVFF  FF2,00
4062:  BCF    FF2.7
4064:  MOVLB  F
4066:  MOVLW  55
4068:  MOVWF  FA7
406A:  MOVLW  AA
406C:  MOVWF  FA7
406E:  BSF    FA6.1
4070:  BTFSC  FA6.1
4072:  BRA    4070
4074:  BCF    FA6.2
4076:  MOVF   00,W
4078:  IORWF  FF2,F
....................          printf ("."); 
407A:  MOVLW  2E
407C:  BTFSS  F9E.4
407E:  BRA    407C
4080:  MOVWF  FAD
....................          disable_interrupts(GLOBAL); 
4082:  BCF    FF2.6
4084:  BCF    FF2.7
4086:  BTFSC  FF2.7
4088:  BRA    4084
....................          delay_ms(250); 
408A:  MOVLW  FA
408C:  MOVLB  0
408E:  MOVWF  xC9
4090:  CALL   2C72
....................          printf ("."); 
4094:  MOVLW  2E
4096:  BTFSS  F9E.4
4098:  BRA    4096
409A:  MOVWF  FAD
....................          delay_ms(250); 
409C:  MOVLW  FA
409E:  MOVWF  xC9
40A0:  CALL   2C72
....................          printf ("."); 
40A4:  MOVLW  2E
40A6:  BTFSS  F9E.4
40A8:  BRA    40A6
40AA:  MOVWF  FAD
....................          delay_ms(250); 
40AC:  MOVLW  FA
40AE:  MOVWF  xC9
40B0:  CALL   2C72
....................          printf ("."); 
40B4:  MOVLW  2E
40B6:  BTFSS  F9E.4
40B8:  BRA    40B6
40BA:  MOVWF  FAD
....................          delay_ms(250); 
40BC:  MOVLW  FA
40BE:  MOVWF  xC9
40C0:  CALL   2C72
....................          reset_cpu(); 
40C4:  RESET
....................          break; 
40C6:  BRA    4180
....................       default: 
....................          comando[20]=0x00; 
40C8:  CLRF   x9C
....................          comando[buffer]=keypress; 
40CA:  CLRF   03
40CC:  MOVF   xA0,W
40CE:  ADDLW  88
40D0:  MOVWF  FE9
40D2:  MOVLW  00
40D4:  ADDWFC 03,W
40D6:  MOVWF  FEA
40D8:  MOVFF  82,FEF
....................          ++buffer; 
40DC:  INCF   xA0,F
....................          if (buffer>20) {printf("[BO]\r\n"); buffer=0;} 
40DE:  MOVF   xA0,W
40E0:  SUBLW  14
40E2:  BC    4100
40E4:  CLRF   xC1
40E6:  MOVF   xC1,W
40E8:  CALL   1F1C
40EC:  INCF   xC1,F
40EE:  MOVWF  00
40F0:  MOVF   00,W
40F2:  BTFSS  F9E.4
40F4:  BRA    40F2
40F6:  MOVWF  FAD
40F8:  MOVLW  06
40FA:  SUBWF  xC1,W
40FC:  BNZ   40E6
40FE:  CLRF   xA0
....................          printf (usb_cdc_putc, "Recibido: %c (Buffer: %s)\r\n",keypress,comando);     // Echo de cualquier otro carácter 
4100:  CLRF   xC1
4102:  MOVF   xC1,W
4104:  CALL   1F3E
4108:  INCF   xC1,F
410A:  MOVWF  00
410C:  MOVWF  xD3
410E:  CALL   322C
4112:  MOVLW  0A
4114:  SUBWF  xC1,W
4116:  BNZ   4102
4118:  MOVFF  82,D3
411C:  CALL   322C
4120:  MOVLW  0C
4122:  MOVWF  xC2
4124:  MOVF   xC2,W
4126:  CALL   1F3E
412A:  INCF   xC2,F
412C:  MOVWF  00
412E:  MOVWF  xD3
4130:  CALL   322C
4134:  MOVLW  16
4136:  SUBWF  xC2,W
4138:  BNZ   4124
413A:  CLRF   FEA
413C:  MOVLW  88
413E:  MOVWF  FE9
4140:  MOVLW  00
4142:  IORWF  FEF,W
4144:  BZ    4166
4146:  MOVFF  FEA,C4
414A:  MOVFF  FE9,C3
414E:  MOVFF  FEF,D3
4152:  CALL   322C
4156:  MOVFF  C4,FEA
415A:  MOVFF  C3,FE9
415E:  INCF   FE9,F
4160:  BTFSC  FD8.2
4162:  INCF   FEA,F
4164:  BRA    4140
4166:  MOVLW  29
4168:  MOVWF  xD3
416A:  CALL   322C
416E:  MOVLW  0D
4170:  MOVWF  xD3
4172:  CALL   322C
4176:  MOVLW  0A
4178:  MOVWF  xD3
417A:  CALL   322C
....................          break; 
417E:  BRA    4180
....................     }    
....................    //Vaciamos el buffer 
....................    keypress=0; 
4180:  CLRF   x82
....................    output_toggle(LED); 
4182:  BCF    F94.2
4184:  BTG    F8B.2
.................... } 
4186:  RETLW  00
....................  
.................... void configurar_timer0_1seg() 
.................... { 
....................    // Reloj a 48 Mhz. 
....................    //    -> Objetivo: Interrupcion cada 1 S 
....................    //    -> ciclo cada 48000000/4 -> 12.000.000 Hz 
....................    //    -> Con 1/256 frec= 46875 Hz ... 
....................  
....................    setup_timer_0 (RTCC_DIV_256|RTCC_INTERNAL); 
*
3166:  MOVLW  87
3168:  MOVWF  FD5
....................    enable_interrupts(int_timer0); 
316A:  BSF    FF2.5
....................    printf ("-TIMER0 Configurado\r\n"); 
316C:  CLRF   xC1
316E:  MOVF   xC1,W
3170:  CALL   1F74
3174:  INCF   xC1,F
3176:  MOVWF  00
3178:  MOVF   00,W
317A:  BTFSS  F9E.4
317C:  BRA    317A
317E:  MOVWF  FAD
3180:  MOVLW  15
3182:  SUBWF  xC1,W
3184:  BNZ   316E
.................... } 
3186:  GOTO   4BE4 (RETURN)
....................  
.................... void prueba () 
.................... { 
....................    while(true) { 
....................    output_toggle(LED); 
....................    relojc4_display(0x04, 8); 
....................    delay_ms(1000); 
....................    output_toggle(LED); 
....................    relojc4_display(0x02, 8); 
....................    delay_ms(1000); 
....................    output_toggle(LED); 
....................    relojc4_display(0x04, 1); 
....................    delay_ms(1000); 
....................    } 
.................... } 
....................  
.................... void escribir_temperatura() 
.................... { 
....................    int direccion; 
....................     
....................    int t; 
....................    tmp=temp-15; 
*
4A38:  MOVLW  0F
4A3A:  SUBWF  xA8,W
4A3C:  CLRF   xC4
4A3E:  MOVWF  xC3
4A40:  BRA    4A00
4A42:  MOVFF  03,B9
4A46:  MOVFF  02,B8
4A4A:  MOVFF  01,B7
4A4E:  MOVFF  00,B6
....................    tmp=tmp*9; 
4A52:  MOVFF  B9,D6
4A56:  MOVFF  B8,D5
4A5A:  MOVFF  B7,D4
4A5E:  MOVFF  B6,D3
4A62:  CLRF   xDA
4A64:  CLRF   xD9
4A66:  MOVLW  10
4A68:  MOVWF  xD8
4A6A:  MOVLW  82
4A6C:  MOVWF  xD7
4A6E:  CALL   3560
4A72:  MOVFF  03,B9
4A76:  MOVFF  02,B8
4A7A:  MOVFF  01,B7
4A7E:  MOVFF  00,B6
....................    t=tmp; 
4A82:  MOVFF  B9,C6
4A86:  MOVFF  B8,C5
4A8A:  MOVFF  B7,C4
4A8E:  MOVFF  B6,C3
4A92:  RCALL  4636
4A94:  MOVFF  01,C2
....................    printf (usb_cdc_putc, "<A1:%c>\r\n",t); 
4A98:  CLRF   xC3
4A9A:  MOVF   xC3,W
4A9C:  CALL   1FA4
4AA0:  INCF   xC3,F
4AA2:  MOVWF  00
4AA4:  MOVWF  xD3
4AA6:  CALL   322C
4AAA:  MOVLW  04
4AAC:  SUBWF  xC3,W
4AAE:  BNZ   4A9A
4AB0:  MOVFF  C2,D3
4AB4:  CALL   322C
4AB8:  MOVLW  3E
4ABA:  MOVWF  xD3
4ABC:  CALL   322C
4AC0:  MOVLW  0D
4AC2:  MOVWF  xD3
4AC4:  CALL   322C
4AC8:  MOVLW  0A
4ACA:  MOVWF  xD3
4ACC:  CALL   322C
....................    sprintf(dig,"%02u",temp); 
4AD0:  CLRF   xC0
4AD2:  MOVLW  AA
4AD4:  MOVWF  xBF
4AD6:  MOVFF  A8,C6
4ADA:  MOVLW  01
4ADC:  MOVWF  xC7
4ADE:  RCALL  4498
....................  
....................     
....................    direccion=segundos/10; 
4AE0:  MOVFF  A4,C8
4AE4:  MOVLW  0A
4AE6:  MOVWF  xC9
4AE8:  CALL   39AA
4AEC:  MOVFF  01,C1
....................    direccion+=horas*10; 
4AF0:  MOVF   xA2,W
4AF2:  MULLW  0A
4AF4:  MOVF   FF3,W
4AF6:  ADDWF  xC1,F
....................    write_eeprom(direccion,temp); 
4AF8:  MOVFF  C1,FA9
4AFC:  MOVFF  A8,FA8
4B00:  BCF    FA6.6
4B02:  BCF    FA6.7
4B04:  BSF    FA6.2
4B06:  MOVFF  FF2,00
4B0A:  BCF    FF2.7
4B0C:  MOVLB  F
4B0E:  MOVLW  55
4B10:  MOVWF  FA7
4B12:  MOVLW  AA
4B14:  MOVWF  FA7
4B16:  BSF    FA6.1
4B18:  BTFSC  FA6.1
4B1A:  BRA    4B18
4B1C:  BCF    FA6.2
4B1E:  MOVF   00,W
4B20:  IORWF  FF2,F
....................     
....................    relojc4_display(1,0); 
4B22:  MOVLW  01
4B24:  MOVLB  0
4B26:  MOVWF  xC7
4B28:  CLRF   xC8
4B2A:  RCALL  4502
....................  
....................    relojc4_display(2,0); 
4B2C:  MOVLW  02
4B2E:  MOVWF  xC7
4B30:  CLRF   xC8
4B32:  RCALL  4502
....................     
....................    relojc4_display(3,dig[0]-'0'); 
4B34:  MOVLW  30
4B36:  SUBWF  xAA,W
4B38:  MOVWF  xC3
4B3A:  MOVLW  03
4B3C:  MOVWF  xC7
4B3E:  MOVFF  C3,C8
4B42:  RCALL  4502
....................  
....................    relojc4_display(4,dig[1]-'0'); 
4B44:  MOVLW  30
4B46:  SUBWF  xAB,W
4B48:  MOVWF  xC3
4B4A:  MOVLW  04
4B4C:  MOVWF  xC7
4B4E:  MOVFF  C3,C8
4B52:  RCALL  4502
.................... } 
4B54:  GOTO   4E9A (RETURN)
....................  
.................... void escribir_temperatura_2() 
.................... { 
....................    int t; 
....................    tmp=temp2-15; 
*
47F6:  BSF    FD8.1
47F8:  MOVFF  B5,C5
47FC:  MOVFF  B4,C4
4800:  MOVFF  B3,C3
4804:  MOVFF  B2,C2
4808:  CLRF   xC9
480A:  CLRF   xC8
480C:  MOVLW  70
480E:  MOVWF  xC7
4810:  MOVLW  82
4812:  MOVWF  xC6
4814:  RCALL  419A
4816:  MOVFF  03,B9
481A:  MOVFF  02,B8
481E:  MOVFF  01,B7
4822:  MOVFF  00,B6
....................    tmp=tmp*9; 
4826:  MOVFF  B9,D6
482A:  MOVFF  B8,D5
482E:  MOVFF  B7,D4
4832:  MOVFF  B6,D3
4836:  CLRF   xDA
4838:  CLRF   xD9
483A:  MOVLW  10
483C:  MOVWF  xD8
483E:  MOVLW  82
4840:  MOVWF  xD7
4842:  CALL   3560
4846:  MOVFF  03,B9
484A:  MOVFF  02,B8
484E:  MOVFF  01,B7
4852:  MOVFF  00,B6
....................    t=tmp; 
4856:  MOVFF  B9,C6
485A:  MOVFF  B8,C5
485E:  MOVFF  B7,C4
4862:  MOVFF  B6,C3
4866:  RCALL  4636
4868:  MOVFF  01,C1
....................    printf(usb_cdc_putc,"<A0:%c>\r\n", t); 
486C:  CLRF   xC2
486E:  MOVF   xC2,W
4870:  CALL   1FC8
4874:  INCF   xC2,F
4876:  MOVWF  00
4878:  MOVWF  xD3
487A:  CALL   322C
487E:  MOVLW  04
4880:  SUBWF  xC2,W
4882:  BNZ   486E
4884:  MOVFF  C1,D3
4888:  CALL   322C
488C:  MOVLW  3E
488E:  MOVWF  xD3
4890:  CALL   322C
4894:  MOVLW  0D
4896:  MOVWF  xD3
4898:  CALL   322C
489C:  MOVLW  0A
489E:  MOVWF  xD3
48A0:  CALL   322C
....................     
....................  
....................    sprintf(dig,"%3f",(temp2*10)); 
48A4:  MOVFF  B5,D6
48A8:  MOVFF  B4,D5
48AC:  MOVFF  B3,D4
48B0:  MOVFF  B2,D3
48B4:  CLRF   xDA
48B6:  CLRF   xD9
48B8:  MOVLW  20
48BA:  MOVWF  xD8
48BC:  MOVLW  82
48BE:  MOVWF  xD7
48C0:  CALL   3560
48C4:  MOVFF  00,C2
48C8:  MOVFF  01,C3
48CC:  MOVFF  02,C4
48D0:  MOVFF  03,C5
48D4:  CLRF   xC0
48D6:  MOVLW  AA
48D8:  MOVWF  xBF
48DA:  MOVLW  89
48DC:  MOVWF  FE9
48DE:  MOVFF  03,C9
48E2:  MOVFF  02,C8
48E6:  MOVFF  01,C7
48EA:  MOVFF  00,C6
48EE:  MOVLW  06
48F0:  MOVWF  xCA
48F2:  BRA    466E
....................      
....................    relojc4_display(1,0); 
48F4:  MOVLW  01
48F6:  MOVWF  xC7
48F8:  CLRF   xC8
48FA:  RCALL  4502
....................  
....................    relojc4_display(2,dig[0]-'0'); 
48FC:  MOVLW  30
48FE:  SUBWF  xAA,W
4900:  MOVWF  xC2
4902:  MOVLW  02
4904:  MOVWF  xC7
4906:  MOVFF  C2,C8
490A:  RCALL  4502
....................     
....................    relojc4_display(3,dig[1]-'0'); 
490C:  MOVLW  30
490E:  SUBWF  xAB,W
4910:  MOVWF  xC2
4912:  MOVLW  03
4914:  MOVWF  xC7
4916:  MOVFF  C2,C8
491A:  RCALL  4502
....................     
....................    relojc4_display(4,dig[2]-'0'); 
491C:  MOVLW  30
491E:  SUBWF  xAC,W
4920:  MOVWF  xC2
4922:  MOVLW  04
4924:  MOVWF  xC7
4926:  MOVFF  C2,C8
492A:  RCALL  4502
.................... } 
492C:  GOTO   4E88 (RETURN)
....................  
.................... void escribir_hora() 
.................... { 
....................    char h[5]; 
....................    sprintf(h,"%02u%02u", horas,minutos); 
*
45C0:  CLRF   xC0
45C2:  MOVLW  C1
45C4:  MOVWF  xBF
45C6:  MOVFF  A2,C6
45CA:  MOVLW  01
45CC:  MOVWF  xC7
45CE:  RCALL  4498
45D0:  MOVFF  A3,C6
45D4:  MOVLW  01
45D6:  MOVWF  xC7
45D8:  RCALL  4498
....................     
....................    relojc4_display(1,h[0]-'0'); 
45DA:  MOVLW  30
45DC:  SUBWF  xC1,W
45DE:  MOVWF  xC6
45E0:  MOVLW  01
45E2:  MOVWF  xC7
45E4:  MOVFF  C6,C8
45E8:  RCALL  4502
....................     
....................    relojc4_display(2,h[1]-'0'); 
45EA:  MOVLW  30
45EC:  SUBWF  xC2,W
45EE:  MOVWF  xC6
45F0:  MOVLW  02
45F2:  MOVWF  xC7
45F4:  MOVFF  C6,C8
45F8:  RCALL  4502
....................     
....................    relojc4_display(3,h[2]-'0'); 
45FA:  MOVLW  30
45FC:  SUBWF  xC3,W
45FE:  MOVWF  xC6
4600:  MOVLW  03
4602:  MOVWF  xC7
4604:  MOVFF  C6,C8
4608:  RCALL  4502
....................     
....................    relojc4_display(4,h[3]-'0'); 
460A:  MOVLW  30
460C:  SUBWF  xC4,W
460E:  MOVWF  xC6
4610:  MOVLW  04
4612:  MOVWF  xC7
4614:  MOVFF  C6,C8
4618:  RCALL  4502
....................     
....................    if (alarma==1) 
461A:  DECFSZ x9F,W
461C:  BRA    4632
....................    { 
....................       if (ah==horas && am==minutos) 
461E:  MOVF   xA2,W
4620:  SUBWF  x9D,W
4622:  BNZ   4632
4624:  MOVF   xA3,W
4626:  SUBWF  x9E,W
4628:  BNZ   4632
....................       { 
....................          relojc4_enviar_comando(0x05); 
462A:  MOVLW  05
462C:  MOVWF  xC6
462E:  CALL   3B0E
....................       } 
....................    } 
....................    //printf(usb_cdc_putc, "<HO:%02d:%02d:%02d>\r\n",horas,minutos,segundos); 
....................    //printf(usb_cdc_putc, "<FE:%02d/%02d/20%02d>\r\n",dia,mes,ano); 
....................     
....................     
.................... } 
4632:  GOTO   4E7A (RETURN)
....................  
....................  
....................  
.................... #int_timer0 
.................... void seg_int() 
.................... { 
....................    inter=1;  
*
2C68:  MOVLW  01
2C6A:  MOVWF  xA9
.................... } 
....................  
....................  
....................  
.................... //Rutina principal 
2C6C:  BCF    FF2.2
2C6E:  GOTO   187C
.................... void main() 
.................... { 
*
4B58:  CLRF   FF8
4B5A:  BCF    FD0.7
4B5C:  BSF    0D.7
4B5E:  CLRF   FEA
4B60:  CLRF   FE9
4B62:  BSF    FB8.3
4B64:  MOVLW  E1
4B66:  MOVWF  FAF
4B68:  MOVLW  04
4B6A:  MOVWF  FB0
4B6C:  MOVLW  A6
4B6E:  MOVWF  FAC
4B70:  MOVLW  90
4B72:  MOVWF  FAB
4B74:  MOVF   FC1,W
4B76:  ANDLW  C0
4B78:  IORLW  0F
4B7A:  MOVWF  FC1
4B7C:  MOVLW  07
4B7E:  MOVWF  FB4
4B80:  CLRF   1F
4B82:  CLRF   21
4B84:  MOVLW  04
4B86:  MOVWF  22
4B88:  MOVLW  0E
4B8A:  MOVWF  23
4B8C:  CLRF   27
4B8E:  CLRF   x7C
4B90:  CLRF   x81
4B92:  CLRF   x82
4B94:  MOVLW  5A
4B96:  MOVWF  x83
4B98:  MOVWF  x84
4B9A:  CLRF   x85
4B9C:  CLRF   x86
4B9E:  CLRF   x87
4BA0:  CLRF   x9D
4BA2:  CLRF   x9E
4BA4:  CLRF   x9F
4BA6:  CLRF   xA0
4BA8:  CLRF   xA1
4BAA:  CLRF   xA2
4BAC:  CLRF   xA3
4BAE:  CLRF   xA4
4BB0:  CLRF   xA5
4BB2:  CLRF   xA6
4BB4:  CLRF   xA7
4BB6:  CLRF   xA9
4BB8:  CLRF   xBA
4BBA:  CLRF   xBB
4BBC:  CLRF   xBC
4BBE:  MOVLW  1E
4BC0:  MOVWF  xBD
4BC2:  MOVLW  01
4BC4:  MOVWF  xBE
4BC6:  CLRF   xBF
4BC8:  CLRF   xC0
....................    aure_configurar();sonido_voipvoip(); 
4BCA:  GOTO   2D20
4BCE:  GOTO   2E20
....................    servos_configurar(); 
4BD2:  GOTO   2E60
....................  
....................    ds1624_init(0); 
4BD6:  CLRF   xC1
4BD8:  GOTO   2F24
....................    ds1307_init(); 
4BDC:  GOTO   3070
....................     
....................    configurar_timer0_1seg(); 
4BE0:  GOTO   3166
....................       
....................    while(1) 
....................    { 
....................      
....................      // Si usamos el USB 
....................      //usb_task(); 
....................      // Comprobamos si tenemos algún caracter en el buffer serie/usb, si lo 
....................      // tenemos llamamos a aure_usb_serie_int() que nos lo guardará en keypress 
....................      //if (usb_cdc_kbhit()) aure_usb_serie_int(); 
....................       aure_usb(); 
4BE4:  GOTO   4188
....................      if (keypress!=0x00) aure_serie(); 
4BE8:  MOVF   x82,F
4BEA:  BZ    4BF0
4BEC:  CALL   3B64
....................      if (inter==1) { 
4BF0:  DECFSZ xA9,W
4BF2:  BRA    4E9C
....................          objetivo=37.8; 
4BF4:  MOVLW  33
4BF6:  MOVWF  xB1
4BF8:  MOVWF  xB0
4BFA:  MOVLW  17
4BFC:  MOVWF  xAF
4BFE:  MOVLW  84
4C00:  MOVWF  xAE
....................          disable_interrupts(GLOBAL); 
4C02:  BCF    FF2.6
4C04:  BCF    FF2.7
4C06:  BTFSC  FF2.7
4C08:  BRA    4C04
....................          temp2=ds1820_read(); 
4C0A:  CALL   34CA
4C0E:  MOVFF  03,B5
4C12:  MOVFF  02,B4
4C16:  MOVFF  01,B3
4C1A:  MOVFF  00,B2
....................          enable_interrupts(GLOBAL); 
4C1E:  MOVLW  C0
4C20:  IORWF  FF2,F
....................          output_toggle(LED); 
4C22:  BCF    F94.2
4C24:  BTG    F8B.2
....................          //printf(usb_cdc_putc, "%f a %f = %f\r\n", temp2, objetivo, (objetivo-temp2)); 
....................          if ((objetivo-temp2)>.5) { 
4C26:  BSF    FD8.1
4C28:  MOVFF  B1,C5
4C2C:  MOVFF  B0,C4
4C30:  MOVFF  AF,C3
4C34:  MOVFF  AE,C2
4C38:  MOVFF  B5,C9
4C3C:  MOVFF  B4,C8
4C40:  MOVFF  B3,C7
4C44:  MOVFF  B2,C6
4C48:  CALL   419A
4C4C:  MOVFF  00,C1
4C50:  MOVFF  01,C2
4C54:  MOVFF  02,C3
4C58:  MOVFF  03,C4
4C5C:  CLRF   xC8
4C5E:  CLRF   xC7
4C60:  CLRF   xC6
4C62:  MOVLW  7E
4C64:  MOVWF  xC5
4C66:  MOVFF  03,CC
4C6A:  MOVFF  02,CB
4C6E:  MOVFF  01,CA
4C72:  MOVFF  00,C9
4C76:  GOTO   4404
4C7A:  BNC   4C90
....................             //if (calefaccion==0) sonido_sirena(); 
....................             calefaccion=1; 
4C7C:  MOVLW  01
4C7E:  MOVWF  xBB
....................             ventilador=0; 
4C80:  CLRF   xBC
....................             incubadora_calefaccion(1); 
4C82:  MOVWF  xC1
4C84:  CALL   3266
....................             incubadora_ventilador(0); 
4C88:  CLRF   xC1
4C8A:  CALL   324E
....................          } else { 
4C8E:  BRA    4CA4
....................             //if (calefaccion==1) sonido_beep(); 
....................             calefaccion=0; 
4C90:  CLRF   xBB
....................             ventilador=1; 
4C92:  MOVLW  01
4C94:  MOVWF  xBC
....................             incubadora_calefaccion(0); 
4C96:  CLRF   xC1
4C98:  CALL   3266
....................             incubadora_ventilador(1); 
4C9C:  MOVLW  01
4C9E:  MOVWF  xC1
4CA0:  CALL   324E
....................          } 
....................           
....................          grados=grados+direccion; 
4CA4:  MOVF   xBE,W
4CA6:  ADDWF  xBD,F
....................          servos_mover_a(grados, 2); 
4CA8:  MOVFF  BD,C1
4CAC:  MOVLW  02
4CAE:  MOVWF  xC2
4CB0:  CALL   388A
....................          if (grados>149) direccion=-1; 
4CB4:  MOVF   xBD,W
4CB6:  SUBLW  95
4CB8:  BC    4CBE
4CBA:  MOVLW  FF
4CBC:  MOVWF  xBE
....................          if (grados<31) direccion=1; 
4CBE:  MOVF   xBD,W
4CC0:  SUBLW  1E
4CC2:  BNC   4CC8
4CC4:  MOVLW  01
4CC6:  MOVWF  xBE
....................          //set_timer0(32767); 
....................          if (tempt==1) 
4CC8:  DECFSZ xBA,W
4CCA:  BRA    4E80
....................          { 
....................             ds1307_get_date(dia,mes,ano,j); 
....................             ds1307_get_time(horas,minutos,segundos); 
....................             escribir_hora(); 
*
4E76:  GOTO   45C0
....................             tempt=2; 
4E7A:  MOVLW  02
4E7C:  MOVWF  xBA
....................          } else { 
4E7E:  BRA    4E9A
....................             if (tempt==2) 
4E80:  MOVF   xBA,W
4E82:  SUBLW  02
4E84:  BNZ   4E8C
....................             { 
....................                escribir_temperatura_2(); 
4E86:  BRA    47F6
....................                tempt=0; 
4E88:  CLRF   xBA
....................             } else { 
4E8A:  BRA    4E9A
....................                tempt=1; 
4E8C:  MOVLW  01
4E8E:  MOVWF  xBA
....................                temp=ds1624_read_temp_c(0); 
4E90:  CLRF   xC1
4E92:  BRA    4930
4E94:  MOVFF  01,A8
....................                escribir_temperatura(); 
4E98:  BRA    4A38
....................             } 
....................          } 
....................          inter=0; 
4E9A:  CLRF   xA9
....................      } 
....................    } 
4E9C:  BRA    4BE4
.................... } 
4E9E:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 8300   PBADEN CCP2C1 MCLR NOLPT1OSC RESERVED
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT RESERVED
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
